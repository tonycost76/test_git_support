{
  "refName" : "INWK-InvSnapshot-Import",
  "refKey" : "21c1403184d71e59c82f709ea65e6b98",
  "displayName" : "INWK-InvSnapshot-Import",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1509031268919,
    "createUser" : "Admin Innerworkings",
    "updateTs" : 1518815589046,
    "updateUser" : "Praveen Subba Rao"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "9b203d13-ee47-4cb7-9ad7-cccd8fdb6cfc",
  "script" : "\r\nvar csvPackage = Packages.com.opencsv;\r\nvar stringUtils = Packages.org.apache.commons.lang3.StringUtils;\r\nvar eisExceptionsPackage = Packages.com.eis.core.api.v1.exception;\r\nvar df = new java.text.SimpleDateFormat(\"yyyyMMdd\");\r\nvar jsonMapper = new com.eis.json.EnvisionJacksonJaxbJSONMapper();\r\n\r\nvar LOG = org.slf4j.LoggerFactory.getLogger(\"INWK-InvSnapshot-Import:\");\r\n\r\nfunction upsertLot(rowFieldsMap, errorDetailList, syncDetailList) {\r\n\tvar upserted = false;\r\n\r\n\ttry {\r\n\t    var dataDomain = rowFieldsMap.get(\"Customer\");\r\n\t    var dataDomains = java.util.Arrays.asList(dataDomain);\r\n\t    var siteRefName = rowFieldsMap.get(\"DC\");\r\n    \tvar site = siteService.getByRefName(siteRefName, baseDomain);\r\n    \tif(!site) {\r\n    \t    throw new com.eis.core.api.v1.exception.B2BNotFoundException(java.text.MessageFormat.format(\"Site not found for refName: {0} and dataDomain: {1}\", siteRefName, baseDomain));\r\n    \t}\r\n    \tvar inventoryPools = inventoryPoolService.findBySiteId(site.getId(), dataDomains);\r\n\r\n    \tif(inventoryPools && !inventoryPools.isEmpty()) {\r\n    \t    var inventoryPool = inventoryPools.get(0);\r\n    \t    // product sku\r\n    \t\tvar sku = rowFieldsMap.get(\"SKU\");\r\n    \t\t// lot number\r\n    \t\tvar lotNumber = rowFieldsMap.get(\"LotNumber\");\r\n    \t\t// expiration date as string\r\n    \t\tvar expirationDateStr = rowFieldsMap.get(\"Expiration_Date\");\r\n    \t\t// expiration date\r\n    \t\tvar expirationDate = null;\r\n    \t\t// lot identifier\r\n    \t\tvar lotIdentifier = null;\r\n    \t\t// parse only if expiration date as string is available\r\n    \t\tif(expirationDateStr) {\r\n    \t\t    expirationDate = df.parse(expirationDateStr);\r\n        \t\tlotIdentifier = com.eis.ssit.api.v1.model.Lot.formatDateAsString(expirationDate);\r\n    \t\t}\r\n    \t\tvar qtyAvail = java.lang.Long.valueOf(rowFieldsMap.get(\"QTY_AVAILABLE\"));\r\n    \t\tvar qtyAlloc = java.lang.Long.valueOf(rowFieldsMap.get(\"QTY_ALLOCATED\"));\r\n    \t\tvar qtyHold = java.lang.Long.valueOf(rowFieldsMap.get(\"QTY_HOLD\"));\r\n    \t\tvar actionType = com.eis.ssit.api.v1.model.ActionType.Adjustment;\r\n\r\n    \t\tvar inventoryPoolEntries = inventoryPoolEntryDAO.findByInventoryPoolIdAndProductIdentifier(inventoryPool.getId(), sku, 0, -1, null, java.util.Arrays.asList(baseDomain));\r\n\r\n            var skuObj = skuDAO.findSkuBySkuId(sku, baseDomain);\r\n    \t\tif(!skuObj) {\r\n    \t\t    throw new java.lang.IllegalStateException(java.text.MessageFormat.format(\"Unable to find sku for sku: {0}\", sku));\r\n    \t\t}\r\n    \t\t\r\n    \t\tif(skuObj.getProductRefKey() === undefined || skuObj.getProductRefKey() === null || skuObj.getProductRefKey() === '') {\r\n    \t\t    throw new java.lang.IllegalStateException(java.text.MessageFormat.format(\"Unable to find product for sku: {0}\", sku));\r\n    \t\t}\r\n    \t\t\r\n    \t\tvar productObj = productService.getByRefKey(skuObj.getProductRefKey());\r\n    \t\tif(!productObj) {\r\n    \t\t    throw new java.lang.IllegalStateException(java.text.MessageFormat.format(\"Unable to find product for sku: {0}\", sku));\r\n    \t\t}\r\n    \t\t\r\n    \t\tvar productRefData = productObj.getReferenceData();\r\n    \t\tif(productRefData) {\r\n    \t\t    for(var i = 0; i < productRefData.size(); i++) {\r\n    \t\t        var refData = productRefData.get(i);\r\n    \t\t        if(refData.getName() === 'CustomerId') {\r\n    \t\t            rowFieldsMap.put(\"CustomerId\", refData.getValue());\r\n    \t\t        }\r\n    \t\t    }\r\n    \t\t}\r\n\r\n    \t\tvar inventoryPoolEntry = null;\r\n\r\n    \t\tif(!inventoryPoolEntries || inventoryPoolEntries.isEmpty() || !inventoryPoolEntries.get(0)) {\r\n    \t\t    if(LOG.isInfoEnabled()) {\r\n    \t\t        LOG.info(\"Inventory pool entry not found for the sku: {} and dataDomain: {}\", sku, baseDomain);\r\n    \t\t    }\r\n    \t\t    inventoryPoolEntry = new com.eis.ssit.api.v1.model.InventoryPoolEntry();\r\n    \t\t    inventoryPoolEntry.setRefName(siteRefName + \" - \" + sku);\r\n    \t\t    inventoryPoolEntry.setDisplayName(skuObj.getDisplayName());\r\n    \t\t    inventoryPoolEntry.getDataDomains().add(baseDomain);\r\n    \t\t    if(baseDomain !== dataDomain) {\r\n    \t\t        inventoryPoolEntry.getDataDomains().add(dataDomain);\r\n    \t\t    }\r\n    \t\t    inventoryPoolEntry.setSkuId(sku);\r\n    \t\t    inventoryPoolEntry.setProductIdentifier(productObj.getProductIdentifier());\r\n    \t\t    inventoryPoolEntry.setProductId(productObj.getId());\r\n    \t\t    inventoryPoolEntry.setParentInventoryPoolId(inventoryPool.getId());\r\n    \t\t    inventoryPoolEntry.setOrganizationReference(productObj.getOrganizationReference());\r\n    \t\t}\r\n    \t\telse {\r\n    \t\t    if(LOG.isInfoEnabled()) {\r\n    \t\t        LOG.info(\"Inventory pool entry found for the sku: {} and dataDomain: {}\", sku, baseDomain);\r\n    \t\t    }\r\n    \t\t    inventoryPoolEntry = inventoryPoolEntries.get(0);\r\n    \t\t}\r\n\r\n\t        var lots = inventoryPoolEntry.getLots();\r\n\t        var lot = null;\r\n\t        if(lots && !lots.isEmpty()) {\r\n\t            if(!lotNumber) {\r\n\t                throw new java.lang.IllegalStateException(java.text.MessageFormat.format(\"InventoryPoolEntry with Id: {0} and ProductIdentifier: {1} has lots defined whereas the data to sync does not contain a lot identifier\", inventoryPoolEntry.getId(), sku));\r\n\t            }\r\n\t            for(var i = 0; i < lots.size(); i++) {\r\n\r\n\t                var iLot = lots.get(i);\r\n\t                if(iLot.getLotIdentifier().equals(com.eis.ssit.api.v1.model.Lot.formatDateAsString(expirationDate)) && iLot.getExpirationDateAsString().equals(com.eis.ssit.api.v1.model.Lot.formatDateAsString(expirationDate))) {\r\n\t                    lot = iLot;\r\n\t                    break;\r\n\t                }\r\n\r\n\t            }\r\n\t        }\r\n\r\n\t        if(!lot && expirationDate && skuObj.isShelfLifeRequired()) {\r\n\t            lot = new com.eis.ssit.api.v1.model.Lot();\r\n\t            lot.setLotIdentifier(com.eis.ssit.api.v1.model.Lot.formatDateAsString(expirationDate));\r\n\t            lot.setExpirationDateAsString(expirationDateStr);\r\n\t            lot.setExpirationDate(expirationDate);\r\n\t            inventoryPoolEntry.getLots().add(lot);\r\n\t        }\r\n\r\n\t        var deltaAvailQty = new java.lang.Long(0);\r\n\t        var deltaReservedQty = new java.lang.Long(0);\r\n\t        var deltaHoldQty = new java.lang.Long(0);\r\n\t        var deltaUnavailQty = new java.lang.Long(0);\r\n\r\n\t        var origAvailQty = new java.lang.Long(0);\r\n\t        var origReservedQty = new java.lang.Long(0);\r\n\t        var origHoldQty = new java.lang.Long(0);\r\n\r\n\t        if(lot) {\r\n\r\n\t            origAvailQty = lot.getAvailableQty();\r\n\t            origReservedQty = lot.getReservedQty();\r\n\t            origHoldQty = lot.getHoldQty();\r\n\r\n\t            // delta is at the lot level\r\n\t            deltaAvailQty = qtyAvail - origAvailQty;\r\n    \t        deltaReservedQty = qtyAlloc - origReservedQty;\r\n\t            deltaHoldQty = qtyHold - origHoldQty;\r\n\r\n    \t        lot.setAvailableQty(lot.getAvailableQty() + deltaAvailQty);\r\n    \t        lot.setReservedQty(lot.getReservedQty() + deltaReservedQty);\r\n    \t        lot.setHoldQty(lot.getHoldQty() + deltaHoldQty);\r\n\t        }\r\n\t        else {\r\n\r\n\t            origAvailQty = inventoryPoolEntry.getAvailableQty();\r\n\t            origReservedQty = inventoryPoolEntry.getReservedQty();\r\n\t            origHoldQty = inventoryPoolEntry.getHoldQty();\r\n\r\n\t            // delta will only be on the top level entries\r\n\t            deltaAvailQty = qtyAvail - origAvailQty;\r\n    \t        deltaReservedQty = qtyAlloc - origReservedQty;\r\n\t            deltaHoldQty = qtyHold - origHoldQty;\r\n\t        }\r\n\r\n\t        inventoryPoolEntry.setAvailableQty(inventoryPoolEntry.getAvailableQty() + deltaAvailQty);\r\n\t        inventoryPoolEntry.setReservedQty(inventoryPoolEntry.getReservedQty() + deltaReservedQty);\r\n\t        inventoryPoolEntry.setHoldQty(inventoryPoolEntry.getHoldQty() + deltaHoldQty);\r\n\r\n\r\n\t        // inventoryPoolEntryAuditLogEntryDAO.auditInventorySync(inventoryPoolEntry, lotIdentifier, lotIdentifier, deltaAvailQty, deltaReservedQty, deltaHoldQty, deltaUnavailQty, \"Inventory Sync\", \"admin@innerworkings.com\", null);\r\n\r\n            // now using the actual implementation since the scrub script would have been run prior to this.\r\n            inventoryPoolEntryDAO.save(inventoryPoolEntry, com.eis.ssit.api.v1.model.ActionType.Sync, \"Inventory Sync\");\r\n\r\n\t        if(deltaAvailQty !== 0 || deltaReservedQty !== 0 || deltaHoldQty !== 0) {\r\n    \t        if(lot) {\r\n        \t        syncDetailList.add(java.text.MessageFormat.format(\"Product: {0} lotIdentifier: {1} origAvailQty: {2} origReservedQty: {3} origHoldQty: {4} synced with deltaAvailQty: {5} deltaReservedQty: {6} deltaHoldQty: {7}\", sku, lotIdentifier, origAvailQty, origReservedQty, origHoldQty, deltaAvailQty, deltaReservedQty, deltaHoldQty));\r\n    \t        }\r\n    \t        else {\r\n        \t        syncDetailList.add(java.text.MessageFormat.format(\"Product: {0} origAvailQty: {1} origReservedQty: {2} origHoldQty: {3} synced with deltaAvailQty: {4} deltaReservedQty: {5} deltaHoldQty: {6}\", sku, origAvailQty, origReservedQty, origHoldQty, deltaAvailQty, deltaReservedQty, deltaHoldQty));\r\n    \t        }\r\n\t        }\r\n\r\n\t        // auditInventorySync(inventoryPoolEntry, lot, deltaAvailQty, deltaReservedQty,\r\n\t        // deltaHoldQty, 0, \"Inventory Sync\", \"admin@innerworkings.com\", null);\r\n\r\n    \t\tupserted = true;\r\n    \t}\r\n    \telse {\r\n    \t    throw new com.eis.core.api.v1.exception.B2BNotFoundException(java.text.MessageFormat.format(\"No inventory pool exists for site refName: {0} and dataDomain: {1}\", siteRefName, dataDomain));\r\n    \t}\r\n\t}\r\n\tcatch (e) {\r\n\t    var errMessage = e.message;\r\n\t    if(e.javaException) {\r\n\t        if(LOG.isErrorEnabled()) {\r\n\t            LOG.error(\"Error while upserting lot\", e.javaException);\r\n\t        }\r\n\t        errMessage = e.javaException.getMessage();\r\n\t    }\r\n\t    errorDetailList.add(errMessage);\r\n\t}\r\n\r\n\treturn upserted;\r\n}\r\n\r\nfunction serializeCSV(rows) {\r\n    var sw = new java.io.StringWriter();\r\n    var csvWriter = new csvPackage.CSVWriter(sw);\r\n    for(var x = 0; x < rows.size(); x++) {\r\n        var record = rows.get(x);\r\n        csvWriter.writeNext(record);\r\n    }\r\n\r\n    csvWriter.close();\r\n\r\n    var body = sw.toString();\r\n\r\n    return body;\r\n}\r\n\r\nfunction createMailboxEntry(header_CamelFileName, subject, data, contentType, mailbox) {\r\n    scriptUtils.createMailboxEntry(mailbox, data, header_CamelFileName, subject,  \"alerts@enspirecommerce.com\", \"alerts@enspirecommerce.com\", null, null, contentType, true);\r\n}\r\n\r\nvar baseDomain = \"com.innerworkings\";\r\n\r\nvar br = new java.io.BufferedReader(new java.io.InputStreamReader(org.apache.commons.io.IOUtils.toInputStream(body)));\r\n\r\n// if there is any parse error (instead of validation errors), then, moving the message to a failure mailbox by using route try-catch constructs.\r\nvar csvReader = new csvPackage.CSVReader(br);\r\nvar rowFields = csvReader.readNext();\r\n// FIXME need to streaming here. The inventory file can be large\r\nvar validRows = new java.util.ArrayList();\r\nvar invalidRows = new java.util.ArrayList();\r\nvar reportMap = new java.util.LinkedHashMap();\r\nvar errorDetailList = new java.util.ArrayList();\r\nvar syncDetailList = new java.util.ArrayList();\r\nvar lineSeparator = java.lang.System.lineSeparator();\r\n\r\n// headers\r\nvar headers = rowFields;\r\nheaders = java.util.Arrays.copyOf(headers, headers.length + 1);\r\nheaders[headers.length - 1] = \"CustomerId\";\r\nvalidRows.add(headers);\r\ninvalidRows.add(headers);\r\n\r\nvar valid = false;\r\nwhile(rowFields) {\r\n\trowFields = csvReader.readNext();\r\n\tif(rowFields) {\r\n        var rowFieldsMap = new java.util.HashMap();\r\n\t\tfor(var i = 0; i < rowFields.length; i++) {\r\n\t\t\trowFieldsMap.put(headers[i], rowFields[i]);\r\n\t\t}\r\n\t\tvalid = upsertLot(rowFieldsMap, errorDetailList, syncDetailList);\r\n\t\tif(valid) {\r\n\t\t    rowFields = java.util.Arrays.copyOf(rowFields, rowFields.length + 1);\r\n\t\t    rowFields[rowFields.length - 1] = rowFieldsMap.get(\"CustomerId\");\r\n\t\t\tvalidRows.add(rowFields);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinvalidRows.add(rowFields);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// checking if size > 1 to make sure there are actual data rows apart from the header\r\nif(validRows.size() > 1) {\r\n\tvar mailbox = scriptUtils.getMailbox(\"INWK-InvSnapshot-FromOMS\");\r\n\tvar data = serializeCSV(validRows);\r\n    createMailboxEntry(header_CamelFileName, \"Synced From Inventory Feed\", data, \"application/csv\", mailbox);\r\n}\r\n\r\nvar mailbox = scriptUtils.getMailbox(\"INWK-InvSnapshot-Report\");\r\n// subtracting 1 here since one row would be headers.\r\nreportMap.put(\"UpsertedNumberOfRows\", (validRows.size() - 1));\r\nreportMap.put(\"NotUpsertedNumberOfRows\", (invalidRows.size() - 1));\r\nreportMap.put(\"errorDetails\", errorDetailList);\r\nreportMap.put(\"syncDetails\", syncDetailList);\r\nvar data = jsonMapper.writeValueAsString(reportMap);\r\nvar filenameWithoutExt = org.apache.commons.io.FilenameUtils.removeExtension(header_CamelFileName);\r\ncreateMailboxEntry(filenameWithoutExt, \"Inventory Sync Report\", data, \"application/json\", mailbox);\r\n\r\nif(errorDetailList.size() > 0) {\r\n    taskHelper.notifyAndCreateTask(\r\n    \"processInventorySync:file:\"+header_CamelFileName+java.lang.System.nanoTime(),\r\n    \"Process of Inventory Sync file failed. FileName: \"+header_CamelFileName,\r\n    data,\r\n    \"Inventory Sync File Process Failure\", \"com.innerworkings\",\r\n    \"Inventory Sync File Process Failure\", \"inventory-sync-process-failure\", \"Tony Costanzo\");\r\n}\r\n\r\nvar header_syncDetails;\r\nif(syncDetailList.isEmpty()) {\r\n    header_syncDetails = \"No sync differences\";\r\n}\r\nelse {\r\n    header_syncDetails = stringUtils.join(syncDetailList, lineSeparator);\r\n}\r\n            ",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "invSnapshotImport",
    "refKey" : "c304ee9e2908f5d913b798360e38fab0",
    "displayName" : "invSnapshotImport",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "invSnapshotImport" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1509031103057,
      "createUser" : "Admin Innerworkings",
      "updateTs" : 1509139615539,
      "updateUser" : "Admin Innerworkings"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "3f0449b8-c2f6-4cc8-9284-434795e0195e",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "body" : {
          "id" : null,
          "refName" : "body",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "body",
          "description" : null
        },
        "header_CamelFileName" : {
          "id" : null,
          "refName" : "header_CamelFileName",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_CamelFileName",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : {
        "header_syncDetails" : {
          "id" : null,
          "refName" : "header_syncDetails",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_syncDetails",
          "description" : null
        }
      }
    },
    "scriptContextObjects" : {
      "body" : {
        "type" : "scriptInputVariable",
        "name" : "body",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "body",
        "parameters" : { }
      },
      "businessNumberGeneratorDAO" : {
        "type" : "javaBean",
        "name" : "businessNumberGeneratorDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "emailNotifier" : {
        "type" : "javaBean",
        "name" : "emailNotifier",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "header_CamelFileName" : {
        "type" : "scriptInputVariable",
        "name" : "header_CamelFileName",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_CamelFileName",
        "parameters" : { }
      },
      "inventoryPoolEntryAuditLogEntryDAO" : {
        "type" : "javaBean",
        "name" : "inventoryPoolEntryAuditLogEntryDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "inventoryPoolEntryDAO" : {
        "type" : "javaBean",
        "name" : "inventoryPoolEntryDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "inventoryPoolEntryService" : {
        "type" : "serviceBean",
        "name" : "inventoryPoolEntryService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "inventoryPoolEntryService",
        "parameterName" : null,
        "parameters" : { }
      },
      "inventoryPoolService" : {
        "type" : "serviceBean",
        "name" : "inventoryPoolService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "inventoryPoolService",
        "parameterName" : null,
        "parameters" : { }
      },
      "productService" : {
        "type" : "serviceBean",
        "name" : "productService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "productService",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "siteService" : {
        "type" : "serviceBean",
        "name" : "siteService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "siteService",
        "parameterName" : null,
        "parameters" : { }
      },
      "skuDAO" : {
        "type" : "daoBean",
        "name" : "skuDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "skuDAO",
        "parameterName" : null,
        "parameters" : { }
      },
      "skuService" : {
        "type" : "serviceBean",
        "name" : "skuService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "skuService",
        "parameterName" : null,
        "parameters" : { }
      },
      "taskHelper" : {
        "type" : "javaBean",
        "name" : "taskHelper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.innerworkings" ]
  },
  "functionType" : "utility",
  "inputs" : { },
  "result" : null,
  "active" : true,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "innerworkingsPolicy",
    "refKey" : "6eca2f751c7092f4f789863252fbd7e1",
    "displayName" : "innerworkingsPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "innerworkingsPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1507818693457,
      "createUser" : "Admin Innerworkings",
      "updateTs" : 1559935221167,
      "updateUser" : "Tony Costanzo"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "3ca01532-b431-4906-a351-25394a7b5546",
    "allowedPackages" : {
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysyncfleetpride" : "com.eis.oms.inventory.sync.fleetpride",
      "comeisomsinventorysyncv2" : "com.eis.oms.inventory.sync.v2",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1integrationmarketplace" : "com.eis.ssit.api.v1.integration.marketplace",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparsers" : "com.eis.ssit.parsers",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersproductskufleetpride" : "com.eis.ssit.parsers.productsku.fleetpride",
      "comeisssitparserssite" : "com.eis.ssit.parsers.site",
      "comeisssitparsersskucrossreference" : "com.eis.ssit.parsers.skucrossreference",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.innerworkings" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "invSnapshotImport",
    "refId" : "3f0449b8-c2f6-4cc8-9284-434795e0195e",
    "refKey" : "c304ee9e2908f5d913b798360e38fab0",
    "displayName" : "invSnapshotImport",
    "dataDomain" : "com.innerworkings",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "innerworkingsPolicy",
    "refId" : "3ca01532-b431-4906-a351-25394a7b5546",
    "refKey" : "6eca2f751c7092f4f789863252fbd7e1",
    "displayName" : "innerworkingsPolicy",
    "dataDomain" : "com.innerworkings",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "admin@innerworkings.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.innerworkings" ]
}