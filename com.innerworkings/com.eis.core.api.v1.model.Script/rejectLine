{
  "refName" : "rejectLine",
  "refKey" : "98c0fb6e5d506bf5bfa5c2515c25e820",
  "displayName" : "rejectLine",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1520525047931,
    "createUser" : "Admin Innerworkings",
    "updateTs" : 1532003159010,
    "updateUser" : "Admin Innerworkings"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "4e4d4a8a-f7da-422b-8902-530d8dc662b1",
  "script" : "var cup = Packages.org.apache.commons.collections4.CollectionUtils;\r\n\r\nvar logger = org.slf4j.LoggerFactory.getLogger(\"rejectLine:\");\r\n\r\nfunction removeWhiteSpace(value) {\r\n    \r\n    if(value !== null) {\r\n        return new java.lang.String(value).trim();\r\n    } else {\r\n        return value;\r\n    }\r\n}  \r\n\r\nfunction isBlank(value) {\r\n    if(value === null || value === undefined || value === '') {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\n// return a non-null order if found for the given shipment request, otherwise throw exception\r\nfunction fetchOrder(shipmentRequest) {\r\n    var order = shipmentRequestDAO.getOrder(shipmentRequest);\r\n    if (!order) {\r\n        throw new com.eis.core.api.v1.exception.B2BNotFoundException(\r\n            \"Could not find an order for ShipmentRequest with Id: \" + shipmentRequest.getId() + \" and lineUID: \" + lineUID\r\n        );\r\n    }\r\n    return order;\r\n}\r\n\r\n// return a non-null shipment request line and index if found for the given lineUID, otherwise throw exception\r\nfunction fetchShipmentRequestLine(shipmentRequest, lineUID) {\r\n\r\n    var shipmentRequestLines = shipmentRequest.getLineItems();\r\n    var srl;\r\n    var idx = 0;\r\n    if(shipmentRequestLines) {\r\n        for (var i = 0; i < shipmentRequestLines.size(); i++) {\r\n            var line = shipmentRequestLines.get(i);\r\n            if (lineUID.equals(line.getLineUID())\r\n                && (com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.OPEN.equals(line.getStatus())||\r\n                   com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.ACCEPTED.equals(line.getStatus()))) {\r\n                srl = line;\r\n                idx = i + 1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!srl) {\r\n        throw new com.eis.core.api.v1.exception.B2BNotFoundException(\r\n            \"Could not find a ShipmentRequestLine in the OPEN status for ShipmentRequest with Id: \" +\r\n            shipmentRequest.getId() + \" and lineUID: \" + lineUID\r\n        );\r\n    }\r\n\r\n    return {\r\n        shipmentRequestLines: shipmentRequestLines,\r\n        srl: srl,\r\n        idx: idx\r\n    }\r\n}\r\n\r\n// return a non-null sales order line if found for the given lineUID, otherwise throw exception\r\nfunction fetchSalesOrderLine(order, srl, shipmentRequest) {\r\n    var salesOrderLines = order.getLineItems();\r\n    var sol;\r\n    for (var i = 0; i < salesOrderLines.size(); i++) {\r\n        var line = salesOrderLines.get(i);\r\n        if (srl.getLineUID().equals(line.getUid())\r\n            && (com.eis.ssit.api.v1.model.OrderLineStatus.OPEN.equals(line.getStatus()) || com.eis.ssit.api.v1.model.OrderLineStatus.ALLOCATED.equals(line.getStatus()))) {\r\n            sol = line;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if(!sol) {\r\n        throw new com.eis.core.api.v1.exception.B2BNotFoundException(\r\n            \"Could not find a SalesOrderLine in the OPEN status for ShipmentRequest with Id: \" +\r\n            shipmentRequest.getId() + \" and lineUID: \" + lineUID\r\n        );\r\n    }\r\n\r\n    return {\r\n        salesOrderLines: salesOrderLines,\r\n        sol: sol\r\n    }\r\n}\r\n\r\n// do the actual rejection, return true if short shipped\r\nfunction doReject(sol, salesOrderLines, srl, shipmentRequestLines, idx, itemQty, reason, reasonCode) {\r\n\r\n    var resEntries = srl.getReservationEntries();\r\n        \r\n    var shortShip = false;\r\n    if(itemQty < srl.getItemQty()) {\r\n        var lineUID = java.util.UUID.randomUUID().toString();\r\n\r\n        // clone the sales order line, and have the new lines as -A and -B\r\n        var solCopy = new com.eis.ssit.api.v1.model.SalesOrderLine(sol);\r\n        // solCopy.setUid(lineUID);\r\n        sol.setUid(lineUID);\r\n        solCopy.setLineItemNumber(sol.getLineItemNumber() + \"-A\");\r\n        sol.setLineItemNumber(sol.getLineItemNumber() + \"-B\");\r\n        solCopy.setItemQty(sol.getItemQty() - itemQty);\r\n        //solCopy.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.ACCEPTED);\r\n        solCopy.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.OPEN);\r\n        salesOrderLines.add(idx, solCopy);\r\n\r\n        // clone the shipment request line, and have the new lines as -A and -B\r\n        var srlCopy = new com.eis.ssit.api.v1.model.ShipmentRequestLine(srl);\r\n        // srlCopy.setLineUID(lineUID);\r\n        srl.setLineUID(lineUID);\r\n        srlCopy.setPoItemId(srl.getPoItemId() + \"-A\");\r\n        srl.setPoItemId(srl.getPoItemId() + \"-B\");\r\n        srlCopy.setItemQty(srl.getItemQty() - itemQty);\r\n        \r\n        srlCopy.setStatus(com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.ACCEPTED);\r\n        shipmentRequestLines.add(idx, srlCopy);\r\n\r\n        shortShip = true;\r\n    }\r\n    else if(itemQty === srl.getItemQty()) {\r\n        sol.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.REJECTED);\r\n        //sol.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.OPEN);\r\n    \r\n        if (cup.isNotEmpty(resEntries)) {\r\n            var resEntryIt = resEntries.iterator();\r\n            while (resEntryIt.hasNext()) {\r\n                var resEntry = resEntryIt.next();\r\n                if (resEntry) {\r\n                    inventoryPoolEntryDAO.unreserveInventory(resEntry.getInventoryPoolEntryId(), resEntry, userId, order.getId(), null, shipmentRequest.getId());\r\n                    resEntry.setReservationEntryStatus(com.eis.ssit.api.v1.model.ReservationEntryStatus.CANCELLED);\r\n                    reservationEntryService.save(resEntry);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    sol.setItemQty(itemQty);\r\n    sol.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.REJECTED);\r\n    //sol.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.OPEN);\r\n\r\n    srl.setItemQty(itemQty);\r\n    srl.setStatus(com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.REJECTED);\r\n    srl.setRejectionReason(reason);\r\n    srl.setRejectionCode(reasonCode);\r\n\r\n    return shortShip;\r\n}\r\n\r\n// update the header status for both sales order and shipment request\r\nfunction updateHeaderStatus(order, shipmentRequest, shipmentRequestLines, shortShip) {\r\n\r\n    // WARN: Assuming here that for thk there is a single SR for a SO\r\n    // set shipment request status as REJECTED if all of the shipment request lines lines are rejected\r\n    var notEligibleForRejection = false;\r\n    var notEligibleForInvoiced = false;\r\n    for (var i = 0; i < shipmentRequestLines.size(); i++) {\r\n        var line = shipmentRequestLines.get(i);\r\n        if(!com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.REJECTED.equals(line.getStatus())) {\r\n            notEligibleForRejection = true;\r\n        }\r\n        if(!com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.REJECTED.equals(line.getStatus()) &&\r\n            !com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.CLOSED.equals(line.getStatus())) {\r\n            notEligibleForInvoiced = true;\r\n        }\r\n    }\r\n    if(!notEligibleForRejection) {\r\n        shipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.REJECTED);\r\n        //order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.REJECTED);\r\n    }\r\n\r\n    // set shipment request status as INVOICED if all of the shipments under it are INVOICED\r\n    // We might need to do this explicitly since we can have a case where for eg. we\r\n    // have 3 SRLs, 2 of them\r\n    // are accepted and the shipments INVOICED as well. Now, the last SRL say is now completely\r\n    // rejected. Then, we will mark the SR as INVOICED.\r\n    if(!shortShip && !notEligibleForInvoiced) {\r\n        var fields = new java.util.ArrayList();\r\n        fields.add(\"shipmentStatus\");\r\n        var shipments = shipmentService.getList(0, java.lang.Integer.MAX_VALUE, \"shipmentRequestId:\" +\r\n            shipmentRequest.getId(), fields, null);\r\n        if(shipments !== null && !shipments.isEmpty()) {\r\n            if(notEligibleForRejection) {\r\n                shipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.SHIPMENT_CREATED);\r\n            }\r\n            for(var i = 0; i < shipments.size(); i++) {\r\n                var shipment = shipments.get(i);\r\n                if(!com.eis.ssit.api.v1.model.ShipmentStatus.INVOICED.equals(shipment.getShipmentStatus())) {\r\n                    break;\r\n                }\r\n                else if(i == shipments.size() - 1) {\r\n                    shipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.INVOICED);\r\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.INVOICED);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// update the shipment request in the database\r\nfunction updateShipmentRequest(shipmentRequest) {\r\n    shipmentRequestDAO.save(shipmentRequest);\r\n    return shipmentRequest;\r\n}\r\n\r\n// update the sales order in the database\r\nfunction updateOrder(order) {\r\n    order = salesOrderDAO.save(order);\r\n    return order;\r\n}\r\n\r\n// do logging for sales order update\r\nfunction doSalesOrderUpdateLogging(order, sol, userId, reason, reasonCode) {\r\n    var salesOrderReleaseLog = inventoryAllocationLoggerDAO.initSalesOrderReleaseLog(order);\r\n    if (salesOrderReleaseLog !== null) {\r\n        var log = java.lang.String.format(\"User %s rejected product %s with quantity %s \" +\r\n            \"- Reason: \" + \"%s, Reason code: %s\",\r\n            userId, sol.getSystemCatalogProductIdentifier(), sol.getItemQty(),\r\n            reason, reasonCode);\r\n\r\n        inventoryAllocationLoggerDAO.log(log,\r\n            salesOrderReleaseLog,\r\n            com.eis.ssit.api.v1.model.OrderReleaseLogCategory.BUSINESS,\r\n            com.eis.ssit.api.v1.model.OrderLogLevel.INFO);\r\n        inventoryAllocationLoggerDAO.closeLog(salesOrderReleaseLog,\r\n            order.getHeader().getStatus());\r\n    }\r\n}\r\n\r\n// publish an order status report to the OrderUpdate-toTHK mailbox\r\nfunction publishOrderStatusReport(srl, shipmentRequest, itemQty) {\r\n   \r\n    var referenceData = new java.util.ArrayList();\r\n    referenceData.addAll(srl.getReferenceData());\r\n  \r\n \r\n    var orderStatusReport =\r\n        com.eis.ssit.api.v1.util.OrderStatusReportBuilder.newOrderStatusReport(srl).\r\n        withReferenceData(referenceData).\r\n        withId(java.util.UUID.randomUUID().toString()).\r\n        withPurchaseOrderNumber(shipmentRequest.getHeader().getSalesOrderNumber()).\r\n        withDynAttributes(shipmentRequest.getDynAttributes()).\r\n        withRejectedQty(itemQty).\r\n        build();\r\n\r\n    orderStatusReport.setRefName(orderStatusReport.getId());\r\n    orderStatusReport.setDataDomain(\"com.innerworkings\");\r\n    orderStatusReport.setDate(new java.util.Date());\r\n\r\n    var osrMbx = scriptUtils.getMailbox(\"OrderUpdate-toInnerworkings\");\r\n    scriptUtils.createObjectXMLMailboxEntry(\r\n        osrMbx,\r\n        orderStatusReport,\r\n        \"Order Status Report for Order:\" +\r\n        shipmentRequest.getHeader().getSalesOrderNumber() +\r\n        \":Request:\" + shipmentRequest.getHeader().getShipmentRequestNumber() +\r\n        \":Line:\" + srl.getLineUID(),\r\n        \"shipmentrequestline@inneworkings.com\",\r\n        \"orderstatusreport@innerworkings.com\"\r\n    );\r\n\r\n    return orderStatusReport;\r\n}\r\n\r\n// reject a particular shipment request line\r\nfunction rejectLine() {\r\n\r\n    try {\r\n        // fetch the corresponding order\r\n        order = fetchOrder(shipmentRequest);\r\n\r\n        // fetch the shipment request line in the right status\r\n        var shipmentReqLine = fetchShipmentRequestLine(shipmentRequest, lineUID);\r\n        var shipmentRequestLines = shipmentReqLine.shipmentRequestLines;\r\n        var srl = shipmentReqLine.srl;\r\n        var idx = shipmentReqLine.idx;\r\n\r\n        // fetch the sales order line in the right status\r\n        var salesOrdLine = fetchSalesOrderLine(order, srl, shipmentRequest);\r\n        var salesOrderLines = salesOrdLine.salesOrderLines;\r\n        var sol = salesOrdLine.sol;\r\n\r\n        // do the actual rejection\r\n        var shortShip = doReject(sol, salesOrderLines, srl, shipmentRequestLines, idx, itemQty, reason, reasonCode);\r\n\r\n        // update header status for both shipment request and sales order\r\n        updateHeaderStatus(order, shipmentRequest, shipmentRequestLines, shortShip);\r\n\r\n        // save the shipment request\r\n        shipmentRequest = updateShipmentRequest(shipmentRequest);\r\n        // save the sales order\r\n        order = updateOrder(order);\r\n\r\n        // do an update logging for the sales order updated\r\n        doSalesOrderUpdateLogging(order, sol, userId, reason, reasonCode);\r\n\r\n        // publish and order status report to a pre-defined mailbox\r\n        publishOrderStatusReport(srl, shipmentRequest, itemQty);\r\n\r\n    }\r\n    catch(e) {\r\n        taskHelper.notifyAndCreateTask(\r\n            \"RejectLine:ShipmentRequestID:\"+shipmentRequest.getId()+\":UID:\"+lineUID+\":\"+java.lang.System.nanoTime(),\r\n            \"Line Rejection Failure for ShipmentRequestID:\"+shipmentRequest.getId()+\":UID:\"+lineUID,\r\n            e,\r\n            \"Line Rejection Failure\", \"com.innerworkings\",\r\n            \"Line Rejection Failure\", \"line-rejection-failure\", \"Tony Costanzo\");\r\n        logger.error(\"Line Rejection Failure for ShipmentRequestID:\"+shipmentRequest.getId()+\":UID:\"+lineUID, e);\r\n        throw e;\r\n    }\r\n\r\n    return order;\r\n}\r\n\r\nvar order = null;\r\nrejectLine();",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "rejectShipmentRequestLineType",
    "refKey" : "e34a177f5a11b5102710c1024ff71685",
    "displayName" : "rejectShipmentRequestLineType",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "rejectShipmentRequestLineType" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1520525030139,
      "createUser" : "Admin Innerworkings",
      "updateTs" : null,
      "updateUser" : null
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "dc739e5d-96e9-48fc-b91c-6a37c2a1fa71",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "itemQty" : {
          "id" : null,
          "refName" : "itemQty",
          "type" : "Integer",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "itemQty",
          "description" : null
        },
        "lineUID" : {
          "id" : null,
          "refName" : "lineUID",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "lineUID",
          "description" : null
        },
        "reason" : {
          "id" : null,
          "refName" : "reason",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "reason",
          "description" : null
        },
        "reasonCode" : {
          "id" : null,
          "refName" : "reasonCode",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "reasonCode",
          "description" : null
        },
        "shipmentRequest" : {
          "id" : null,
          "refName" : "shipmentRequest",
          "type" : "Object",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "shipmentRequest",
          "description" : null
        },
        "userId" : {
          "id" : null,
          "refName" : "userId",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "userId",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : {
        "order" : {
          "id" : null,
          "refName" : "order",
          "type" : "Object",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "order",
          "description" : null
        }
      }
    },
    "scriptContextObjects" : {
      "inventoryAllocationLoggerDAO" : {
        "type" : "javaBean",
        "name" : "inventoryAllocationLoggerDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "inventoryPoolEntryDAO" : {
        "type" : "javaBean",
        "name" : "inventoryPoolEntryDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "reservationEntryService" : {
        "type" : "serviceBean",
        "name" : "reservationEntryService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "reservationEntryService",
        "parameterName" : null,
        "parameters" : { }
      },
      "salesOrderDAO" : {
        "type" : "daoBean",
        "name" : "salesOrderDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "salesOrderDAO",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestDAO" : {
        "type" : "daoBean",
        "name" : "shipmentRequestDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentRequestDAO",
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentService" : {
        "type" : "serviceBean",
        "name" : "shipmentService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentService",
        "parameterName" : null,
        "parameters" : { }
      },
      "taskHelper" : {
        "type" : "javaBean",
        "name" : "taskHelper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "vendorService" : {
        "type" : "serviceBean",
        "name" : "vendorService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "vendorService",
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.innerworkings" ]
  },
  "functionType" : "rejectShipmentRequestLine",
  "inputs" : { },
  "result" : null,
  "active" : true,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "innerworkingsPolicy",
    "refKey" : "6eca2f751c7092f4f789863252fbd7e1",
    "displayName" : "innerworkingsPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "innerworkingsPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1507818693457,
      "createUser" : "Admin Innerworkings",
      "updateTs" : 1559935221167,
      "updateUser" : "Tony Costanzo"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "3ca01532-b431-4906-a351-25394a7b5546",
    "allowedPackages" : {
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysyncfleetpride" : "com.eis.oms.inventory.sync.fleetpride",
      "comeisomsinventorysyncv2" : "com.eis.oms.inventory.sync.v2",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1integrationmarketplace" : "com.eis.ssit.api.v1.integration.marketplace",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparsers" : "com.eis.ssit.parsers",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersproductskufleetpride" : "com.eis.ssit.parsers.productsku.fleetpride",
      "comeisssitparserssite" : "com.eis.ssit.parsers.site",
      "comeisssitparsersskucrossreference" : "com.eis.ssit.parsers.skucrossreference",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.innerworkings" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "rejectShipmentRequestLineType",
    "refId" : "dc739e5d-96e9-48fc-b91c-6a37c2a1fa71",
    "refKey" : "e34a177f5a11b5102710c1024ff71685",
    "displayName" : "rejectShipmentRequestLineType",
    "dataDomain" : "com.innerworkings",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "innerworkingsPolicy",
    "refId" : "3ca01532-b431-4906-a351-25394a7b5546",
    "refKey" : "6eca2f751c7092f4f789863252fbd7e1",
    "displayName" : "innerworkingsPolicy",
    "dataDomain" : "com.innerworkings",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "admin@innerworkings.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.innerworkings" ]
}