{
  "refName" : "STOLI-userSetup",
  "refKey" : "989d6cfe21b2638dc22639ceca7ad968",
  "displayName" : "STOLI-userSetup",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1518210527487,
    "createUser" : "Admin Innerworkings",
    "updateTs" : 1520544628866,
    "updateUser" : "Admin Innerworkings"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "6238ba70-9077-4042-b06f-6cd36426dafd",
  "script" : "var log = org.slf4j.LoggerFactory.getLogger(\"STOLI-userSetup script:\");\r\nvar csvPackage = Packages.com.opencsv;\r\nvar mapper = new com.fasterxml.jackson.databind.ObjectMapper();\r\n\r\n\r\nfunction removeWhiteSpace(value) {\r\n\r\n    if (value !== null && value !== undefined) {\r\n        return new java.lang.String(value).trim();\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\nfunction strEndsWith(str, suffix) {\r\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n}\r\n\r\n\r\n\r\nfunction isBlank(value) {\r\n    if (value === null || value === undefined || value === '') {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction createStoliSalesRepDataDomainMap(dataDomain, salesRepRefName) {\r\n    var correlation = correlationService.getByRefName(\"SalesRepRefNameToDataDomainMap\");\r\n    \r\n    if(correlation === null || isBlank(correlation.getId())) {\r\n        correlation = new com.eis.core.api.v1.model.Correlation();\r\n        correlation.setType(com.eis.core.api.v1.model.CorrelationType.ManyToMany);\r\n        correlation.setRefName(\"SalesRepRefNameToDataDomainMap\");\r\n        correlation.setDataDomain(dataDomain);\r\n        var key = new java.util.ArrayList();\r\n        key.add(salesRepRefName)\r\n        \r\n        var value = new java.util.ArrayList();\r\n        var domains = new java.util.ArrayList();\r\n        domains.add(dataDomain);\r\n        domains.add(dataDomain+\".stoli.\"+salesRepRefName);\r\n        domains.add(dataDomain+\".stoli\");\r\n        value.add(domains);\r\n        correlation.setKey(key);\r\n        correlation.setValue(value);\r\n        \r\n        correlation = correlationService.save(correlation);\r\n        return domains;\r\n        \r\n    } else {\r\n        var key = correlation.getKey();\r\n        if(key.indexOf(salesRepRefName) === -1) {\r\n            key.add(salesRepRefName)\r\n            var value = correlation.getValue();\r\n            var domains = new java.util.ArrayList();\r\n            domains.add(dataDomain);\r\n            domains.add(dataDomain+\".stoli.\"+salesRepRefName);\r\n            domains.add(dataDomain+\".stoli\");\r\n            value.add(domains);\r\n            correlation.setKey(key);\r\n            correlation.setValue(value);\r\n            correlation = correlationService.save(correlation);\r\n            return domains;\r\n        } else {\r\n            var index = key.indexOf(salesRepRefName);\r\n            return correlation.getValue().get(index);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction createStoliChannelCorrelation(dataDomain, salesRepRefName) {\r\n   \r\n   var salesRepDataDomain = dataDomain+\".stoli.\"+salesRepRefName;\r\n   var correlation = correlationService.getCorrelationByHierarchy(\"SalesOrderChannels\", salesRepDataDomain); \r\n  \r\n   java.lang.System.out.println(\"Correlation Id:\"+correlation.getId());\r\n   if(isBlank(correlation.getId())) {\r\n       log.info(\"Creating SalesOrderChannels for salesRep:\"+salesRepRefName);\r\n       correlation.setId(java.util.UUID.randomUUID().toString());\r\n       correlation.setDataDomain(salesRepDataDomain);\r\n       var channelList = new java.util.ArrayList();\r\n       channelList.add(\"Stoli\");\r\n       correlation.setType(com.eis.core.api.v1.model.CorrelationType.ManyToMany);\r\n       correlation.setRefName(\"SalesOrderChannels\");\r\n       \r\n       correlation.setKey(channelList);\r\n       correlation.setValue(channelList);\r\n       correlation = correlationDAO.save(correlation);\r\n   } else {\r\n      log.info(\"SalesOrderChannels already exist for salesRep:\"+salesRepRefName);  \r\n   }\r\n}\r\n\r\nfunction updateUserDataDomainPolicy(dataDomainPolicyRefName) {\r\n   var salesRepRefName = dataDomainPolicyRefName.substring(0, \r\n   dataDomainPolicyRefName.indexOf(\"-\"));\r\n   \r\n   java.lang.System.out.println(\"SalesRepRefName:\"+salesRepRefName); \r\n   \r\n   var salesRepDataDomain = dataDomain+\".stoli.\"+salesRepRefName;\r\n   var dataDomains = new java.util.ArrayList();\r\n   \r\n   var dataDomainPolicy = dataDomainPolicyService.getByRefName(salesRepRefName+\"-policy\");\r\n   \r\n   if(dataDomainPolicy !== null) {\r\n        dataDomainPolicyService['delete'](dataDomainPolicy.getId()); \r\n   }\r\n   \r\n   dataDomains.add(dataDomain);\r\n   dataDomains.add(salesRepDataDomain);\r\n   dataDomains.add(dataDomain+\".stoli\");\r\n   var createFunctionalDomains = [\"SalesOrder:Create\",\"ShipmentRequest:Create\",\"ShipmentRequest:Ack\", \"ShipmentRequest:Reject\",\"Variant:Create\",\"Script:Execute\",\"Customer:Create\",\"Client:Create\",\"PurchaseOrder:Create\"]; \r\n   \r\n   var listFunctionalDomains = [\"SalesOrder:View\",\"Shipment:List\",\"ShipmentRequest:List\",\"Shipment:View\",\"ShipmentRequest:View\",\"SalesOrder:List\",\"Customer:List\", \"Customer:View\",\"Client:List\",\"Client:View\",\"Correlation:List\",\"Correleation:View\",\"PurchaseOrder:View\"]; \r\n   \r\n   var domainOnlyFunctionalDomains = [\"Correlation:Create\",\r\n   \"Correlation:Update\"];\r\n   \r\n   dataDomainPolicy = com.eis.core.api.v1.model.DataDomainPolicy();\r\n   for(var x = 0; x < createFunctionalDomains.length; x++) {\r\n       var fd = createFunctionalDomains[x];\r\n       var domain = fd.split(\":\")[0];\r\n       var action = fd.split(\":\")[1];\r\n       var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\r\n       dataDomainPolicyEntry.getDataDomains().addAll(dataDomains);\r\n       dataDomainPolicyEntry.setFunctionalActionString(action);\r\n       dataDomainPolicyEntry.setFunctionalDomainString(domain);\r\n       dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\r\n   }\r\n   \r\n   for(var x = 0; x < domainOnlyFunctionalDomains.length; x++) {\r\n       var fd = domainOnlyFunctionalDomains[x];\r\n       var domain = fd.split(\":\")[0];\r\n       var action = fd.split(\":\")[1];\r\n       var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\r\n       dataDomainPolicyEntry.getDataDomains().add(salesRepDataDomain);\r\n       dataDomainPolicyEntry.setFunctionalActionString(action);\r\n       dataDomainPolicyEntry.setFunctionalDomainString(domain);\r\n       dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\r\n   }\r\n   \r\n   \r\n   for(var x = 0; x < listFunctionalDomains.length; x++) {\r\n       var fd = listFunctionalDomains[x];\r\n       var domain = fd.split(\":\")[0];\r\n       var action = fd.split(\":\")[1];\r\n       var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\r\n       dataDomainPolicyEntry.getDataDomains().add(salesRepDataDomain);\r\n       dataDomainPolicyEntry.setFunctionalActionString(action);\r\n       dataDomainPolicyEntry.setFunctionalDomainString(domain);\r\n       dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\r\n   }\r\n  \r\n   \r\n   dataDomainPolicy.setRefName(salesRepRefName+\"-policy\")\r\n   dataDomainPolicy = dataDomainPolicyService.save(dataDomainPolicy);\r\n   return dataDomainPolicy;\r\n   \r\n    \r\n}\r\n\r\n\r\nfunction createUserDataDomainPolicy(salesRepRefName) {\r\n   var salesRepDataDomain = dataDomain+\".stoli.\"+salesRepRefName;\r\n   var dataDomains = new java.util.ArrayList();\r\n   \r\n   var dataDomainPolicy = dataDomainPolicyService.getByRefName(salesRepRefName+\"-policy\");\r\n   \r\n   if(dataDomainPolicy !== null) {\r\n        dataDomainPolicyService['delete'](dataDomainPolicy.getId()); \r\n   }\r\n   \r\n   dataDomains.add(dataDomain);\r\n   dataDomains.add(salesRepDataDomain);\r\n   dataDomains.add(dataDomain+\".stoli\");\r\n   var createFunctionalDomains = [\"SalesOrder:Create\",\"ShipmentRequest:Create\",\"ShipmentRequest:Ack\", \"ShipmentRequest:Reject\",\"Variant:Create\",\"Script:Execute\",\"Customer:Create\",\"Client:Create\",\"PurchaseOrder:Create\"]; \r\n   \r\n   var listFunctionalDomains = [\"SalesOrder:View\",\"Shipment:List\",\"ShipmentRequest:List\",\"Shipment:View\",\"ShipmentRequest:View\",\"SalesOrder:List\",\"Customer:List\", \"Customer:View\",\"Client:List\",\"Client:View\",\"Correlation:List\",\"Correleation:View\",\"PurchaseOrder:View\"]; \r\n   \r\n   var domainOnlyFunctionalDomains = [\"Correlation:Create\",\r\n   \"Correlation:Update\"];\r\n   \r\n   dataDomainPolicy = com.eis.core.api.v1.model.DataDomainPolicy();\r\n   for(var x = 0; x < createFunctionalDomains.length; x++) {\r\n       var fd = createFunctionalDomains[x];\r\n       var domain = fd.split(\":\")[0];\r\n       var action = fd.split(\":\")[1];\r\n       var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\r\n       dataDomainPolicyEntry.getDataDomains().addAll(dataDomains);\r\n       dataDomainPolicyEntry.setFunctionalActionString(action);\r\n       dataDomainPolicyEntry.setFunctionalDomainString(domain);\r\n       dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\r\n   }\r\n   \r\n   for(var x = 0; x < domainOnlyFunctionalDomains.length; x++) {\r\n       var fd = domainOnlyFunctionalDomains[x];\r\n       var domain = fd.split(\":\")[0];\r\n       var action = fd.split(\":\")[1];\r\n       var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\r\n       dataDomainPolicyEntry.getDataDomains().add(salesRepDataDomain);\r\n       dataDomainPolicyEntry.setFunctionalActionString(action);\r\n       dataDomainPolicyEntry.setFunctionalDomainString(domain);\r\n       dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\r\n   }\r\n   \r\n   \r\n   for(var x = 0; x < listFunctionalDomains.length; x++) {\r\n       var fd = listFunctionalDomains[x];\r\n       var domain = fd.split(\":\")[0];\r\n       var action = fd.split(\":\")[1];\r\n       var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\r\n       dataDomainPolicyEntry.getDataDomains().add(salesRepDataDomain);\r\n       dataDomainPolicyEntry.setFunctionalActionString(action);\r\n       dataDomainPolicyEntry.setFunctionalDomainString(domain);\r\n       dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\r\n   }\r\n   \r\n   \r\n   dataDomainPolicy.setRefName(salesRepRefName+\"-policy\")\r\n   dataDomainPolicy = dataDomainPolicyService.save(dataDomainPolicy);\r\n   return dataDomainPolicy;\r\n    \r\n}\r\n\r\n\r\n\r\nfunction createCapablityPermission(capability, domain) {\r\n    var capabilityPermission = new com.eis.core.api.v1.model.CapabilityPermission();\r\n    capabilityPermission.setCapability(capability);\r\n    capabilityPermission.setPermittedDataDomain(domain);\r\n    capabilityPermission.setRefName(capability.getRefName() + \"-\" + domain);\r\n    return capabilityPermission;\r\n}\r\n\r\n\r\nfunction createStoliSalesRepRole(dataDomain, salesRepRefName) {\r\n\r\n    var capabilityPermissions = new java.util.ArrayList();\r\n    var refName = \"stoliSalesRepAccess-\"+salesRepRefName;\r\n    var role = roleDAO.getByRefName(refName, dataDomain);\r\n    if (role === null) {\r\n        role = com.eis.core.api.v1.model.Role();\r\n        role.setRefName(\"stoliSalesRepAccess-\"+salesRepRefName);\r\n        role.setDisplayName(\"stoliSalesRepAccess-\"+salesRepRefName);\r\n        role.setDataDomain(dataDomain);\r\n        role.setId(java.util.UUID.randomUUID().toString());\r\n        role.setRoleType(com.eis.core.api.v1.model.RoleType.USER_ROLE);\r\n    }\r\n\r\n\r\n    var stoliSalesRepCapablity = capabilityService.getList(0, 1, \"refName:Stoli-ClientSetUp\", null, null).get(0);\r\n    \r\n    var stoliCapablity = capabilityService.getList(0, 1, \"refName:STOLI-StoliDomainAccess\", null, null).get(0);\r\n    \r\n    var innerworkingsAccesCapablity = capabilityService.getList(0, 1, \"refName:Stoli-InnerworkingsAccess\", null, null).get(0);\r\n    \r\n    var viewSystemObjectsCapability = capabilityService.getList(0, 1, \"refName:ViewSystemObjs\",null, null).get(0);\r\n    \r\n    role.getCapabilityPermissions().clear();\r\n    \r\n    \r\n    role.getCapabilityPermissions().add(createCapablityPermission(stoliSalesRepCapablity, \r\n        dataDomain+\".stoli.\"+salesRepRefName));\r\n        \r\n    role.getCapabilityPermissions().add(createCapablityPermission(stoliCapablity, \r\n        dataDomain+\".stoli\"));\r\n        \r\n    role.getCapabilityPermissions().add(createCapablityPermission(viewSystemObjectsCapability, \"app.cantata\"));\r\n    \r\n    role.getCapabilityPermissions().add(createCapablityPermission(innerworkingsAccesCapablity, \r\n        dataDomain));\r\n    \r\n    role = roleDAO.save(role);\r\n    return role;\r\n}\r\n\r\n\r\nfunction createUserProfile(salesRepRefName, userName, password, firstName, lastName, email, account, userGroup, dataDomain) {\r\n\r\n\r\n    var refName = userName;\r\n    var testProfile = userProfileDAO.getByRefName(refName,dataDomain);\r\n    if (testProfile === null) {\r\n        testProfile = new com.eis.core.api.v1.model.UserProfile();\r\n        var cred = new com.eis.core.api.v1.model.UserIdPasswordCredential();\r\n        cred.setUserId(refName);\r\n        cred.setPassword(password);\r\n\r\n        testProfile.setRefName(refName);\r\n        testProfile.setDisplayName(refName);\r\n       \r\n        testProfile.setDataDomain(dataDomain);\r\n        testProfile.setFirstName(firstName);\r\n        testProfile.setLastName(lastName);\r\n        testProfile.setEmailAddress(email);\r\n        testProfile.setUserIdPasswordToken(cred);\r\n        testProfile.setId(java.util.UUID.randomUUID().toString());\r\n\r\n        testProfile.setOwningAccountId(account.getId());\r\n        testProfile.getUserGroups().add(userGroup);\r\n        \r\n        var dataDomainPolicy = createUserDataDomainPolicy(salesRepRefName);\r\n        testProfile.setDataDomainPolicy(dataDomainPolicy);\r\n        testProfile = userProfileDAO.save(testProfile);\r\n    } else {\r\n        var dataDomainPolicy = createUserDataDomainPolicy(salesRepRefName);\r\n        testProfile.setDataDomainPolicy(dataDomainPolicy);\r\n        testProfile = userProfileDAO.save(testProfile);\r\n        \r\n    }\r\n    \r\n    return testProfile;\r\n\r\n}\r\n\r\nfunction createStoliSalesRep(companyName,salesRepNumber,firstName,lastName,phone1,email,address1, address2,address3,city,state,postalCode,country, dataDomain, customerProfile) {\r\n    \r\n    var salesRepRefName = salesRepNumber;\r\n    var salesRepDataDomain = dataDomain+\".stoli.\"+salesRepRefName; \r\n    \r\n    var salesRep = customerDAO.getByRefName(salesRepRefName, salesRepDataDomain);        \r\n    if(salesRep === null) {\r\n        salesRep = new com.eis.ssit.api.v1.model.Customer();\r\n        var name = new com.eis.core.api.v1.model.HumanName();\r\n        name.setFirstName(firstName);\r\n        name.setLastName(lastName);\r\n        salesRep.setCustomerNumber(salesRepNumber);\r\n        salesRep.setName(name);\r\n        salesRep.setRefName(salesRepNumber);\r\n        salesRep.setCompanyName(companyName);\r\n        if(!isBlank(phone1)) {\r\n            var phone = new com.eis.core.api.v1.model.Phone();\r\n            phone.setNumber(phone1);\r\n            salesRep.setPrimaryPhone(phone);\r\n        }\r\n        \r\n        if(!isBlank(email)) {\r\n            var primaryEmail = new com.eis.core.api.v1.model.Email();\r\n            primaryEmail.setAddress(email);\r\n            salesRep.setPrimaryEmail(primaryEmail);\r\n            \r\n        }\r\n        \r\n        var address = new com.eis.core.api.v1.model.MailingAddress();\r\n        address.setAddress1(address1);\r\n        if(!isBlank(address2)) {\r\n            address.setAddress2(address2);\r\n        }\r\n        \r\n        if(!isBlank(address3)) {\r\n            address.setAddress3(address3);\r\n        }\r\n        \r\n        address.setCity(city);\r\n        address.setState(state);\r\n        address.setZip5(postalCode);\r\n        address.setCountry(country);\r\n        salesRep.getAddresses().add(address);\r\n        \r\n        var contactInfo = new com.eis.core.api.v1.model.ContactInfo();\r\n        contactInfo.setFirstName(firstName);\r\n        contactInfo.setLastName(lastName);\r\n        contactInfo.setPrimaryPhone(phone1);\r\n        contactInfo.setPrimaryEmail(email);\r\n        contactInfo.setAddress(address);\r\n        salesRep.getContacts().add(contactInfo);\r\n        \r\n    \r\n        salesRep.getDataDomains().add(dataDomain);\r\n        salesRep.getDataDomains().add(dataDomain+\".stoli.\"+salesRepRefName);\r\n        salesRep.getDataDomains().add(dataDomain+\".stoli\");\r\n        salesRep.setId(java.util.UUID.randomUUID().toString());\r\n        salesRep.getTags().add(\"Stoli\");\r\n        salesRep.setState(com.eis.ssit.api.v1.model.CustomerState.ACTIVE);\r\n        salesRep.setCustomerProfile(customerProfile);\r\n        salesRep = customerDAO.save(salesRep);        \r\n        \r\n        return salesRep;\r\n        \r\n    } else {\r\n        return salesRep;\r\n    }   \r\n        \r\n}\r\n\r\n\r\nfunction createStoliSalesUserGroup(groupName, role, dataDomain) {\r\n    var refName = groupName;\r\n    var userGroup = userGroupDAO.getByRefName(refName,dataDomain);\r\n    if (userGroup === null) {\r\n        userGroup = com.eis.core.api.v1.model.UserGroup();\r\n        userGroup.setRefName(refName);\r\n        userGroup.setDisplayName(refName);\r\n        userGroup.getRoles().add(role);\r\n        userGroup.setDataDomain(dataDomain);\r\n        userGroup.setId(java.util.UUID.randomUUID().toString());\r\n        userGroup = userGroupDAO.save(userGroup);\r\n    }\r\n    \r\n    return userGroup;\r\n}\r\n\r\n\r\nfunction getStoliDefaultCustomerProfile(salesRepRefName, dataDomain,channelId) {\r\n    var refName = salesRepRefName;\r\n    var customerProfile = customerProfileDAO.getByRefName(refName,dataDomain);\r\n    if (customerProfile === null) {\r\n        customerProfile = com.eis.ssit.api.v1.model.CustomerProfile();\r\n        customerProfile.setRefName(\"defaultcustomerprofile\");\r\n        customerProfile.setDisplayName(\"defaultcustomerprofile\");\r\n        customerProfile.setDefaultChannelId(channelId);\r\n        customerProfile.setDataDomain(dataDomain+\".stoli.\"+salesRepRefName);\r\n        customerProfile.setId(java.util.UUID.randomUUID().toString());\r\n        customerProfile = customerProfileDAO.save(customerProfile);\r\n    }\r\n    \r\n    return customerProfile;\r\n}\r\n\r\n\r\n\r\n\r\nfunction getBooleanValue(value) {\r\n    if(isBlank(value)) {\r\n        return false;\r\n    } else {\r\n        if(value === 'Y' || value === 'y') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEmailDomain(dataDomain) {\r\n    var emailDomain = \"app.cantata\";\r\n\r\n    if (dataDomain) {\r\n        var  splitDomain = dataDomain.split(\".\").reverse();\r\n        emailDomain = splitDomain.join(\".\");\r\n    }\r\n    \r\n    return emailDomain;\r\n}\r\n\r\nfunction createStoliSalesRepUser(fields) {\r\n    var newOrganization = false;\r\n\r\n    var companyName = removeWhiteSpace(fields[0]);\r\n    var salesRepNumber = removeWhiteSpace(fields[1]);\r\n    var firstName = removeWhiteSpace(fields[2]);\r\n    var lastName = removeWhiteSpace(fields[3]);\r\n    var phone1 = removeWhiteSpace(fields[4]);\r\n    var email = removeWhiteSpace(fields[5]);\r\n    var address1 = removeWhiteSpace(fields[6]);\r\n    var address2 = removeWhiteSpace(fields[7]);\r\n    var address3 = removeWhiteSpace(fields[8]);\r\n    var city = removeWhiteSpace(fields[9]);\r\n    var state = removeWhiteSpace(fields[10]);\r\n    var postalCode = removeWhiteSpace(fields[11]);\r\n    var country = removeWhiteSpace(fields[12]);\r\n    var userName = removeWhiteSpace(fields[13]);\r\n    var password = removeWhiteSpace(fields[14]);\r\n    \r\n    var account = accountService.getByRefName(\"SaddleCreek-Account\");\r\n    var channel = channelService.getByRefName(\"Stoli\");\r\n    var customerProfile  = getStoliDefaultCustomerProfile(salesRepNumber, dataDomain,channel.getId());\r\n    \r\n    \r\n    \r\n    var salesRep = createStoliSalesRep(companyName,salesRepNumber,firstName,lastName,phone1,email,address1, address2,address3,city,state,postalCode,country, dataDomain,customerProfile);\r\n        \r\n    createStoliSalesRepDataDomainMap(dataDomain, salesRep.getRefName());\r\n    var role = createStoliSalesRepRole(dataDomain, salesRep.getRefName());\r\n    var userGroup = createStoliSalesUserGroup(salesRep.getRefName() + \"-group\",\r\n        role, dataDomain);\r\n    createUserProfile(salesRep.getRefName(),userName, password, firstName, lastName, email,account, userGroup, dataDomain,account);\r\n      \r\n    createStoliChannelCorrelation(dataDomain, salesRep.getRefName());\r\n\r\n    multiTenantRealm.invalidateEntireCache();\r\n\r\n}\r\n\r\nfunction updateExistingUsers() {\r\n    var dataDomains = new java.util.ArrayList();\r\n    dataDomains.add(\"com.innerworkings\");\r\n    var userProfiles = userProfileDAO.getList(0,100, \"emailAddress:%stoli.com%\", null, null, \r\n        dataDomains);\r\n    java.lang.System.out.println(\"User Profile Count:\"+userProfiles);    \r\n    for(var x = 0; x < userProfiles.size(); x++) {\r\n        var userProfile = userProfiles.get(x);\r\n        var dataDomainPolicy = userProfile.getDataDomainPolicy();\r\n        if(dataDomainPolicy !== null) {\r\n            dataDomainPolicy = updateUserDataDomainPolicy(dataDomainPolicy.getRefName());\r\n            \r\n            userProfile.setDataDomainPolicy(dataDomainPolicy);\r\n            userProfile = userProfileDAO.save(userProfile);\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n\r\nvar dataDomain = \"com.innerworkings\";\r\n\r\nvar br = new java.io.BufferedReader(new java.io.InputStreamReader(org.apache.commons.io.IOUtils.toInputStream(body)));\r\nvar csvReader = new csvPackage.CSVReader(br);   \r\nvar fields = csvReader.readNext();\r\nwhile (fields !== null) {\r\n    fields = csvReader.readNext();\r\n    if (fields !== null) {\r\n\r\n        createStoliSalesRepUser(fields);\r\n        \r\n    }\r\n}\r\n\r\ncsvReader.close();\r\n/*\r\nupdateExistingUsers();\r\n*/",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "stoliUserSetup",
    "refKey" : "206b62b994bfd4b70e5e652d11751995",
    "displayName" : "stoliUserSetup",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "stoliUserSetup" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1518210436436,
      "createUser" : "Admin Innerworkings",
      "updateTs" : 1520544514251,
      "updateUser" : "Admin Innerworkings"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "2b98d3ce-f392-49d2-b564-38e4edd63234",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "body" : {
          "id" : null,
          "refName" : "body",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "body",
          "description" : null
        },
        "header_CamelFileName" : {
          "id" : null,
          "refName" : "header_CamelFileName",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_CamelFileName",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : { }
    },
    "scriptContextObjects" : {
      "accountDAO" : {
        "type" : "javaBean",
        "name" : "accountDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "accountService" : {
        "type" : "serviceBean",
        "name" : "accountService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "accountService",
        "parameterName" : null,
        "parameters" : { }
      },
      "body" : {
        "type" : "scriptInputVariable",
        "name" : "body",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "body",
        "parameters" : { }
      },
      "capabilityService" : {
        "type" : "serviceBean",
        "name" : "capabilityService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "capabilityService",
        "parameterName" : null,
        "parameters" : { }
      },
      "catalogDAO" : {
        "type" : "javaBean",
        "name" : "catalogDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "channelDAO" : {
        "type" : "javaBean",
        "name" : "channelDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "channelService" : {
        "type" : "serviceBean",
        "name" : "channelService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "channelService",
        "parameterName" : null,
        "parameters" : { }
      },
      "correlationDAO" : {
        "type" : "javaBean",
        "name" : "correlationDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "correlationService" : {
        "type" : "serviceBean",
        "name" : "correlationService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "correlationService",
        "parameterName" : null,
        "parameters" : { }
      },
      "customerDAO" : {
        "type" : "daoBean",
        "name" : "customerDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "customerDAO",
        "parameterName" : null,
        "parameters" : { }
      },
      "customerProfileDAO" : {
        "type" : "javaBean",
        "name" : "customerProfileDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "customerProfileService" : {
        "type" : "serviceBean",
        "name" : "customerProfileService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "customerProfileService",
        "parameterName" : null,
        "parameters" : { }
      },
      "customerService" : {
        "type" : "serviceBean",
        "name" : "customerService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "customerService",
        "parameterName" : null,
        "parameters" : { }
      },
      "dataDomainPolicyService" : {
        "type" : "serviceBean",
        "name" : "dataDomainPolicyService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "dataDomainPolicyService",
        "parameterName" : null,
        "parameters" : { }
      },
      "fileSystemEntryDAO" : {
        "type" : "javaBean",
        "name" : "fileSystemEntryDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "header_CamelFileName" : {
        "type" : "scriptInputVariable",
        "name" : "header_CamelFileName",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_CamelFileName",
        "parameters" : { }
      },
      "inventoryPoolDAO" : {
        "type" : "javaBean",
        "name" : "inventoryPoolDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "mailboxDAO" : {
        "type" : "javaBean",
        "name" : "mailboxDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "multiTenantRealm" : {
        "type" : "javaBean",
        "name" : "multiTenantRealm",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "registrationRequestDAO" : {
        "type" : "javaBean",
        "name" : "registrationRequestDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "registrationRequestService" : {
        "type" : "serviceBean",
        "name" : "registrationRequestService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "registrationRequestService",
        "parameterName" : null,
        "parameters" : { }
      },
      "reportLayoutDefinitionDAO" : {
        "type" : "javaBean",
        "name" : "reportLayoutDefinitionDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "roleDAO" : {
        "type" : "javaBean",
        "name" : "roleDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptDAO" : {
        "type" : "javaBean",
        "name" : "scriptDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptSecurityPolicyDAO" : {
        "type" : "javaBean",
        "name" : "scriptSecurityPolicyDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptTypeDAO" : {
        "type" : "javaBean",
        "name" : "scriptTypeDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "siteDAO" : {
        "type" : "javaBean",
        "name" : "siteDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "siteService" : {
        "type" : "serviceBean",
        "name" : "siteService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "siteService",
        "parameterName" : null,
        "parameters" : { }
      },
      "taskHelper" : {
        "type" : "javaBean",
        "name" : "taskHelper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "userGroupDAO" : {
        "type" : "javaBean",
        "name" : "userGroupDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "userProfileDAO" : {
        "type" : "javaBean",
        "name" : "userProfileDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.innerworkings" ]
  },
  "functionType" : "utility",
  "inputs" : { },
  "result" : null,
  "active" : false,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "innerworkingsPolicy",
    "refKey" : "6eca2f751c7092f4f789863252fbd7e1",
    "displayName" : "innerworkingsPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "innerworkingsPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1507818693457,
      "createUser" : "Admin Innerworkings",
      "updateTs" : 1559935221167,
      "updateUser" : "Tony Costanzo"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "3ca01532-b431-4906-a351-25394a7b5546",
    "allowedPackages" : {
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysyncfleetpride" : "com.eis.oms.inventory.sync.fleetpride",
      "comeisomsinventorysyncv2" : "com.eis.oms.inventory.sync.v2",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1integrationmarketplace" : "com.eis.ssit.api.v1.integration.marketplace",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparsers" : "com.eis.ssit.parsers",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersproductskufleetpride" : "com.eis.ssit.parsers.productsku.fleetpride",
      "comeisssitparserssite" : "com.eis.ssit.parsers.site",
      "comeisssitparsersskucrossreference" : "com.eis.ssit.parsers.skucrossreference",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.innerworkings" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "stoliUserSetup",
    "refId" : "2b98d3ce-f392-49d2-b564-38e4edd63234",
    "refKey" : "206b62b994bfd4b70e5e652d11751995",
    "displayName" : "stoliUserSetup",
    "dataDomain" : "com.innerworkings",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "innerworkingsPolicy",
    "refId" : "3ca01532-b431-4906-a351-25394a7b5546",
    "refKey" : "6eca2f751c7092f4f789863252fbd7e1",
    "displayName" : "innerworkingsPolicy",
    "dataDomain" : "com.innerworkings",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "admin@innerworkings.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.innerworkings" ]
}