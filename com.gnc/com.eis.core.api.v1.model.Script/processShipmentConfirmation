{
  "refName" : "processShipmentConfirmation",
  "refKey" : "dd93c249b10e819694f79f1cefc7c7b3",
  "displayName" : "processShipmentConfirmation",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1533890892796,
    "createUser" : "Lakshmi Ashok Kumar",
    "updateTs" : 1548246869363,
    "updateUser" : "GNC VDP"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "33919d61-3a51-4fac-8beb-32fd673e3490",
  "script" : "var mapper = new com.eis.json.EnvisionJacksonJaxbXMLMapper();\r\nmapper.enable(com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT);\r\nmapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT);\r\nvar orderLockMap = hzclient.getMap(\"reservationLockMap\");\r\n\r\nvar LOG = org.slf4j.LoggerFactory.getLogger(\"processShipmentConfirmation:\");\r\n\r\nfunction isBlank(value) {\r\n    if (value === null || value === undefined || value === '') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction buildErrorList(message) {\r\n    var errorList = new java.util.ArrayList();\r\n    errorList.add(message);\r\n    return errorList;\r\n}\r\n\r\nfunction createTaskAndNotification(errorName, description, taskQueue, vendor) {\r\n\r\n    var dataDomains = new java.util.ArrayList();\r\n    if(shipmentRequest == null)\r\n    {\r\n     \tdataDomains.add(\"com.gnc\");\r\n    }\r\n    else\r\n    {\r\n    \tdataDomains.addAll(shipmentRequest.getDataDomains());\r\n    }\r\n\r\n    var task = new com.eis.core.api.v1.model.Task();\r\n    task.setId(java.lang.String.valueOf(java.util.UUID.randomUUID()));\r\n    task.setDisplayName(errorName);\r\n    task.setStatus(\"Assigned\");\r\n    task.setRefName(errorName + \"-\" + java.lang.System.nanoTime());\r\n    description = description + \"\\n\\n\\n\";\r\n    for (var x = 0; x < tags.size(); x++) {\r\n        description = description + tags.get(x) + \"\\n\";\r\n    }\r\n    task.setDescription(description);\r\n    task.getDataDomains().addAll(dataDomains);\r\n\r\n    task.setAssignmentDate(new Date());\r\n    var dueDate = java.util.Calendar.getInstance();\r\n    dueDate.add(java.util.Calendar.DATE, 3);\r\n    task.setDueDate(dueDate.getTime());\r\n    task.setDateCreated(new Date());\r\n    task.setLabel(errorName);\r\n    task.setOwnerName(\"GNC VDP\");\r\n    task.setTaskQueueRefName(taskQueue);\r\n    task.getTags().addAll(tags);\r\n    taskDAO.save(task);\r\n}\r\n\r\n\r\nfunction getVendor(vendorNumber, shipment) {\r\n    var vendors = vendorService.getList(0, 1, \"dynAttributes.vendorNumber:\" + vendorNumber, null, null);\r\n    var vendor = null;\r\n    if(!isBlank(vendorNumber)) {\r\n        if (vendors === null || vendors.size() === 0) {\r\n\t\t\t\r\n            var message = \"shipment-vendor-not-found|Enspire Commerce could not process ASN# \" + shipment.getShipmentNumber() + \", from vendor: \" + vendorNumber + \". The vendor number was not found in Enspire's system.\";\r\n\t\t\t//handleError(buildErrorList(message), shipment, vendorNumber, null, true);           \r\n            throw new com.eis.core.api.v1.exception.B2BNotFoundException(message);\r\n        } else {\r\n            vendor = vendors.get(0);\r\n            tags.add(\"vendorName-\" + vendor.getDisplayName());\r\n        }\r\n    } else {\r\n         var message = \"shipment-vendor-not-found|Enspire Commerce could not process Shipment, \" + shipment.getShipmentNumber() + \". No vendor number was provided in the Shipment.\";       \r\n         //handleError(buildErrorList(message), shipment, vendorNumber, null, true);     \r\n         throw new com.eis.core.api.v1.exception.B2BNotFoundException(message);  \r\n    }\r\n    return vendor;\r\n}\r\n\r\nfunction getMerchant(refName, shipment, vendorNumber) {\r\n    var merchant = organizationService.getByRefName(refName);\r\n    if (merchant === null) {\r\n        var message = \"shipment-merchant-not-found|Enspire Commerce could not process Shipment, \" + shipment.getShipmentNumber() + \", for merchant: \" + refName + \". No merchange was found with this refName.\";    \r\n        throw new java.lang.IllegalStateException(message); \r\n        //alertAndNotifyOfError(buildErrorList(message), null, shipment.getShipmentNumber(), shipment.getOrderNumber(), vendorNumber);\r\n    } else {\r\n        return merchant;\r\n    }\r\n}\r\n\r\n\r\nfunction findShipmentRequestForShipment(vendorNumber, orderNumber, shipment, vendor) {\r\n    var shipmentRequest = null;\r\n    var vendor = getVendor(vendorNumber, shipment);\r\n    java.lang.System.out.println(\"Vendor is:\" + vendor.getRefName());\r\n    var shipmentRequests = shipmentRequestService.getList(0, 1, \"shipmentRequestHeader.fromOrganization.refName:\" + vendor.getRefName() + \"&&shipmentRequestHeader.salesOrderNumber:\" + orderNumber, null, null);\r\n    if (shipmentRequests === null || shipmentRequests.size() === 0) { \r\n\t\tif (LOG.isInfoEnabled())\r\n        {\r\n        \tLOG.info(\"No shipmentRequests found for criteria:shipmentRequestHeader.fromOrganization.refName:\" + vendor.getRefName() + \"&&shipmentRequestHeader.salesOrderNumber:\" + orderNumber);\r\n        }\r\n        var message = \"shipment-request-not-found|Enspire Commerce could not process Shipment, \" + shipment.getShipmentNumber() + \", from vendor: \" + vendor.getDisplayName() + \". A Shipment Request in Enspire Commerce was not created for Order:\"+orderNumber+\". Please ensure a Order was sent and a Fulfillment Request exists in Enspire Commerce for this order.\";\r\n\t\t//handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);\r\n\t\tthrow new  com.eis.core.api.v1.exception.B2BNotFoundException(message);      \r\n        \r\n    } else {\r\n        shipmentRequest = shipmentRequests.get(0);\r\n        tags.add(\"shipmentRequestNumber-\" + shipmentRequest.getHeader().getShipmentRequestNumber());\r\n    }\r\n    return shipmentRequest;\r\n}\r\n\r\nfunction hasShipmentBeenReceived(vendor, shipment, vendorNumber) {\r\n\r\n    var alreadyReceived = false;\r\n    var shipments = shipmentService.getList(0, 1, \"fromOrganization.refName:\" + vendor.getRefName() + \"&&shipmentNumber:\" + shipment.getShipmentNumber(), null, null);\r\n    if (shipments.size() > 0) {\r\n        alreadyReceived = true;\r\n    \r\n\t\tvar message = \"shipment-already-received|Enspire could not process ASN# \" + shipment.getShipmentNumber() + \" from vendor# \" + shipment.getSenderContactInfo().getNameId() + \" as an ASN with this number has already been received\";\r\n\t\t//handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);   \r\n\t\tthrow new java.lang.IllegalStateException(message);  \r\n    }\r\n    return alreadyReceived;\r\n}\r\n\r\nfunction isShipmentValid(vendor, shipment, vendorNumber) {\r\n    var validShipment = true;\r\n    var errorList = new java.util.ArrayList();\r\n    if (isBlank(shipment.getMasterTrackingNumber())) {\r\n        validShipment = false;\r\n        var message = \"shipment-missing-data|Enspire Commerce could not process Shipment, \" + shipment.getShipmentNumber() + \", from vendor: \" + vendor.getDisplayName() + \". A shipment for Distribution Order \" + shipment.getOrderNumber() + \" does not have a tracking number\";\r\n        errorList.add(message);\r\n    }\r\n\r\n    if (!validShipment) {\r\n        //handleError(errorList, shipment, vendorNumber, vendor, true);\r\n        throw new java.lang.IllegalStateException(message);  \r\n    }\r\n    return validShipment;\r\n}\r\n\r\n\r\nfunction alertAndNotifyOfError(errorList, vendor, shipmentNumber, orderNumber, vendorNumber, taskQueue) {\r\n    if (LOG.isInfoEnabled()) {\r\n        LOG.info(\"alertAndNotifyOfError :\" + errorList);\r\n    }\r\n    var primaryContactEmail = null;\r\n    var vendorName = \"NA\";\r\n    if (vendorNumber !== null) {\r\n        vendorName = vendorNumber;\r\n    }\r\n\r\n    if (vendor !== null) {\r\n        primaryContactEmail = getVendorPrimaryContactEmail(vendor);\r\n        vendorName = vendor.getDisplayName();\r\n        if (vendorNumber !== null) {\r\n            vendorName = vendorName + \"-\" + vendorNumber;\r\n        }\r\n    }\r\n\r\n    if (isBlank(vendorNumber)) {\r\n        vendorNumber = \"NA\";\r\n    }\r\n\r\n    if (primaryContactEmail === null) {\r\n       \r\n        primaryContactEmail = \"dropshipvendor@gnc.com\";\r\n\r\n    } \r\n\r\n    var message = errorList.get(0);\r\n    var taskQueueAndMessage = message.split('|');\r\n\r\n    if (isBlank(taskQueue)) {\r\n        if (taskQueueAndMessage.length > 1) {\r\n            taskQueue = taskQueueAndMessage[0];\r\n        } else {\r\n            taskQueue = 'asn-processing-error';\r\n        }\r\n    }\r\n    var errorMessage = '';\r\n    if (taskQueueAndMessage.length > 1) {\r\n        errorMessage = taskQueueAndMessage[1];\r\n    } else {\r\n        errorMessage = taskQueueAndMessage[0];\r\n    }\r\n\r\n    var newErrorList = new java.util.ArrayList();\r\n    newErrorList.add(errorMessage);\r\n\r\n    var subject = \"GNC Dropship - Shipment Error - Vendor: \" + vendorName + \" - Shipment Id: \" + shipmentNumber + \" - Order Number \" + orderNumber;\r\n\r\n\tif(taskQueue !== 'asn-processing-error')\r\n\t{\r\n\t\tvar velocityContext = new org.apache.velocity.VelocityContext();\r\n\r\n\t\tvelocityContext.put(\"vendorName\", vendorName);\r\n\t\tvelocityContext.put(\"errorList\", errorList);\r\n\t\tvelocityContext.put(\"description\", subject);\r\n\r\n\t\tvar body = scriptUtils.buildMessageFromVelocityTemplate(\"inbound/templates/shipmentConfirmationsNeedingAttentionAlert.vm\", velocityContext);\r\n\t\r\n\t\tif (LOG.isErrorEnabled())\r\n\t\t\t{\r\n\t\t\t LOG.info(\"Body is\" + body);\r\n\r\n\t\t\t LOG.info(\"ErrorList: \" + errorList)\r\n\t\t\t}\r\n\t\tvar mailbox = scriptUtils.getMailbox(\"VendorAlerts-ShipConfNeedingAttention\");\r\n\r\n\t\tscriptUtils.createMailboxEntry(mailbox, body, \"ShipmentConfirmationFileNeedingAttention -\"+\" \"+\"Order Number -\"+\" \"+orderNumber+\".html\", subject, primaryContactEmail, \"alerts@envistacorp.com\", null, null, true);\r\n\t }\r\n    createTaskAndNotification(subject, errorMessage, taskQueue, vendor);\r\n}\r\n\r\nfunction correlatePackageLinesToShipmentRequestLines(shipment, shipmentRequest, vendor, vendorNumber) {   \r\n    var omsLineToLineItemMap = new java.util.HashMap();\r\n    var shipmentNumber = shipment.getShipmentNumber();\r\n\tvar vendorNumber = shipment.getSenderContactInfo().getNameId();\r\n    var vendorName = shipment.getFromOrganization().getRefName();\r\n    var validPackage = true;\r\n    var omsLinesSet = new java.util.HashSet();\r\n    for (var x = 0; x < shipmentRequest.getLineItems().size(); x++) {\r\n        var lineItem = shipmentRequest.getLineItems().get(x);\r\n        var omsLineNumber = lineItem.getOmsLineNumber();\r\n        omsLineToLineItemMap.put(omsLineNumber, lineItem);\r\n        omsLinesSet.add(omsLineNumber);\r\n    }\r\n    var omsNoPackageLineMap = new java.util.HashMap();\r\n    var packageIterator = shipment.getPackages().iterator();\r\n    while (packageIterator.hasNext()) {\r\n        var p = packageIterator.next();\r\n        var lineIterator = p.getLineItems().iterator();\r\n        while (lineIterator.hasNext()) {\r\n            var line = lineIterator.next();\r\n            var srLine = omsLineToLineItemMap.get(line.getOmsLineNumber());\r\n                            java.lang.System.out.println(\"OmsLineNumber:\"+line.getOmsLineNumber());\r\n                            java.lang.System.out.println(\"Supplier SKU From Shipment:\"+line.getSupplierItemSKU());\r\n                            java.lang.System.out.println(\"SrLine:\"+srLine);\r\n            if (srLine !== null) {\r\n                if ((srLine.getSupplierItemSKU() !== line.getSupplierItemSKU()) || (srLine.getSystemItemId() !== line.getSystemItemId())) {\r\n\t\t\t\t\tvar message = \"shipment-lineitem-mismatch|Enspire could not process ASN# \" + shipmentNumber + \" from vendor# \" + vendorNumber + \". One or more of the SKUs in the ASN file do not match the SKU number provided within the Order file, on its respective item line.\";\r\n\t\t\t\t\tvalidPackage = false;\r\n\t\t\t\t\tthrow  new com.eis.core.api.v1.exception.B2BNotFoundException(message);  \r\n                } else   \r\n                \t{\r\n                \t\tvar shipQty = 0;\r\n                        // qty check\r\n                        if(omsNoPackageLineMap.get(line.getOmsLineNumber()) != null)\r\n                        {\r\n                        \tshipQty = omsNoPackageLineMap.get(line.getOmsLineNumber());\r\n                        }\r\n                        omsNoPackageLineMap.put(line.getOmsLineNumber(), shipQty + line.getItemQty());                        \r\n                        \r\n                        line.setLineUID(srLine.getLineUID());\r\n                        line.setItemUnitPrice(srLine.getItemUnitPrice());\r\n                        \r\n                        if (srLine.getReferenceData() !== null) {\r\n            \t\t\t\tfor (var x = 0; x < srLine.getReferenceData().size(); x++) {\r\n               \t\t\t\tvar reference = srLine.getReferenceData().get(x);\r\n                \r\n               \t\t\t \tif (!line.getReferenceData().contains(reference)) {\r\n                   \t\t\t\t line.getReferenceData().add(reference);\r\n                \t\t\t\t}\r\n            \t\t\t\t}\r\n        \t\t\t\t}\r\n                }\r\n               \tomsLinesSet.remove(line.getOmsLineNumber());\r\n            } else {\r\n\t\t\t\tvar message = \"shipment-lineitem-mismatch|Enspire could not process ASN# \" + shipmentNumber + \" from vendor# \" + vendorNumber + \". The line item number in the ASN file does not match the item number number in the Order file.\";\r\n\t\t\t\t//handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);\r\n                validPackage = false;   \r\n                throw new java.lang.IllegalStateException(message);               \r\n            }          \r\n        }\r\n    }\r\n    if(!omsLinesSet.isEmpty()) \r\n    {\r\n\t\tvar message = \"shipment-lineitem-mismatch|Enspire could not process ASN# \"+ shipmentNumber + \" from vendor# \" + vendorNumber + \" . The shipment doesn't include the line item \" + omsLinesSet.iterator().next() + \" on Order# \" + shipment.getOrderNumber();\r\n\t\t//handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);\r\n        validPackage = false;    \r\n        throw new java.lang.IllegalStateException(message);  \r\n    }   \r\n\r\n    var omsNoPackageLineMapItr = omsNoPackageLineMap.keySet().iterator();\r\n    if(omsNoPackageLineMapItr != null)\r\n    {\r\n\t\twhile(omsNoPackageLineMapItr.hasNext())\r\n\t\t{\r\n\t\t\tvar omsLineNo = omsNoPackageLineMapItr.next();\r\n\t\t\tvar srLine = omsLineToLineItemMap.get(omsLineNo);\r\n\t\t\tvar qty = omsNoPackageLineMap.get(omsLineNo);\r\n\t\t\tif(qty > srLine.getItemQty())\r\n\t\t\t{\r\n\t\t\t\tvar message = \"shipment-quantity-mismatch|Enspire Commerce could not process Shipment Number \" + shipment.getShipmentNumber() + \", from vendor# \" + vendorNumber + \". The total quantity of items across packages are more than was requested to be fulfilled for the line item on the Order# \" + shipment.getOrderNumber() +\". \";\r\n        \t\tvalidPackage = false;    \r\n       \t\t\tthrow new java.lang.IllegalStateException(message);  \r\n\t\t\t}\r\n\t\t\t\r\n    \t}\r\n    }\r\n    return validPackage;\r\n}\r\n\r\n\r\nfunction lockOrder(order,shipment, vendorNumber, vendor)\r\n{    \r\n    var lockAcquired = false;\r\n    var retryCount = 3;\r\n    while (!lockAcquired && retryCount > 0) {\r\n        try {\r\n            lockAcquired = orderLockMap.tryLock(order.getId(), 60, java.util.concurrent.TimeUnit.SECONDS);\r\n        }\r\n        catch (e) {\r\n            var message = \"Error while getting lock for Order , \" + order.getId() +  \".\";\r\n            //handleError(buildErrorList(message), shipment, true);\r\n            throw new java.lang.IllegalStateException(message);  \r\n        }\r\n        retryCount--;\r\n    }\r\n    \r\n    if (!lockAcquired)\r\n    {\r\n        message = \"Could not acquire order map lock for order:\" + order.getId()\r\n                + \" after 3 attempts\";\r\n        //handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);\r\n        throw new java.lang.IllegalStateException(message);  \r\n    }\r\n    if (LOG.isInfoEnabled())\r\n    {\r\n        \tLOG.info(\"lockAcquired :\" + lockAcquired);\r\n    } \r\n    return lockAcquired;\r\n}\r\n\r\nfunction unlockOrder(order, shipment, vendorNumber, vendor)\r\n{\r\n    try {\r\n        orderLockMap.unlock(order.getId());\r\n    }\r\n    catch (e) {\r\n        var message = \"Error while unlocking Order , \" + order.getId() +  \".\";\r\n        //handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);\r\n        throw new java.lang.IllegalStateException(message);  \r\n    }       \r\n}\r\n\r\nfunction formlineUidToShipmentLineMap(shipmentRequest, lineUidToShipmentLineMap) {\r\n    for (var x = 0; x < shipmentRequest.getLineItems().size(); x++) {\r\n        var line = shipmentRequest.getLineItems().get(x);\r\n        lineUidToShipmentLineMap.put(line.getLineUID(),line);\r\n    }\r\n}\r\n\r\nfunction finalizeShipment(shipment, vendorNumber, shipmentRequest, vendor) {\r\n\tvar lockAcquired = false;\r\n    try {\r\n        \tvar orderNumber =  shipment.getOrderNumber();\r\n        \tvar orders = salesOrderService.getList(0, 1, \"header.orderNumber:\" + orderNumber, null, null);\r\n        \tvar order = orders.get(0);\r\n        \tlockAcquired = lockOrder(order,shipment, vendorNumber, vendor);        \r\n           \tshipment.setShipmentRequestId(shipmentRequest.getId());\r\n            // TC - for some odd reason this was failing\r\n            if(shipment.getDynAttributes() === null) {\r\n                shipment.setDynAttributes(new java.util.LinkedHashMap());\r\n            } \r\n            shipment.setLockVersion(new java.lang.Long(0));\r\n            var originalShipment = shipment;\r\n            LOG.info(\"before finalizeShipment\");\r\n            shipment = shipmentService.finalizeShipment(shipment);\r\n            LOG.info(\"after finalizeShipment\");\r\n            if(!shipment) {\r\n        \t\tshipment = originalShipment;\r\n    \t\t} \r\n    \t\telse \r\n    \t\t{\r\n       \t\t//\tshipment.setShipmentStatus(com.eis.ssit.api.v1.model.ShipmentStatus.SHIPPED);\r\n        \t//\tshipment = shipmentService.save(shipment);\r\n   \t\t\t }\r\n            if (shipment) {          \r\n  \t\t\t    var shipmentRequests = shipmentRequestService.getList(0, 500, \"header.salesOrderNumber:\" + orderNumber, null, null);\r\n    \t\t\tvar allShipmentRequestsComplete = true;\r\n    \t\t\tvar totalShipped = 0;\r\n\r\n    \t\t\tvar srIterator = shipmentRequests.iterator();\r\n   \t\t\t    while(srIterator.hasNext()) {\r\n        \t\t\tvar sr = srIterator.next();\r\n            \t\tjava.lang.System.out.println(\"+++++Shipment Request Status:\"+sr.getHeader().getStatus());\r\n            \t\tif(sr.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.ShipmentRequestStatus.PENDING) || \t\tsr.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.ShipmentRequestStatus.SHIPMENT_IN_PROGRESS)) \r\n            \t\t{\r\n                \t\tallShipmentRequestsComplete = false;\r\n            \t\t}\r\n                \r\n           \t\t\tvar lineIterator = sr.getLineItems().iterator();\r\n            \t\twhile(lineIterator.hasNext()) {\r\n                \t\tvar line = lineIterator.next();\r\n                \t\tvar shippedQty = line.getShippedQty();\r\n                \ttotalShipped = totalShipped + shippedQty;\r\n            \t}\r\n        \t}\r\n        \t\r\n        \tvar cancelOrder = false;\r\n        \tif(allShipmentRequestsComplete && totalShipped === 0){\r\n            \tcancelOrder = true;\r\n        \t}\r\n            \r\n        \tvar lineUidToShipmentLineMap = new java.util.HashMap();\r\n        \tformlineUidToShipmentLineMap(shipmentRequest,lineUidToShipmentLineMap);\r\n        \t\r\n        \torders = salesOrderService.getList(0, 1, \"header.orderNumber:\" + orderNumber, null, null);\r\n        \torder = orders.get(0);\r\n        \t\r\n        \tjava.lang.System.out.println(\"+++++Order Status:\"+order.getHeader().getStatus());\r\n        \tif (order.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.OrderStatus.PARTIALLY_SHIPPED) || order.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.OrderStatus.RELEASED)  || order.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.OrderStatus.FAILED_TO_ALLOCATE)) {\r\n                \r\n             if(allShipmentRequestsComplete && cancelOrder) {\r\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.CANCELED);\r\n                } else if(allShipmentRequestsComplete && totalShipped > 0) {\r\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.SHIPPED);\r\n                } else if(!allShipmentRequestsComplete && totalShipped > 0) {\r\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.PARTIALLY_SHIPPED);\r\n                } else if(!allShipmentRequestsComplete && totalShipped === 0) {\r\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.RELEASED);\r\n                }\r\n                \r\n            for (var q = 0; q < order.getLineItems().size(); q++) {\r\n                var line = order.getLineItems().get(q);\r\n                var shipmentLine = lineUidToShipmentLineMap.get(line.getUid());\r\n                if(shipmentLine !== null) {\r\n                    var shippedQty = shipmentLine.getShippedQty();\r\n                    if(shippedQty > 0 ) {\r\n                        if (line.getStatus().equals(com.eis.ssit.api.v1.model.OrderLineStatus.OPEN)) {\r\n                            line.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.CLOSED);\r\n                        }\r\n                    } else {\r\n                        if (line.getStatus().equals(com.eis.ssit.api.v1.model.OrderLineStatus.OPEN)) {\r\n                                line.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.CANCELLED);\r\n                                line.setCancelledQty(line.getItemQty());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            order = salesOrderService.save(order);\r\n       \t\t}\r\n        }        \r\n        return shipment;\r\n    } catch (e) {\r\n        if (LOG.isErrorEnabled())\r\n        {\r\n            LOG.error(\"Caught Exception:\" + e.message);\r\n        }\r\n        var message = null;\r\n         if (e.javaException) {\r\n            java.lang.System.out.println(\"Caught Exception:\" + e.javaException.message);\r\n            message = e.javaException.message;\r\n        }\r\n        else\r\n        {\r\n        \t message = e.message;\r\n     \t}\r\n        handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);\r\n    }\r\n    finally\r\n    {\r\n        if(lockAcquired)\r\n        {\r\n        \tunlockOrder(order,shipment, vendorNumber, vendor); \r\n        }\r\n    }\r\n}\r\n\r\nfunction getVendorPrimaryContactEmail(vendor) {\r\n    if(vendor.getPrimaryContact() === null || isBlank(vendor.getPrimaryContact().getPrimaryEmail())) {\r\n        taskHelper.notifyAndCreateTask(\r\n                \"Vendor:\"+vendor.getCompanyName()+\" Primary Contact Not Found:\"+java.lang.System.nanoTime(),\r\n                \"No primary contact or primary contact email was found for vendor:\"+vendor.getCompanyName(),\r\n                \"No primary contact or primary contact email was found for vendor:\"+vendor.getCompanyName()+\".  Intial set up of this vendor could have failed. Please set up the vendor correctly with a primary contact.\",\r\n                \"Vendor Failure\", \"com.gnc\",\r\n                \"Vendor Item Failure\", \"vendorItem-failure\", \"Tony Costanzo\");\r\n        return null;\r\n    } else {\r\n        return vendor.getPrimaryContact().getPrimaryEmail();\r\n    }\r\n    \r\n}\r\n\r\nfunction writeToMailbox(shipment, mailbox, vendor, vendorNumber) {\r\n    var xml = mapper.writeValueAsString(shipment);\r\n    var metaData = new java.util.LinkedHashMap();\r\n    var shipmentReferences = shipment.getReferenceData();\r\n    var fromInternalAddress = scriptUtils.getReferenceValueFromReferences(shipmentReferences, \"internalFromAddress\");\r\n    var toInternalAddress = scriptUtils.getReferenceValueFromReferences(shipmentReferences, \"internalToAddress\");\r\n\r\n    if (fromInternalAddress === null) {\r\n        fromInternalAddress = \"vendor@gnc.com\";\r\n    }\r\n\r\n    if (toInternalAddress === null) {\r\n        toInternalAddress = \"asn@gnc.com\";\r\n    }\r\n\r\n    metaData.put(\"shipmentNumber\", shipment.getShipmentNumber());\r\n    metaData.put(\"orderNumber\", shipment.getOrderNumber());\r\n    metaData.put(\"vendorNumber\", vendorNumber);\r\n    var mailboxEntry = scriptUtils.createMailboxEntry(mailbox, xml, \"ASN_\" + shipment.getShipmentNumber() + \".xml\", \"ASN-\" + shipment.getShipmentNumber()+\"_DO\"+shipment.getOrderNumber(), toInternalAddress, fromInternalAddress, metaData, metaData, true);\r\n    return mailboxEntry;\r\n}\r\n\r\nfunction handleError(errorList, shipment, vendorNumber, vendor, alertError) {\r\n    var mailbox = scriptUtils.getMailbox(\"ShipmentConfirmation-Failure\");\r\n    var mailboxEntry = writeToMailbox(shipment, mailbox, vendor, vendorNumber);\r\n    tags.add(\"reprocessMailboxEntryId-\" + mailboxEntry.getId());\r\n    if (alertError) {\r\n        alertAndNotifyOfError(errorList, vendor, shipment.getShipmentNumber(), shipment.getOrderNumber(), vendorNumber);\r\n    }\r\n}\r\n\r\nfunction processASN() {\r\n    var clazz = new java.lang.Class.forName(\"com.eis.ssit.api.v1.model.Shipment\");\r\n    var shipment = mapper.readValue(body, clazz);\r\n    var vendorNumber = shipment.getSenderContactInfo().getNameId();\r\n\r\n    tags.add(\"vendorNumber-\" + vendorNumber);\r\n    tags.add(\"shipmentNumber-\" + shipment.getShipmentNumber());\r\n    tags.add(\"orderNumber-\" + shipment.getOrderNumber());\r\n    tags.add(\"originalOrderNumber-\" + shipment.getOriginalOrderNumber());\r\n    shipment.setRefName(vendorNumber + \"-\" + shipment.getShipmentNumber() + \"-\" + java.lang.System.nanoTime());\r\n    \r\n    try\r\n\t{    \r\n    vendor = getVendor(vendorNumber, shipment);\r\n    if (vendor === null) {\r\n        return;\r\n    }\r\n    var isValidShipment = isShipmentValid(vendor, shipment, vendorNumber);\r\n\r\n    if (isValidShipment) {\r\n    \tshipmentRequest = findShipmentRequestForShipment(vendorNumber, shipment.getOrderNumber(), shipment, vendor);\r\n        if(shipmentRequest !== null && !hasShipmentBeenReceived(vendor, shipment, vendorNumber)) {\r\n            isValidShipment = true;\r\n        } else {\r\n            isValidShipment = false;\r\n        }        \r\n        if (isValidShipment) {         \r\n            var merchant = getMerchant(\"GNC-Organization-\", shipment, vendorNumber);\r\n            if (merchant === null) {\r\n                return;\r\n            }           \r\n            shipment.setOrderNumber(shipmentRequest.getHeader().getSalesOrderNumber());\r\n            shipment.setOriginalOrderNumber(shipmentRequest.getHeader().getOriginalOrderNumber()); \r\n            shipment.setToOrganization(merchant.constructObjectReference());\r\n            shipment.setFromOrganization(vendor.constructObjectReference());\r\n            shipment.getDataDomains().addAll(shipmentRequest.getDataDomains());    \r\n            \r\n            correlatePackageLinesToShipmentRequestLines(shipment, shipmentRequest, vendor , vendorNumber);        \r\n        }\r\n    }  \r\n    }\r\n    catch (e) {\r\n        if (LOG.isErrorEnabled()) {\r\n            LOG.error(\"stacktrace --\", e);\r\n        }\r\n        isValidShipment = false;\r\n        var message = null;\r\n        if (e.javaException) {\r\n            java.lang.System.out.println(\"Caught Exception:\" + e.javaException.message);\r\n            message = e.javaException.message;\r\n        }\r\n        else \r\n        {\r\n        \tmessage = e.message;\r\n        }       \r\n        handleError(buildErrorList(message), shipment, vendorNumber, vendor, true);\r\n    }\r\n    if (isValidShipment) {         \r\n            shipment = finalizeShipment(shipment, vendorNumber, shipmentRequest, vendor);                \r\n    }\r\n}\r\nvar vendor = null;\r\nvar tags = new java.util.ArrayList();\r\ntags.add(\"transmissionId-\" + header_transmissionId);\r\ntags.add(\"file-\" + header_CamelFileName);\r\ntags.add(\"mailboxEntryId-\" + header_MailboxEntryId);\r\nvar shipmentRequest = null;\r\nprocessASN();",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "processASN",
    "refKey" : "98c652a96e182d85867cdedc82ed424c",
    "displayName" : "processShipmentConfirmation",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "processShipmentConfirmation", "processASN" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1533888142653,
      "createUser" : "Lakshmi Ashok Kumar",
      "updateTs" : 1536044914251,
      "updateUser" : "Lakshmi Ashok Kumar"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "d968a14a-f776-4fae-84c1-f90f55fec182",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "body" : {
          "id" : null,
          "refName" : "body",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "body",
          "description" : null
        },
        "header_CamelFileName" : {
          "id" : null,
          "refName" : "header_CamelFileName",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_CamelFileName",
          "description" : null
        },
        "header_MailboxEntryId" : {
          "id" : null,
          "refName" : "header_MailboxEntryId",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_MailboxEntryId",
          "description" : null
        },
        "header_transmissionId" : {
          "id" : null,
          "refName" : "header_transmissionId",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_transmissionId",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : { }
    },
    "scriptContextObjects" : {
      "body" : {
        "type" : "scriptInputVariable",
        "name" : "body",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "body",
        "parameters" : { }
      },
      "header_CamelFileName" : {
        "type" : "scriptInputVariable",
        "name" : "header_CamelFileName",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_CamelFileName",
        "parameters" : { }
      },
      "header_MailboxEntryId" : {
        "type" : "scriptInputVariable",
        "name" : "header_MailboxEntryId",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_MailboxEntryId",
        "parameters" : { }
      },
      "header_transmissionId" : {
        "type" : "scriptInputVariable",
        "name" : "header_transmissionId",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_transmissionId",
        "parameters" : { }
      },
      "hzclient" : {
        "type" : "javaBean",
        "name" : "hzclient",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "notificationDAO" : {
        "type" : "javaBean",
        "name" : "notificationDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "organizationService" : {
        "type" : "serviceBean",
        "name" : "organizationService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "organizationService",
        "parameterName" : null,
        "parameters" : { }
      },
      "salesOrderService" : {
        "type" : "serviceBean",
        "name" : "salesOrderService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "salesOrderService",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentDAO" : {
        "type" : "javaBean",
        "name" : "shipmentDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestDAO" : {
        "type" : "javaBean",
        "name" : "shipmentRequestDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestService" : {
        "type" : "serviceBean",
        "name" : "shipmentRequestService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentRequestService",
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentService" : {
        "type" : "serviceBean",
        "name" : "shipmentService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentService",
        "parameterName" : null,
        "parameters" : { }
      },
      "skuService" : {
        "type" : "serviceBean",
        "name" : "skuService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "skuService",
        "parameterName" : null,
        "parameters" : { }
      },
      "taskDAO" : {
        "type" : "javaBean",
        "name" : "taskDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "taskHelper" : {
        "type" : "javaBean",
        "name" : "taskHelper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "vendorService" : {
        "type" : "serviceBean",
        "name" : "vendorService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "vendorService",
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.gnc" ]
  },
  "functionType" : "routing",
  "inputs" : { },
  "result" : null,
  "active" : true,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "gncPolicy",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "gncPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1531337454496,
      "createUser" : "Paul Ramnarain",
      "updateTs" : 1591201352156,
      "updateUser" : "GNC VDP"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "allowedPackages" : {
      "adapter1" : "adapter1",
      "adapter2" : "adapter2",
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1common" : "com.eis.b2bmb.api.v1.common",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbcamelcustomutil" : "com.eis.b2bmb.camel.custom.util",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscloudcanonicalmodel" : "com.eis.cloud.canonical.model",
      "comeiscloudcanonicalmodelimports" : "com.eis.cloud.canonical.model.imports",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscorecommonJSRunner" : "com.eis.core.common.JSRunner",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrskwiapiv1model" : "com.eis.extsvrs.kwi.api.v1.model",
      "comeisextsvrskwiapiv1services" : "com.eis.extsvrs.kwi.api.v1.services",
      "comeisextsvrsquickbooksapiv1dao" : "com.eis.extsvrs.quickbooks.api.v1.dao",
      "comeisextsvrsshipstationapiv1exception" : "com.eis.extsvrs.shipstation.api.v1.exception",
      "comeisextsvrsshipstationapiv1model" : "com.eis.extsvrs.shipstation.api.v1.model",
      "comeisextsvrsshipstationapiv1services" : "com.eis.extsvrs.shipstation.api.v1.services",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisextsvrssnapfulfilapiv1dao" : "com.eis.extsvrs.snapfulfil.api.v1.dao",
      "comeisextsvrssnapfulfilapiv1model" : "com.eis.extsvrs.snapfulfil.api.v1.model",
      "comeisextsvrssnapfulfilapiv1services" : "com.eis.extsvrs.snapfulfil.api.v1.services",
      "comeisextsvrssnapfulfilapiv1util" : "com.eis.extsvrs.snapfulfil.api.v1.util",
      "comeisgitimpl" : "com.eis.git.impl",
      "comeisgitmodel" : "com.eis.git.model",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngine" : "com.eis.oms.inventory.allocationEngine",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysync" : "com.eis.oms.inventory.sync",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparserscustomer" : "com.eis.ssit.parsers.customer",
      "comeisssitparserspricing" : "com.eis.ssit.parsers.pricing",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersvendor" : "com.eis.ssit.parsers.vendor",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comfasterxmljacksondataformatxml" : "com.fasterxml.jackson.dataformat.xml",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaldom" : "com.sun.org.apache.xerces.internal.dom",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunorgapachexmlinternalserialize" : "com.sun.org.apache.xml.internal.serialize",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilregex" : "java.util.regex",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlnamespace" : "javax.xml.namespace",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransform" : "javax.xml.transform",
      "javaxxmltransformdom" : "javax.xml.transform.dom",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "javaxxmlws" : "javax.xml.ws",
      "javaxxmlwsBindingProvider" : "javax.xml.ws.BindingProvider",
      "javaxxmlwshandlerMessageContext" : "javax.xml.ws.handler.MessageContext",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecatalinaloader" : "org.apache.catalina.loader",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscodecbinary" : "org.apache.commons.codec.binary",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecommonslangtime" : "org.apache.commons.lang.time",
      "orgapachecxfhelpers" : "org.apache.cxf.helpers",
      "orgapachecxfhelpersDOMUtils" : "org.apache.cxf.helpers.DOMUtils",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfjaxws" : "org.apache.cxf.jaxws",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgapachexalanprocessor" : "org.apache.xalan.processor",
      "orgapachexalantransformer" : "org.apache.xalan.transformer",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "orgw3cdom" : "org.w3c.dom",
      "orgxmlsax" : "org.xml.sax",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.gnc" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "processASN",
    "refId" : "d968a14a-f776-4fae-84c1-f90f55fec182",
    "refKey" : "98c652a96e182d85867cdedc82ed424c",
    "displayName" : "processShipmentConfirmation",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "gncPolicy",
    "refId" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "scriptrunner@gnc.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.gnc" ]
}