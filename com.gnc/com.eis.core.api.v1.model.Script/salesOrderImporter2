{
  "refName" : "salesOrderImporter2",
  "refKey" : "1da2619ca15e7dedaea04db4b574df1d",
  "displayName" : "salesOrderImporter2",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1488407723148,
    "createUser" : "Michael Ingardia",
    "updateTs" : 1497403512391,
    "updateUser" : "Michael Ingardia"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "aac1b236-a1ad-4e9a-bae5-af2c1e63bc35",
  "script" : "var csvPackage = Packages.au.com.bytecode.opencsv;\r\n\r\nfunction strEndsWith(str, suffix) {\r\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n}\r\n\r\n\r\nfunction isBlank(value) {\r\n    if (value === null || value === undefined || value === '' || value === 'undefined') {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\nfunction buildRequiredFieldErrorMessage(fieldName, errorList) {\r\n    errorList.add(\"Column:\" + fieldName + \" was blank, please provide a \" + fieldName);\r\n}\r\n\r\nfunction buildFieldSizeErrorMessage(fieldName, size, errorList) {\r\n    errorList.add(\"Error: \" + fieldName + \" must only be \" + size + \" characters in length\");\r\n}\r\n\r\n\r\n\r\nfunction removeWhiteSpace(value) {\r\n\r\n    if (value !== null) {\r\n        return new java.lang.String(value).trim();\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\nfunction getUpperCaseValue(value) {\r\n    if (value !== null) {\r\n        return new java.lang.String(value).trim().toUpperCase();\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\nfunction getDate(date, rowErrors) {\r\n\r\n    var dateFormat = [\"MM/dd/yyyy\"];\r\n    var parsedDate = null;\r\n\r\n    try {\r\n        java.lang.System.out.println(\"Parsing Date:\" + date);\r\n        parsedDate = org.apache.commons.lang.time.DateUtils.parseDateStrictly(date, dateFormat);\r\n        java.lang.System.out.println(\"Parsed Date:\" + date);\r\n        return parsedDate;\r\n\r\n    } catch (e) {\r\n        java.lang.System.out.println(\"Bad Date.\");\r\n        rowErrors.add(\"Error:\" + date + \" is not a valid date - it must be in the format 'MM/dd/yyyy'.\");\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction validateDetailRow(bookCode, quantity, invoiceNumber, rowNumber) {\r\n    var errorList = new java.util.ArrayList();\r\n\r\n    if (isBlank(bookCode)) {\r\n        buildRequiredFieldErrorMessage(\"Detail Row:\" + rowNumber + \" Book Code\", errorList);\r\n    }\r\n\r\n    if (isBlank(quantity)) {\r\n        buildRequiredFieldErrorMessage(\"Detail Row:\" + rowNumber + \" Quantity\", errorList);\r\n    }\r\n\r\n    if (isBlank(invoiceNumber)) {\r\n        buildRequiredFieldErrorMessage(\"Detail Row:\" + rowNumber + \" Invoice Number\", errorList);\r\n    }\r\n\r\n    return errorList;\r\n}\r\n\r\nfunction validateHeaderRow(invoiceNumber, publisherCode, carrierCode, date, addressLine1, addressLine2, addressLine3, city, state, zip, country, rowNumber) {\r\n    var errorList = new java.util.ArrayList();\r\n\r\n    if (isBlank(invoiceNumber)) {\r\n        buildRequiredFieldErrorMessage(\"Invoice Number\", errorList);\r\n    }\r\n\r\n    if (isBlank(publisherCode)) {\r\n        buildRequiredFieldErrorMessage(\"Publisher Code\", errorList);\r\n    }\r\n\r\n    if (isBlank(carrierCode)) {\r\n        buildRequiredFieldErrorMessage(\"Carrier Code\", errorList);\r\n    }\r\n\r\n    if (isBlank(date)) {\r\n        buildRequiredFieldErrorMessage(\"Date\", errorList);\r\n    } else {\r\n        java.lang.System.out.println(\"Date:\" + date);\r\n        getDate(date, errorList);\r\n    }\r\n\r\n    if (isBlank(addressLine1)) {\r\n        buildRequiredFieldErrorMessage(\"Address Line 1\", errorList);\r\n    }\r\n\r\n    if (isBlank(addressLine3)) {\r\n        buildRequiredFieldErrorMessage(\"Address Line 3\", errorList);\r\n    }\r\n\r\n    /*\r\n    if(isBlank(addressLine2)) {\r\n       buildRequiredFieldErrorMessage(\"Address Line 2\", errorList);\r\n    }\r\n    */\r\n\r\n    if (isBlank(city)) {\r\n        buildRequiredFieldErrorMessage(\"City\", errorList);\r\n    }\r\n\r\n    /*\r\n    if(isBlank(state)) {\r\n        buildRequiredFieldErrorMessage(\"State\", errorList);\r\n    }\r\n    */\r\n\r\n    if (isBlank(zip)) {\r\n        buildRequiredFieldErrorMessage(\"Zip\", errorList);\r\n\r\n    } else {\r\n\r\n\r\n        if (isBlank(country) || \"United States\".equals(country) ||\r\n            country === \"US\" || country === \"USA\") {\r\n\r\n\r\n            if (!(zip.length === 5 || zip.length === 10)) {\r\n                errorList.add(\"Error: Zip must only be 5 or 10 characters in length if the country is US.\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    if(isBlank(country)) {\r\n        buildRequiredFieldErrorMessage(\"Country\", errorList);\r\n    }\r\n    */\r\n\r\n    return errorList;\r\n\r\n}\r\n\r\nfunction getCustomer(publisherCode) {\r\n    var customer = null;\r\n    var customers = customerService.getList(0, 1, \"customerNumber:\" + publisherCode, null, null);\r\n    if (customers !== null && customers.size() > 0) {\r\n        customer = customers.get(0);\r\n    }\r\n\r\n    return customer;\r\n}\r\n\r\nfunction getClient(publisherCode, contactInfo, customer) {\r\n    var client = null;\r\n    var clientNumber = publisherCode + \"-\" + contactInfo.getName() + \"-\" + contactInfo.getAddress().getAddress1();\r\n    clientNumber = java.lang.String(clientNumber).replaceAll(\"[^a-zA-Z0-9]+\", \"\");\r\n    if (clientNumber.length > 50) {\r\n        clientNumber = clientNumber.substring(0, 50);\r\n    }\r\n\r\n    var clients = clientService.getList(0, 1, \"customerNumber:\" + clientNumber, null, null);\r\n    if (clients !== null && clients.size() > 0) {\r\n        client = clients.get(0);\r\n    } else {\r\n        client = new com.eis.ssit.api.v1.model.Client();\r\n        client.setFullName(contactInfo.getName());\r\n        client.setCompanyName(contactInfo.getCompanyName());\r\n        client.setCustomerRef(customer.constructObjectReference());\r\n        contactInfo.getAddress().getRoles().add(\"shipto\");\r\n        contactInfo.getAddress().getRoles().add(\"billto\");\r\n        contactInfo.getAddress().getRoles().add(\"contact\");\r\n        client.getContacts().add(contactInfo);\r\n        client.getAddresses().add(contactInfo.getAddress());\r\n        client.setId(java.lang.String.valueOf(java.util.UUID.randomUUID()));\r\n        client.setDataDomain(customer.getDataDomain());\r\n        client.setRefName(clientNumber);\r\n        if (!isBlank(client.getCompanyName())) {\r\n            client.setDisplayName(client.getCompanyName());\r\n        } else {\r\n            client.setDisplayName(client.getFullName());\r\n        }\r\n        client.setHasOrganization(false);\r\n        client.setOrg(customer.getOrg());\r\n        client.setCustomerNumber(clientNumber);\r\n    }\r\n\r\n    return client;\r\n}\r\n\r\nfunction getProduct(bookCode) {\r\n    var product = null;\r\n    var products = productService.getList(0, 1, \"productIdentifier:\" + bookCode, null, null);\r\n    if (products !== null && products.size() > 0) {\r\n        product = products.get(0);\r\n    }\r\n\r\n    return product;\r\n}\r\n\r\nfunction buildContactInfoFromXLSX(addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, city, state, postalCode, country, customer, rowErrors, modelImport) {\r\n\r\n    var name = addressLine1;\r\n    var companyName = addressLine2;\r\n    var line1 = addressLine3;\r\n    var line2 = addressLine4;\r\n    var line3 = addressLine5;\r\n    var countryCode = \"\";\r\n\r\n\r\n\r\n    var contactInfo = new com.eis.core.api.v1.model.ContactInfo();\r\n    var address = new com.eis.core.api.v1.model.MailingAddress();\r\n    /*\r\n    if(!isBlank(addressLine5)) {\r\n        line3 = addressLine5;\r\n        line2 = addressLine4;\r\n        line1 = addressLine3;\r\n        companyName = addressLine2;\r\n        name = addressLine1;\r\n    } else if(!isBlank(addressLine4)) {\r\n        line2 = addressLine4;\r\n        line1 = addressLine3;\r\n        companyName = addressLine2;\r\n        name = addressLine1;\r\n    } else if(!isBlank(addressLine3)) {\r\n        line1 = addressLine3;\r\n        companyName = addressLine2;\r\n        name = addressLine1;\r\n    } else if(!isBlank(addressLine2)) {\r\n        line1 = addressLine2;\r\n        name = addressLine1;\r\n    }\r\n    */\r\n\r\n    address.setAddress1(line1);\r\n    address.setAddress2(line2);\r\n    address.setAddress3(line3);\r\n    address.setCity(city);\r\n    address.setState(state);\r\n    if (isBlank(country)) {\r\n        countryCode = \"US\";\r\n        country = \"United States\";\r\n    } else {\r\n        var countryCorrelation =\r\n            correlationService.getByRefName(\"CountryTo2CharCountryCode\");\r\n\r\n        if (countryCorrelation === null) {\r\n            throw new com.eis.core.api.v1.exception.AccountConfigurationException(\"Could not get correlation named: 'CountryTo2CharCountryCode'\");\r\n        }\r\n\r\n        try {\r\n            countryCode = scriptUtils.getCorrelationValue(\"CountryTo2CharCountryCode\", country, false);\r\n        } catch (e) {\r\n            rowErrors.add(\"No correlation value was found for country:\" + country);\r\n            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n        }\r\n\r\n    }\r\n\r\n    if (countryCode !== 'US') {\r\n        address.setPostalCode(postalCode);\r\n    } else {\r\n        address.setZip5(postalCode);\r\n    }\r\n\r\n    address.setCountry(countryCode);\r\n    address.setCountryName(country);\r\n    scriptUtils.buildCorrectAddress(address);\r\n    if (countryCode !== 'US') {\r\n        address.setPostalCode(postalCode);\r\n    }\r\n    address.getRoles().add(com.eis.core.api.v1.model.AddressRole.shipto);\r\n    contactInfo.setNameId(line1);\r\n    contactInfo.setName(name);\r\n    contactInfo.setCompanyName(companyName);\r\n    contactInfo.setAddress(address);\r\n    return contactInfo;\r\n}\r\n\r\n\r\nfunction buildContactInfoFromCSV(addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, city, state, postalCode, country, customer, rowErrors, modelImport) {\r\n\r\n    var name = addressLine1;\r\n    var companyName = addressLine2;\r\n    var line1 = addressLine3;\r\n    var line2 = addressLine4;\r\n    var line3 = addressLine5;\r\n    var countryCode = \"\";\r\n\r\n    var contactInfo = new com.eis.core.api.v1.model.ContactInfo();\r\n    var address = new com.eis.core.api.v1.model.MailingAddress();\r\n    /*\r\n    if(!isBlank(addressLine5)) {\r\n        line3 = addressLine5;\r\n        line1 = addressLine4;\r\n        line2 = addressLine3;\r\n    } else if(!isBlank(addressLine4)) {\r\n        line1 = addressLine4;\r\n        line2 = addressLine3;\r\n    } else if(!isBlank(addressLine3)) {\r\n        line1 = addressLine3;\r\n    }\r\n    */\r\n\r\n\r\n    address.setAddress1(line1);\r\n    address.setAddress2(line2);\r\n    address.setAddress3(line3);\r\n    address.setCity(city);\r\n    address.setState(state);\r\n    if (isBlank(country)) {\r\n        countryCode = \"US\";\r\n        country = \"United States\";\r\n    } else {\r\n        var countryCorrelation =\r\n            correlationService.getByRefName(\"CountryTo2CharCountryCode\");\r\n\r\n        if (countryCorrelation === null) {\r\n            throw new com.eis.core.api.v1.exception.AccountConfigurationException(\"Could not get correlation named: 'CountryTo2CharCountryCode'\");\r\n        }\r\n        try {\r\n            countryCode = scriptUtils.getCorrelationValue(\"CountryTo2CharCountryCode\", country, false);\r\n        } catch (e) {\r\n\r\n            var capitalCountryCorrelation =\r\n                correlationService.getByRefName(\"CapitalCountryTo2CharCountryCode\");\r\n\r\n            if (capitalCountryCorrelation === null) {\r\n                throw new com.eis.core.api.v1.exception.AccountConfigurationException(\"Could not get correlation named: 'CapitalCountryTo2CharCountryCode'\");\r\n            }\r\n\r\n            try {\r\n                countryCode = scriptUtils.getCorrelationValue(\"CapitalCountryTo2CharCountryCode\", country, false);\r\n            } catch (e) {\r\n                rowErrors.add(\"No correlation value was found for country:\" + country);\r\n                modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    if (countryCode !== 'US') {\r\n        address.setPostalCode(postalCode);\r\n    } else {\r\n        address.setZip5(postalCode);\r\n    }\r\n\r\n    address.setCountry(countryCode);\r\n    address.setCountryName(country);\r\n    scriptUtils.buildCorrectAddress(address);\r\n    if (countryCode !== 'US') {\r\n        address.setPostalCode(postalCode);\r\n    }\r\n    address.getRoles().add(com.eis.core.api.v1.model.AddressRole.shipto);\r\n    contactInfo.setNameId(line1);\r\n    contactInfo.setName(name);\r\n    contactInfo.setCompanyName(companyName);\r\n    contactInfo.setAddress(address);\r\n    return contactInfo;\r\n\r\n}\r\n\r\nfunction getSite(sanNumber) {\r\n    var site = null;\r\n    var sites = siteService.getList(0, 1, \"dcNbr:\" + sanNumber, null, null);\r\n    if (sites !== null && sites.size() > 0) {\r\n        site = sites.get(0);\r\n    }\r\n\r\n    return site;\r\n}\r\n\r\n\r\n\r\n\r\nfunction validateSANAddress(contactInfo, sanNumber, rowErrors, modelImport) {\r\n    var site = getSite(sanNumber);\r\n    if (site === null) {\r\n        rowErrors.add(\"No site was found for SAN Number:\" + sanNumber);\r\n        modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n\r\n    } else {\r\n        if (getUpperCaseValue(java.lang.String(contactInfo.getAddress().getAddress1()).replaceAll(\"[^a-zA-Z0-9 ]+\", \"\")) !== getUpperCaseValue(java.lang.String(site.getAddress().getAddress1()).replaceAll(\"[^a-zA-Z0-9 ]+\", \"\"))) {\r\n            rowErrors.add(\"The address line 1 of the site:\" + getUpperCaseValue(site.getAddress().getAddress1()) + \" does not match the address line1 of the client ship to address:\" + getUpperCaseValue(contactInfo.getAddress().getAddress1()) + \" for the the SAN Number provided in the order.\");\r\n            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n        }\r\n\r\n        if (getUpperCaseValue(contactInfo.getAddress().getState()) !== getUpperCaseValue(site.getAddress().getState())) {\r\n            rowErrors.add(\"The state of the site:\" + site.getAddress().getState() + \" does not match the state of the client ship to address:\" + contactInfo.getAddress().getState() + \" for the the SAN Number provided in the order.\");\r\n            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n        }\r\n\r\n        if (getUpperCaseValue(contactInfo.getAddress().getCity()) !== getUpperCaseValue(site.getAddress().getCity())) {\r\n            rowErrors.add(\"The city of the site:\" + getUpperCaseValue(site.getAddress().getCity()) + \" does not match the city of the client ship to address:\" + getUpperCaseValue(contactInfo.getAddress().getCity()) + \" for the the SAN Number provided in the order.\");\r\n            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n        }\r\n\t\r\n        \r\n        if (getUpperCaseValue(contactInfo.getAddress().getCountry()) !== getUpperCaseValue(site.getAddress().getCountry())) {\r\n            rowErrors.add(\"The country of the site:\" + getUpperCaseValue(site.getAddress().getCountry()) + \" does not match the country of the client ship to address:\" + getUpperCaseValue(contactInfo.getAddress().getCountry()) + \" for the the SAN Number provided in the order.\");\r\n            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n        }\r\n\r\n\r\n        if (contactInfo.getAddress().getCountry() === 'US') {\r\n            if(!isBlank(contactInfo.getAddress().getZip5())  && !isBlank(site.getAddress().getZip5())) {\r\n\t         if (getUpperCaseValue(contactInfo.getAddress().getZip5()) !== getUpperCaseValue(site.getAddress().getZip5())) {\r\n                      rowErrors.add(\"The zip code of the site:\" + site.getAddress().getZip5() + \" does not match the zip code of the client ship to address:\" + contactInfo.getAddress().getZip5() + \" for the the SAN Number provided in the order.\");\r\n                      modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n                 }\r\n            } else {\r\n\t\trowErrors.add(\"The zip code was not provided in the SAN address or client ship to address.  Both should have been provided.\");\r\n                modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n\r\n            }\r\n        } else {\r\n            if(!isBlank(contactInfo.getAddress().getPostalCode())  && !isBlank(site.getAddress().getPostalCode())) {\r\n\t    \tif (getUpperCaseValue(java.lang.String(contactInfo.getAddress().getPostalCode()).replaceAll(\"[^a-zA-Z0-9]+\", \"\")) !== getUpperCaseValue(java.lang.String(site.getAddress().getPostalCode()).replaceAll(\"[^a-zA-Z0-9]+\", \"\"))) {\r\n                \trowErrors.add(\"The postal code of the site:\" + site.getAddress().getPostalCode() + \" does not match the postalCode of the client ship to address:\" + contactInfo.getAddress().getPostalCode() + \" for the the SAN Number provided in the order.\");\r\n                \tmodelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n            \t}\r\n\t    } else {\r\n\t\t\trowErrors.add(\"The postal code was not provided in the SAN address or client ship to address.  Both should have been provided.\");\r\n                \tmodelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getCustomerContactInfo(customer, contactType) {\r\n    var contactInfo = null;\r\n    for (var x = 0; x < customer.getContacts().size(); x++) {\r\n        contactInfo = customer.getContacts().get(x);\r\n        /*\r\n        if(contactInfo.getRoles().contains(contactType)) {\r\n            break;\r\n        }\r\n        */\r\n        break;\r\n    }\r\n\r\n    return contactInfo;\r\n}\r\n\r\nfunction setCarrierAndService(salesOrder, carrierCode, rowErrors, modelImport) {\r\n\r\n    if (isBlank(carrierCode)) {\r\n        throw new com.eis.core.api.v1.exception.AccountConfigurationException(\"No carrier code was provided on the order.\");\r\n\r\n    }\r\n    var shippingCorrelation =\r\n        correlationService.getByRefName(\"PSSCtoOMSCarrierAndServices\");\r\n\r\n    if (shippingCorrelation === null) {\r\n        throw new com.eis.core.api.v1.exception.AccountConfigurationException(\"Could not get correlation named: 'PSSCtoOMSCarrierAndServices'\");\r\n    }\r\n\r\n    var carrierServiceInfo = \"\";\r\n    try {\r\n        carrierServiceInfo = scriptUtils.getCorrelationValue(\"PSSCtoOMSCarrierAndServices\", carrierCode.toUpperCase(), false);\r\n    } catch (e) {\r\n        rowErrors.add(\"No correlation value was found for carrier code:\" + carrierCode);\r\n        modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n    }\r\n\r\n    if (!isBlank(carrierServiceInfo)) {\r\n        var carrier = carrierServiceInfo.split(\"|\")[0];\r\n        var service = carrierServiceInfo.split(\"|\")[1];\r\n        salesOrder.getHeader().setShippingCarrier(carrier);\r\n        salesOrder.getHeader().setCarrierServiceType(service);\r\n    }\r\n}\r\n\r\nfunction getCellValue(cell) {\r\n    var value = \"\";\r\n    java.lang.System.out.println(\"Cell Type:\" + cell.getCellType());\r\n    switch (cell.getCellType()) {\r\n        case org.apache.poi.hssf.usermodel.HSSFCell.CELL_TYPE_STRING:\r\n            value = cell.getRichStringCellValue().getString();\r\n            break;\r\n        case org.apache.poi.hssf.usermodel.HSSFCell.CELL_TYPE_NUMERIC:\r\n            // Note - we don't apply any formatting!\r\n            value = cell.getNumericCellValue();\r\n            if (org.apache.poi.hssf.usermodel.HSSFDateUtil.isCellDateFormatted(cell)) {\r\n                var date = org.apache.poi.hssf.usermodel.HSSFDateUtil.getJavaDate(value);\r\n\r\n                var dateFmt = cell.getCellStyle().getDataFormatString();\r\n                /* strValue = new SimpleDateFormat(dateFmt).format(date); - won't work as \r\n                Java fmt differs from Excel fmt. If Excel date format is mm/dd/yyyy, Java \r\n                will always be 00 for date since \"m\" is minutes of the hour.*/\r\n\r\n                value = new org.apache.poi.ss.format.CellDateFormatter(dateFmt).format(date);\r\n                // takes care of idiosyncrasies of Excel\r\n            }\r\n\r\n\r\n            break;\r\n        case org.apache.poi.hssf.usermodel.HSSFCell.CELL_TYPE_BOOLEAN:\r\n            value = cell.getBooleanCellValue();\r\n            break;\r\n        default:\r\n            value = cell.getRichStringCellValue().getString();\r\n            break;\r\n    }\r\n\r\n    return value;\r\n\r\n}\r\n\r\nfunction isRowEmpty(row) {\r\n    for (var c = row.getFirstCellNum(); c < row.getLastCellNum(); c++) {\r\n        var cell = row.getCell(c);\r\n        /*\r\n        if (cell != null && cell.getCellType() != org.apache.poi.ss.usermodel.CELL_TYPE_BLANK) {\r\n            return false;\r\n        }\r\n        */\r\n        if (cell != null && !isBlank(getCellValue(cell))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction buildSalesOrder(invoiceNumber, publisherCode, carrierCode, date, addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, city, state, postalCode, country, poNumber, sanNumber, billToNumber, rowErrors, salesOrder, type, modelImport, invoiceNumberList) {\r\n    var queryString = \"header.orderNumber:\" + invoiceNumber + \"&&customer.refName:\" + publisherCode;\r\n\r\n    var salesOrders = salesOrderService.getList(0, 1, queryString, null, null);\r\n\r\n    var duplicateOrder = invoiceNumberList.contains(invoiceNumber + '-' + publisherCode);\r\n\r\n    if (duplicateOrder) {\r\n        rowErrors.add(\"An order with invoice number:\" + invoiceNumber + \" from Publisher with PubCode-\" + publisherCode + \" has already been successfully processed in this file.\");\r\n        modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n        rowValid = false;\r\n    } else if (salesOrders.size() > 0) {\r\n        rowErrors.add(\"An order with invoice number:\" + invoiceNumber + \" from Publisher with PubCode-\" + publisherCode + \" has already been received.\");\r\n        modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n        rowValid = false;\r\n    } else {\r\n\r\n        var customer = getCustomer(publisherCode);\r\n        if (customer === null) {\r\n            rowErrors.add(\"No Publisher was found for publisher code:\" + publisherCode);\r\n            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n            rowValid = false;\r\n        } else if (customer !== null && customer.getStatus() === 'HOLD') {\r\n            rowErrors.add(\"Publisher:\" + customer.getDisplayName() + \" with PubCode-\" + publisherCode + \" is currently in 'HOLD' status\");\r\n            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Warning);\r\n            rowValid = false;\r\n\r\n        }\r\n\r\n        if (customer !== null) {\r\n            salesOrder.setCustomer(customer);\r\n            var salesOrderHeader = new com.eis.ssit.api.v1.model.SalesOrderHeader();\r\n            salesOrder.setHeader(salesOrderHeader);\r\n            var shipToContactInfo = null;\r\n            if (type === \"csv\") {\r\n                shipToContactInfo = buildContactInfoFromCSV(addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, city, state, postalCode, country, customer, rowErrors, modelImport);\r\n            } else {\r\n                shipToContactInfo = buildContactInfoFromXLSX(addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, city, state, postalCode, country, customer, rowErrors, modelImport);\r\n            }\r\n\r\n            var client = getClient(publisherCode, shipToContactInfo, customer);\r\n            salesOrder.setClient(client);\r\n\r\n\r\n            if (rowErrors.size() > 0) {\r\n                rowValid = false;\r\n            } else {\r\n                /*\r\n                if(shipToContactInfo.getAddress().getCountry() === 'US') {\r\n                    \r\n                    var addressValidationService = new com.eis.ssit.api.v1.services.impl.nsoftware.AddressValidationService();\r\n                    var accountInfo = new com.eis.ssit.api.v1.model.ShippingAccount();\r\n                    var developerKey = \"iJATqbdtX3MXaKDb\";\r\n                    var password = \"KrfNqeoAmV29tTNcYuh6Gfzbk\";\r\n                    accountInfo.setDeveloperKey(developerKey);\r\n                    accountInfo.setProviderPassword(password);\r\n                    \r\n                    accountInfo.setMeterNumber(\"151280994\");\r\n                    accountInfo.setAccountNumber(\"107005131\");\r\n                    accountInfo.setUrlString(\"https://ws.fedex.com:443/xml\");\r\n                    accountInfo.setCarrier(com.eis.ssit.api.v1.model.CarrierEnum.FEDEX);\r\n                    try {\r\n                        var matches = addressValidationService.validateAddress(accountInfo, shipToContactInfo.getAddress());\r\n                        \r\n                        if(matches != null && !matches.getEntryList().isEmpty() &&\r\n                            matches.isValid()){\r\n                            java.lang.System.out.println(\"Row Num:\"+modelImport.getRowNumber() +\" Valid Address \");\r\n                        } else {\r\n                            for(var b = 0; b < matches.getEntryList(); b++) {\r\n                                var r = matches.getEntryList().get(b);\r\n                                var a = r.getAddress();\r\n                                java.lang.System.out.println(\"Address1:\" + a.getAddress1());\r\n                                java.lang.System.out.println(\"Address2:\" + a.getAddress2());\r\n                                java.lang.System.out.println(\"City:\" + a.getCity());\r\n                                java.lang.System.out.println(\"State:\" + a.getState());\r\n                                java.lang.System.out.println(\"zip5:\" + a.getZip5());\r\n                                java.lang.System.out.println(\"zip4:\" + a.getZip4());\r\n                                java.lang.System.out.println(\"ValidationMessage:\" + r.getValidationMessage());\r\n                                java.lang.System.out.println(\"Residential Status:\" + r.getResidentialStatus());\r\n                                java.lang.System.out.println(\"Quality:\" + r.getQuality());\r\n                                java.lang.System.out.println(\"Change Type:\" + r.getChangeType());\r\n                                java.lang.System.out.println(\"Is Valid:\" + matches.isValid());\r\n                                \r\n                                \r\n                                rowErrors.add(r.getValidationMessage());\r\n                            }\r\n                            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n                        }\r\n                    } catch(e) {\r\n                        java.lang.System.out.println(\"Exception Row Num:\"+modelImport.getRowNumber() +\" Invalid Address \");\r\n                        modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n                        rowErrors.add(\"Address Validation Error:\"+e.javaException.message);\r\n                    }\r\n                \r\n                }\r\n                */\r\n\r\n                if (!isBlank(sanNumber)) {\r\n                    validateSANAddress(shipToContactInfo, sanNumber, rowErrors, modelImport);\r\n                }\r\n                salesOrder.getHeader().getShipToContacts().add(shipToContactInfo);\r\n                var billToContactInfo = getCustomerContactInfo(customer, \"billto\");\r\n                var buyerContactInfo = getCustomerContactInfo(customer, \"contact\");\r\n                salesOrder.getHeader().setBuyerContactInfo(buyerContactInfo);\r\n                salesOrder.getHeader().setBillToContactInfo(billToContactInfo);\r\n                salesOrder.getHeader().setOrderNumber(invoiceNumber);\r\n                setCarrierAndService(salesOrder, carrierCode, rowErrors, modelImport);\r\n                if (rowErrors.size() > 0) {\r\n                    rowValid = false;\r\n                }\r\n                salesOrder.getHeader().setCreateDate(getDate(date));\r\n                salesOrder.getHeader().setPurchaseDate(getDate(date));\r\n                salesOrder.getHeader().setSalesChannel(customer.getType());\r\n                salesOrder.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.OPEN);\r\n                salesOrder.getHeader().setOrderLookUpKey(salesOrder.getHeader().getOrderNumber());\r\n                salesOrder.setRefName(salesOrder.getHeader().getOrderNumber() + \":\" + java.lang.System.nanoTime());\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getRowsForOrder(detailSheet, invoiceNumber) {\r\n    var orderLineRows = new java.util.ArrayList();\r\n    var detailRow;\r\n    var detailCell;\r\n\r\n    var detailRows; // No of rows\r\n    detailRows = detailSheet.getLastRowNum();\r\n\r\n    var detailCols = 0; // No of columns\r\n    var detaiTmp = 0;\r\n\r\n    // This trick ensures that we get the data properly even if it doesn't start from first few rows\r\n    for (var i = 0; i < 10 || i <= detailRows; i++) {\r\n        detailRow = detailSheet.getRow(i);\r\n        if (detailRow !== null) {\r\n            detailTmp = detailSheet.getRow(i).getPhysicalNumberOfCells();\r\n            if (detailTmp > detailCols) detailCols = detailTmp;\r\n        }\r\n    }\r\n\r\n    for (var r = 0; r <= detailRows; r++) {\r\n        detailRow = detailSheet.getRow(r);\r\n        if (detailRow !== null && !isRowEmpty(detailRow)) {\r\n\r\n            detailCell = detailRow.getCell(2);\r\n            if (detailCell !== null) {\r\n                if (String(invoiceNumber) === String(getCellValue(detailCell))) {\r\n                    orderLineRows.add(detailRow);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return orderLineRows;\r\n}\r\n\r\n\r\n\r\nfunction handleXLSXFiles(inputStream) {\r\n    var wb = org.apache.poi.ss.usermodel.WorkbookFactory.create(inputStream);\r\n\r\n    var headerSheet = wb.getSheetAt(0);\r\n    var detailSheet = wb.getSheetAt(1);\r\n\r\n\r\n    var row;\r\n    var cell;\r\n\r\n    var rows; // No of rows\r\n    rows = headerSheet.getLastRowNum();\r\n\r\n    var cols = 0; // No of columns\r\n    var tmp = 0;\r\n\r\n    // This trick ensures that we get the data properly even if it doesn't start from first few rows\r\n    for (var i = 0; i < 10 || i <= rows; i++) {\r\n        row = headerSheet.getRow(i);\r\n        if (row !== null) {\r\n            tmp = headerSheet.getRow(i).getPhysicalNumberOfCells();\r\n            if (tmp > cols) cols = tmp;\r\n        }\r\n    }\r\n    var successCount = 0;\r\n    var errorCount = 0;\r\n    var warningCount = 0;\r\n    var rowErrors = null;\r\n    var rowValid = true;\r\n    var rowWarn = false;\r\n    java.lang.System.out.println(\"Num Rows:\" + rows);\r\n    var invoiceNumberList = new java.util.ArrayList();\r\n    for (var r = 0; r <= rows; r++) {\r\n        row = headerSheet.getRow(r);\r\n\r\n        rowErrors = new java.util.ArrayList();\r\n        rowValid = true;\r\n        if (r > 0 && row !== null && !isRowEmpty(row)) {\r\n            var identifier = row.getCell(0) !== null ? getCellValue(row.getCell(0)) : \"NA\";\r\n            var salesOrder = new com.eis.ssit.api.v1.model.SalesOrder();\r\n            var modelImport = new com.eis.core.api.v1.model.importobjects.ModelImport();\r\n            modelImport.setModelType(com.eis.core.api.v1.model.importobjects.ModelImportObjectType.SalesOrder);\r\n            modelImport.setRefName(\"SalesOrder-\" + identifier + \"-\" + java.lang.System.nanoTime());\r\n            modelImport.setDisplayName(\"SalesOrder-\" + identifier);\r\n            modelImport.setBaseModel(salesOrder);\r\n            modelImport.setRowNumber(r + 1);\r\n            modelImport.setModelImportResult(importResults.constructObjectReference());\r\n\r\n            var invoiceNumber = row.getCell(0) !== null ? getCellValue(row.getCell(0)) : \"\";\r\n            var publisherCode = row.getCell(1) !== null ? getCellValue(row.getCell(1)) : \"\";\r\n            var carrierCode = row.getCell(2) !== null ? getCellValue(row.getCell(2)) : \"\";\r\n            var date = row.getCell(3) !== null ? getCellValue(row.getCell(3)) : \"\";\r\n            var addressLine1 = row.getCell(4) !== null ? getCellValue(row.getCell(4)) : \"\";\r\n            var addressLine2 = row.getCell(5) !== null ? getCellValue(row.getCell(5)) : \"\";\r\n            var addressLine3 = row.getCell(6) !== null ? getCellValue(row.getCell(6)) : \"\";\r\n            var addressLine4 = row.getCell(7) !== null ? getCellValue(row.getCell(7)) : \"\";\r\n            var addressLine5 = row.getCell(8) !== null ? getCellValue(row.getCell(8)) : \"\";\r\n            var city = row.getCell(9) !== null ? getCellValue(row.getCell(9)) : \"\";\r\n            var state = row.getCell(10) !== null ? getCellValue(row.getCell(10)) : \"\";\r\n\r\n            var postalCode = row.getCell(11) !== null ? getCellValue(row.getCell(11)) : \"\";\r\n            var country = row.getCell(12) !== null ? getCellValue(row.getCell(12)) : \"\";\r\n            var poNumber = row.getCell(13) !== null ? getCellValue(row.getCell(13)) : \"\";\r\n            var sanNumber = row.getCell(14) !== null ? getCellValue(row.getCell(14)) : \"\";\r\n            var billToNumber = row.getCell(15) !== null ? getCellValue(row.getCell(15)) : \"\";\r\n\r\n\r\n            rowErrors.addAll(validateHeaderRow(invoiceNumber, publisherCode, carrierCode,\r\n                date, addressLine1, addressLine2, addressLine3, city, state, postalCode, country, r + 1));\r\n            if (rowErrors.size() > 0) {\r\n                rowValid = false;\r\n            } else {\r\n\r\n\r\n                if (!isBlank(sanNumber)) {\r\n                    var refSANNumber = new com.eis.core.api.v1.model.Reference();\r\n                    refSANNumber.setName(\"SANNumber\");\r\n                    refSANNumber.setValue(sanNumber);\r\n                    refSANNumber.setType(\"String\");\r\n                    salesOrder.getReferenceData().add(refSANNumber);\r\n                }\r\n\r\n                if (!isBlank(poNumber)) {\r\n                    var refPONumber = new com.eis.core.api.v1.model.Reference();\r\n                    refPONumber.setName(\"PONumber\");\r\n                    refPONumber.setValue(poNumber);\r\n                    refPONumber.setType(\"String\");\r\n                    salesOrder.getReferenceData().add(refPONumber);\r\n                }\r\n\r\n                if (!isBlank(billToNumber)) {\r\n                    var refBillToNumber = new com.eis.core.api.v1.model.Reference();\r\n                    refBillToNumber.setName(\"BillToNumber\");\r\n                    refBillToNumber.setValue(billToNumber);\r\n                    refBillToNumber.setType(\"String\");\r\n                    salesOrder.getReferenceData().add(refBillToNumber);\r\n                }\r\n\r\n\r\n                buildSalesOrder(invoiceNumber, publisherCode, carrierCode, date, addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, city, state, postalCode, country, poNumber, sanNumber, billToNumber, rowErrors, salesOrder, \"xlsx\", modelImport, invoiceNumberList);\r\n\r\n                salesOrder.getHeader().setRunCalculations(false);\r\n\r\n                if (row.getPhysicalNumberOfCells() > 16) {\r\n                    var bAddressLine1 = getCellValue(row.getCell(16));\r\n                    var bAddressLine2 = row.getCell(17) !== null ? getCellValue(row.getCell(17)) : \"\";\r\n                    var bAddressLine3 = row.getCell(18) !== null ? getCellValue(row.getCell(18)) : \"\";\r\n                    var bAddressLine4 = row.getCell(19) !== null ? getCellValue(row.getCell(19)) : \"\";\r\n                    var bAddressLine5 = row.getCell(20) !== null ? getCellValue(row.getCell(20)) : \"\";\r\n                    var bCity = row.getCell(21) !== null ? getCellValue(row.getCell(21)) : \"\";\r\n                    var bState = row.getCell(22) !== null ? getCellValue(row.getCell(22)) : \"\";\r\n\r\n                    var bPostalCode = row.getCell(23) !== null ? getCellValue(row.getCell(23)) : \"\";\r\n                    var bCountry = row.getCell(24) !== null ? getCellValue(row.getCell(24)) : \"\";\r\n\r\n\r\n                    var billToContactInfo = buildContactInfoFromXLSX(bAddressLine1, bAddressLine2, bAddressLine3, bAddressLine4, bAddressLine5, bCity, bState, bPostalCode, bCountry, salesOrder.getCustomer(), rowErrors, modelImport);\r\n                    var client = salesOrder.getClient();\r\n                    salesOrder.getHeader().setBillToContactInfo(billToContactInfo);\r\n                    var tax = row.getCell(25) !== null ? getCellValue(row.getCell(25)) : \"\";\r\n                    if (!isBlank(tax)) {\r\n                        salesOrder.getHeader().setTaxAmount(tax);\r\n                    }\r\n                    var shippingCost = row.getCell(26) !== null ? getCellValue(row.getCell(26)) : \"\";\r\n                    if (!isBlank(shippingCost)) {\r\n                        salesOrder.getHeader().setShippingCharges(shippingCost);\r\n                    }\r\n                    var comments = row.getCell(27) !== null ? getCellValue(row.getCell(27)) : \"\";\r\n                    if (!isBlank(comments)) {\r\n                        var note = new com.eis.core.api.v1.model.Note();\r\n                        note.setText(comments);\r\n                        note.setDateTimeCreated(new java.util.Date());\r\n                        note.setAuthor(userId);\r\n                        note.setType(\"INFO\");\r\n                        salesOrder.getNotes().add(note);\r\n                    }\r\n\r\n                    var enhancedPlusRef = new com.eis.core.api.v1.model.Reference();\r\n                    enhancedPlusRef.setName(\"EnhancedPlus\");\r\n                    enhancedPlusRef.setValue(\"Y\");\r\n                    enhancedPlusRef.setType(\"String\");\r\n                    salesOrder.getReferenceData().add(enhancedPlusRef);\r\n\r\n                }\r\n                if (rowErrors.size() === 0) {\r\n\r\n                    var detailRows = getRowsForOrder(detailSheet, invoiceNumber);\r\n                    var detailRowErrors = null;\r\n                    var detailRowValid = true;\r\n                    if (detailRows !== null && detailRows.size() > 0) {\r\n                        for (var detailR = 0; detailR < detailRows.size(); detailR++) {\r\n                            var detailRow = detailRows.get(detailR);\r\n                            detailRowErrors = new java.util.ArrayList();\r\n                            detailRowErrors = validateDetailRow(detailRow.getCell(0), detailRow.getCell(1), detailRow.getCell(2), detailR + 1);\r\n                            if (detailRowErrors.size() > 0) {\r\n                                rowValid = false;\r\n                                detailRowValid = false;\r\n                            } else {\r\n                                var bookCode = getCellValue(detailRow.getCell(0));\r\n\r\n                                var product = getProduct(bookCode);\r\n                                if (product !== null) {\r\n                                    var qty = getCellValue(detailRow.getCell(1));\r\n                                    var invoiceNumber = getCellValue(detailRow.getCell(2));\r\n                                    var salesOrderLine = new com.eis.ssit.api.v1.model.SalesOrderLine();\r\n                                    salesOrderLine.setItemQty(qty);\r\n                                    salesOrderLine.setSystemCatalogProductIdentifier(product.getProductIdentifier());\r\n                                    salesOrderLine.setItemTitle(product.getTitle());\r\n                                    var shipToContactInfo = salesOrder.getHeader().getShipToContacts().get(0);\r\n                                    salesOrderLine.setShipToAddressName(shipToContactInfo.getNameId());\r\n                                    salesOrderLine.setLineItemNumber(detailR + 1);\r\n\r\n                                    if (detailRow.getPhysicalNumberOfCells() > 3) {\r\n                                        var price = detailRow.getCell(3) !== null ? getCellValue(detailRow.getCell(3)) : \"\";\r\n                                        if (!isBlank(price)) {\r\n                                            salesOrderLine.setItemUnitPrice(price);\r\n                                        }\r\n                                        var discount = detailRow.getCell(4) !== null ? getCellValue(detailRow.getCell(4)) : \"\";\r\n                                        if (!isBlank(discount)) {\r\n                                            salesOrderLine.setItemUnitDiscount(discount);\r\n                                        }\r\n                                    }\r\n\r\n                                    salesOrder.getLineItems().add(salesOrderLine);\r\n                                } else {\r\n                                    detailRowErrors.add(\"No Product was found for Book Code:\" + bookCode);\r\n                                    rowValid = false;\r\n                                    detailRowValid = false;\r\n                                }\r\n                            }\r\n\r\n                            if (!detailRowValid) {\r\n                                var rowError = modelImport.getRowError();\r\n                                if (rowError === null) {\r\n                                    rowError = new com.eis.core.api.v1.model.importobjects.RowError(r + 1,\r\n                                        detailRowErrors, \"\");\r\n                                    modelImport.setRowError(rowError);\r\n                                } else {\r\n                                    rowError.getErrorMessages().addAll(detailRowErrors);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        var rowError = modelImport.getRowError();\r\n                        detailRowErrors = new java.util.ArrayList();\r\n                        rowErrors.add(\"No Detail Rows were provided for Invoice:\" + invoiceNumber);\r\n                        if (rowError === null) {\r\n                            rowError = new com.eis.core.api.v1.model.importobjects.RowError(r + 1,\r\n                                detailRowErrors, \"\");\r\n                            modelImport.setRowError(rowError);\r\n                        } else {\r\n                            rowError.getErrorMessages().addAll(detailRowErrors);\r\n                        }\r\n\r\n                    }\r\n\r\n                } else {\r\n                    rowValid = false;\r\n                    if (modelImport.getStatus() === com.eis.core.api.v1.model.importobjects.ModelImportStatus.Warning) {\r\n                        rowWarn = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rowValid && salesOrder.getLineItems().size() > 0) {\r\n                modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Success);\r\n                successCount = successCount + 1;\r\n                salesOrder.getHeader().setTotalItemsSold(salesOrder.getLineItems().size());\r\n                invoiceNumberList.add(salesOrder.getHeader().getOrderNumber() + \"-\" + salesOrder.getCustomer().getRefName());\r\n                importResults.setSuccessCount(successCount);\r\n\r\n\r\n                //salesOrderService.save(salesOrder);\r\n            } else {\r\n                if (rowWarn) {\r\n                    modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Warning);\r\n                    warningCount = warningCount + 1;\r\n                    importResults.setWarningCount(warningCount);\r\n                } else {\r\n                    modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n                    errorCount = errorCount + 1;\r\n                    importResults.setErrorCount(errorCount);\r\n                }\r\n                var rowError = modelImport.getRowError();\r\n                if (rowError === null) {\r\n                    rowError = new com.eis.core.api.v1.model.importobjects.RowError(r + 1,\r\n                        rowErrors, \"\");\r\n                    modelImport.setRowError(rowError);\r\n                } else {\r\n                    rowError.getErrorMessages().addAll(rowErrors);\r\n                }\r\n\r\n                importResults.getRowErrors().add(rowError);\r\n\r\n            }\r\n            modelImport = modelImportService.save(modelImport);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction handleCSVFiles(inputStream, importResults) {\r\n    var br = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));\r\n    var csvReader = csvPackage.CSVReader(br);\r\n    var fields = [];\r\n    var rowNum = 1;\r\n    var headerRowNum = 1;\r\n    var errorCount = 0;\r\n    var warningCount = 0;\r\n    var successCount = 0;\r\n    var salesOrder = null;\r\n    var modelImport = null;\r\n    var detailRowErrors = new java.util.ArrayList();\r\n    var detailRowValid = true;\r\n    var rowValid = true;\r\n    var rowErrors = new java.util.ArrayList();\r\n    var rowWarn = false;\r\n    var invoiceNumberList = new java.util.ArrayList();\r\n    while (fields !== null) {\r\n        fields = csvReader.readNext();\r\n        if (rowNum === 1 || (fields !== null && (fields.length >= 1 && !isBlank(fields[0])))) {\r\n            var rowIndicator = removeWhiteSpace(fields[0]);\r\n\r\n            if (rowIndicator !== 'H' && rowIndicator !== 'D') {\r\n                rowErrors.add(\"Row was specificed with first column as 'H' or 'D'\");\r\n                rowValid = false;\r\n\r\n            } else {\r\n\r\n                if (rowIndicator === 'H') {\r\n                    if (salesOrder !== null && modelImport !== null) {\r\n\r\n                        modelImport.setRefName(\"SalesOrder-\" + salesOrder.getHeader().getOrderNumber() + \"-\" + java.lang.System.nanoTime());\r\n                        modelImport.setDisplayName(\"SalesOrder\" + salesOrder.getHeader().getOrderNumber());\r\n                        if (rowValid && salesOrder.getLineItems().size() > 0) {\r\n                            modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Success);\r\n                            successCount = successCount + 1;\r\n                            salesOrder.getHeader().setTotalItemsSold(salesOrder.getLineItems().size());\r\n                            importResults.setSuccessCount(successCount);\r\n                            invoiceNumberList.add(salesOrder.getHeader().getOrderNumber() + \"-\" + salesOrder.getCustomer().getRefName());\r\n\r\n                        } else {\r\n                            if (rowWarn) {\r\n                                modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Warning);\r\n                                warningCount = warningCount + 1;\r\n                                importResults.setWarningCount(warningCount);\r\n                            } else {\r\n                                modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n                                errorCount = errorCount + 1;\r\n                                importResults.setErrorCount(errorCount);\r\n                            }\r\n\r\n                            var rowError = modelImport.getRowError();\r\n                            if (rowError === null) {\r\n\r\n                                rowError = new com.eis.core.api.v1.model.importobjects.RowError(headerRowNum,\r\n                                    rowErrors, \"\");\r\n                                modelImport.setRowError(rowError);\r\n                            } else {\r\n                                rowError.getErrorMessages().addAll(rowErrors);\r\n                            }\r\n\r\n                            importResults.getRowErrors().add(rowError);\r\n\r\n\r\n                        }\r\n\r\n                        modelImport.setBaseModel(salesOrder);\r\n                        modelImport = modelImportService.save(modelImport);\r\n                    }\r\n\r\n                    detailRowErrors = new java.util.ArrayList();\r\n                    rowErrors = new java.util.ArrayList();\r\n                    rowValid = true;\r\n                    headerRowNum = rowNum;\r\n                    detailRowValid = true;\r\n                    rowWarn = false;\r\n                    salesOrder = new com.eis.ssit.api.v1.model.SalesOrder();\r\n                    modelImport = new com.eis.core.api.v1.model.importobjects.ModelImport();\r\n                    modelImport.setModelType(com.eis.core.api.v1.model.importobjects.ModelImportObjectType.SalesOrder);\r\n                    modelImport.setRefName(\"SalesOrder-\" + java.lang.System.nanoTime());\r\n                    modelImport.setDisplayName(\"SalesOrder\");\r\n                    modelImport.setBaseModel(salesOrder);\r\n                    modelImport.setRowNumber(rowNum);\r\n                    modelImport.setModelImportResult(importResults.constructObjectReference());\r\n\r\n                    var invoiceNumber = removeWhiteSpace(fields[1]);\r\n                    var publisherCode = removeWhiteSpace(fields[2]);\r\n\r\n                    var carrierCode = removeWhiteSpace(fields[3]);\r\n                    var date = removeWhiteSpace(fields[5]);\r\n                    var addressLine1 = removeWhiteSpace(fields[6]);\r\n                    var addressLine2 = removeWhiteSpace(fields[7]);\r\n                    var addressLine3 = removeWhiteSpace(fields[8]);\r\n                    var addressLine4 = removeWhiteSpace(fields[9]);\r\n                    var addressLine5 = removeWhiteSpace(fields[10]);\r\n                    var city = removeWhiteSpace(fields[11]);\r\n                    var state = removeWhiteSpace(fields[12]);\r\n\r\n                    var postalCode = removeWhiteSpace(fields[13]);\r\n                    var country = removeWhiteSpace(fields[14]);\r\n                    var poNumber = removeWhiteSpace(fields[15])\r\n                    var sanNumber = removeWhiteSpace(fields[16])\r\n                    var billToNumber = removeWhiteSpace(fields[17]);\r\n                    rowErrors.addAll(validateHeaderRow(invoiceNumber, publisherCode, carrierCode,\r\n                        date, addressLine1, addressLine2, addressLine3, city, state, postalCode, country, rowNum));\r\n\r\n\r\n\r\n                    if (rowErrors.size() > 0) {\r\n                        rowValid = false;\r\n                    } else {\r\n\r\n                        if (!isBlank(sanNumber)) {\r\n                            var refSANNumber = new com.eis.core.api.v1.model.Reference();\r\n                            refSANNumber.setName(\"SANNumber\");\r\n                            refSANNumber.setValue(sanNumber);\r\n                            refSANNumber.setType(\"String\");\r\n                            salesOrder.getReferenceData().add(refSANNumber);\r\n                        }\r\n\r\n                        if (!isBlank(poNumber)) {\r\n                            var refPONumber = new com.eis.core.api.v1.model.Reference();\r\n                            refPONumber.setName(\"PONumber\");\r\n                            refPONumber.setValue(poNumber);\r\n                            refPONumber.setType(\"String\");\r\n                            salesOrder.getReferenceData().add(refPONumber);\r\n                        }\r\n\r\n                        if (!isBlank(billToNumber)) {\r\n                            var refBillToNumber = new com.eis.core.api.v1.model.Reference();\r\n                            refBillToNumber.setName(\"BillToNumber\");\r\n                            refBillToNumber.setValue(billToNumber);\r\n                            refBillToNumber.setType(\"String\");\r\n                            salesOrder.getReferenceData().add(refBillToNumber);\r\n                        }\r\n\r\n                        buildSalesOrder(invoiceNumber, publisherCode, carrierCode, date, addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, city, state, postalCode, country, poNumber, sanNumber, billToNumber, rowErrors, salesOrder, \"csv\", modelImport, invoiceNumberList);\r\n\r\n                        salesOrder.getHeader().setRunCalculations(false);\r\n\r\n\r\n                        if (fields.length > 18) {\r\n                            var bAddressLine1 = removeWhiteSpace(fields[18]);\r\n                            var bAddressLine2 = removeWhiteSpace(fields[19]);\r\n                            var bAddressLine3 = removeWhiteSpace(fields[20]);\r\n                            var bAddressLine4 = removeWhiteSpace(fields[21]);\r\n                            var bAddressLine5 = removeWhiteSpace(fields[22]);\r\n                            var bCity = removeWhiteSpace(fields[23]);\r\n                            var bState = removeWhiteSpace(fields[24]);\r\n\r\n                            var bPostalCode = removeWhiteSpace(fields[25]);\r\n                            var bCountry = removeWhiteSpace(fields[26]);\r\n\r\n\r\n                            var billToContactInfo = buildContactInfoFromCSV(bAddressLine1, bAddressLine2, bAddressLine3, bAddressLine4, bAddressLine5, bCity, bState, bPostalCode, bCountry, salesOrder.getCustomer(), rowErrors, modelImport);\r\n                            var client = salesOrder.getClient();\r\n                            salesOrder.getHeader().setBillToContactInfo(billToContactInfo);\r\n                            var tax = removeWhiteSpace(fields[27]);\r\n                            if (!isBlank(tax)) {\r\n                                salesOrder.getHeader().setTaxAmount(tax);\r\n                            }\r\n                            var shippingCost = removeWhiteSpace(fields[28]);\r\n                            if (!isBlank(shippingCost)) {\r\n                                salesOrder.getHeader().setShippingCharges(shippingCost);\r\n                            }\r\n                            var comments = removeWhiteSpace(fields[29]);\r\n                            if (!isBlank(comments)) {\r\n                                var note = new com.eis.core.api.v1.model.Note();\r\n                                note.setText(comments);\r\n                                note.setDateTimeCreated(new java.util.Date());\r\n                                note.setAuthor(userId);\r\n                                note.setType(\"INFO\");\r\n                                salesOrder.getNotes().add(note);\r\n                            }\r\n\r\n                            var enhancedPlusRef = new com.eis.core.api.v1.model.Reference();\r\n                            enhancedPlusRef.setName(\"EnhancedPlus\");\r\n                            enhancedPlusRef.setValue(\"Y\");\r\n                            enhancedPlusRef.setType(\"String\");\r\n                            salesOrder.getReferenceData().add(enhancedPlusRef);\r\n                        }\r\n\r\n\r\n\r\n                        if (rowErrors.size() > 0) {\r\n                            rowValid = false;\r\n                            if (modelImport.getStatus() === com.eis.core.api.v1.model.importobjects.ModelImportStatus.Warning) {\r\n                                rowWarn = true;\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (rowValid && rowIndicator === 'D') {\r\n                    detailRowErrors = validateDetailRow(removeWhiteSpace(fields[1]), removeWhiteSpace(fields[2]), removeWhiteSpace(fields[3]), rowNum);\r\n                    if (detailRowErrors.size() > 0) {\r\n                        rowValid = false;\r\n                        detailRowValid = false;\r\n                    } else {\r\n                        var bookCode = removeWhiteSpace(fields[1]);\r\n                        var qty = removeWhiteSpace(fields[2]);\r\n                        var invoiceNumber = removeWhiteSpace(fields[3]);\r\n\r\n                        if (invoiceNumber !== salesOrder.getHeader().getOrderNumber()) {\r\n                            detailRowErrors.add(\"The invoice number:\" + invoiceNumber + \" on the detail row did not match the invoice number:\" + salesOrder.getHeader().getOrderNumber() + \" on the header row.\");\r\n                            rowValid = false;\r\n                            detailRowValid = false;\r\n\r\n                        } else {\r\n\r\n\r\n                            var product = getProduct(bookCode);\r\n                            if (product !== null && product.isActive()) {\r\n\r\n                                var salesOrderLine = new com.eis.ssit.api.v1.model.SalesOrderLine();\r\n                                salesOrderLine.setItemQty(qty);\r\n                                salesOrderLine.setSystemCatalogProductIdentifier(product.getProductIdentifier());\r\n                                java.lang.System.out.println(\"SalesOrder:\" + salesOrder);\r\n                                var shipToContactInfo = salesOrder.getHeader().getShipToContacts().get(0);\r\n                                salesOrderLine.setItemTitle(product.getTitle());\r\n                                salesOrderLine.setShipToAddressName(shipToContactInfo.getNameId());\r\n                                salesOrderLine.setLineItemNumber(rowNum + 1);\r\n\r\n                                if (fields.length > 4) {\r\n                                    var price = removeWhiteSpace(fields[4]);\r\n                                    if (!isBlank(price)) {\r\n                                        salesOrderLine.setItemUnitPrice(price);\r\n                                    }\r\n                                    var discount = removeWhiteSpace(fields[5]);\r\n                                    if (!isBlank(discount)) {\r\n                                        salesOrderLine.setItemUnitDiscount(discount);\r\n                                    }\r\n                                }\r\n\r\n                                salesOrder.getLineItems().add(salesOrderLine);\r\n                            } else if (product !== null && !product.isActive()) {\r\n                                detailRowErrors.add(\"Product with productIdentifier:\" + bookCode + \" is not currently active.\");\r\n                                rowValid = false;\r\n                                rowWarn = true;\r\n                                detailRowValid = false;\r\n                            } else {\r\n                                detailRowErrors.add(\"No Product was found for Book Code:\" + bookCode);\r\n                                rowValid = false;\r\n                                detailRowValid = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!detailRowValid) {\r\n                        var rowError = modelImport.getRowError();\r\n                        if (rowError === null) {\r\n                            rowError = new com.eis.core.api.v1.model.importobjects.RowError(rowNum,\r\n                                detailRowErrors, \"\");\r\n                            modelImport.setRowError(rowError);\r\n                        } else {\r\n                            rowError.getErrorMessages().addAll(detailRowErrors);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        rowNum++;\r\n    }\r\n    \r\n    if (salesOrder !== null && modelImport !== null) {\r\n\r\n                modelImport.setRefName(\"SalesOrder-\" + salesOrder.getHeader().getOrderNumber() + \"-\" + java.lang.System.nanoTime());\r\n                modelImport.setDisplayName(\"SalesOrder\" + salesOrder.getHeader().getOrderNumber());\r\n                if (rowValid && salesOrder.getLineItems().size() > 0) {\r\n                    modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Success);\r\n                    successCount = successCount + 1;\r\n                    salesOrder.getHeader().setTotalItemsSold(salesOrder.getLineItems().size());\r\n                    importResults.setSuccessCount(successCount);\r\n                    invoiceNumberList.add(salesOrder.getHeader().getOrderNumber() + \"-\" + salesOrder.getCustomer().getRefName());\r\n\r\n                } else {\r\n                    if (rowWarn) {\r\n                        modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Warning);\r\n                        warningCount = warningCount + 1;\r\n                        importResults.setWarningCount(warningCount);\r\n                    } else {\r\n                        modelImport.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n                        errorCount = errorCount + 1;\r\n                        importResults.setErrorCount(errorCount);\r\n                    }\r\n\r\n                    var rowError = modelImport.getRowError();\r\n                    if (rowError === null) {\r\n\r\n                        rowError = new com.eis.core.api.v1.model.importobjects.RowError(headerRowNum,\r\n                            rowErrors, \"\");\r\n                        modelImport.setRowError(rowError);\r\n                    } else {\r\n                        rowError.getErrorMessages().addAll(rowErrors);\r\n                    }\r\n\r\n                    importResults.getRowErrors().add(rowError);\r\n\r\n\r\n                }\r\n\r\n                modelImport.setBaseModel(salesOrder);\r\n                modelImport = modelImportService.save(modelImport);\r\n            }\r\n\r\n\r\n    csvReader.close();\r\n\r\n}\r\n\r\nif(importResults === null) {\r\n    var importResults = new com.eis.core.api.v1.model.importobjects.ModelImportResult();\r\n    importResults.setRefName(\"Sales order Import-\" + java.lang.System.nanoTime());\r\n    importResults.setUploadDate(new java.util.Date());\r\n    importResults.setDisplayName(\"SalesOrder Import-\" + new Date());\r\n    importResults.setFileName(fileName);\r\n    importResults.setImportUserId(userId);\r\n    importResults.setModelType(com.eis.core.api.v1.model.importobjects.ModelImportObjectType.SalesOrder);\r\n    importResults.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.New);\r\n    importResults.setState(com.eis.core.api.v1.model.importobjects.ModelImportState.Pending);\r\n    importResults.setModelImportType(com.eis.core.api.v1.model.importobjects.ModelImportType.Immediate);\r\n    importResults.setUpdateExistingObjects(updateObjects);\r\n    importResults.setDataDomain(\"com.pssc\");\r\n    modelImportResultService.save(importResults);\r\n}\r\n\r\nfileName = importResults.getFileName();\r\n\r\n\r\nvar validFileType = true;\r\nif (strEndsWith(fileName, \".csv\") || strEndsWith(fileName, \".CSV\") || strEndsWith(fileName, \".txt\") || strEndsWith(fileName, \".TXT\")) {\r\n    handleCSVFiles(inputStream, importResults);\r\n} else if (strEndsWith(fileName, \".xlsx\") || strEndsWith(fileName, \".XLSX\")) {\r\n    handleXLSXFiles(inputStream, importResults);\r\n} else {\r\n    var note = new com.eis.core.api.v1.model.Note();\r\n    note.setText(\"Invalid file type.  Only '.csv','.txt' and '.xlsx' files are allowed to be imported.\");\r\n    note.setDateTimeCreated(new java.util.Date());\r\n    note.setAuthor(userId);\r\n    note.setType(\"ERROR\");\r\n    importResults.setErrorCount(1);\r\n    importResults.getNotes().add(note);\r\n}\r\n\r\nif (importResults.getErrorCount() > 0) {\r\n    importResults.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Error);\r\n    importResults.setState(com.eis.core.api.v1.model.importobjects.ModelImportState.Uploaded);\r\n} else if (importResults.getWarningCount() > 0) {\r\n    importResults.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Warning);\r\n    importResults.setState(com.eis.core.api.v1.model.importobjects.ModelImportState.Uploaded);\r\n} else {\r\n    importResults.setStatus(com.eis.core.api.v1.model.importobjects.ModelImportStatus.Success);\r\n    importResults.setState(com.eis.core.api.v1.model.importobjects.ModelImportState.Uploaded);\r\n}\r\n\r\nmodelImportResultService.save(importResults);",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "salesOrderImporter",
    "refKey" : "1da2619ca15e7dedaea04db4b574df1d",
    "displayName" : "salesOrderImporter",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "salesOrderImporter" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1488407649067,
      "createUser" : "Michael Ingardia",
      "updateTs" : 1497401772354,
      "updateUser" : "Michael Ingardia"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "2f8ca332-127c-a1b5-ac97-b43923097831",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "fileName" : {
          "id" : null,
          "refName" : "fileName",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "fileName",
          "description" : null
        },
        "fileSystemEntryRef" : {
          "id" : null,
          "refName" : "fileSystemEntryRef",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "fileSystemEntryRef",
          "description" : null
        },
        "importResults" : {
          "id" : null,
          "refName" : "importResults",
          "type" : "Object",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "importResults",
          "description" : null
        },
        "inputStream" : {
          "id" : null,
          "refName" : "inputStream",
          "type" : "Object",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "inputStream",
          "description" : null
        },
        "updateObjects" : {
          "id" : null,
          "refName" : "updateObjects",
          "type" : "Boolean",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "updateObjects",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : { }
    },
    "scriptContextObjects" : {
      "clientService" : {
        "type" : "serviceBean",
        "name" : "clientService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "clientService",
        "parameterName" : null,
        "parameters" : { }
      },
      "correlationService" : {
        "type" : "serviceBean",
        "name" : "correlationService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "correlationService",
        "parameterName" : null,
        "parameters" : { }
      },
      "customerService" : {
        "type" : "serviceBean",
        "name" : "customerService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "customerService",
        "parameterName" : null,
        "parameters" : { }
      },
      "fileName" : {
        "type" : "scriptInputVariable",
        "name" : "fileName",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "fileName",
        "parameters" : { }
      },
      "fileSystemEntryRef" : {
        "type" : "scriptInputVariable",
        "name" : "fileSystemEntryRef",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "fileSystemEntryRef",
        "parameters" : { }
      },
      "fileSystemEntryService" : {
        "type" : "serviceBean",
        "name" : "fileSystemEntryService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "fileSystemEntryService",
        "parameterName" : null,
        "parameters" : { }
      },
      "importResults" : {
        "type" : "scriptInputVariable",
        "name" : "importResults",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "importResults",
        "parameters" : { }
      },
      "inputStream" : {
        "type" : "scriptInputVariable",
        "name" : "inputStream",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "inputStream",
        "parameters" : { }
      },
      "modelImportResultService" : {
        "type" : "serviceBean",
        "name" : "modelImportResultService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "modelImportResultService",
        "parameterName" : null,
        "parameters" : { }
      },
      "modelImportService" : {
        "type" : "serviceBean",
        "name" : "modelImportService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "modelImportService",
        "parameterName" : null,
        "parameters" : { }
      },
      "productService" : {
        "type" : "serviceBean",
        "name" : "productService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "productService",
        "parameterName" : null,
        "parameters" : { }
      },
      "salesOrderService" : {
        "type" : "serviceBean",
        "name" : "salesOrderService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "salesOrderService",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "siteService" : {
        "type" : "serviceBean",
        "name" : "siteService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "siteService",
        "parameterName" : null,
        "parameters" : { }
      },
      "updateObjects" : {
        "type" : "scriptInputVariable",
        "name" : "updateObjects",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "updateObjects",
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.pssc" ]
  },
  "functionType" : "utility",
  "inputs" : { },
  "result" : null,
  "active" : false,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "psscPolicy",
    "refKey" : "22e7f6d68fc06c44c421c03e2befa255",
    "displayName" : "psscPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "psscPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1487353098752,
      "createUser" : "Admin Admin",
      "updateTs" : 1496696084991,
      "updateUser" : "Michael Ingardia"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "336581c4-4553-4b95-94dc-a484d603c795",
    "allowedPackages" : {
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1events" : "com.eis.core.api.v1.events",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeisextsvrskwiapiv1model" : "com.eis.extsvrs.kwi.api.v1.model",
      "comeisextsvrskwiapiv1services" : "com.eis.extsvrs.kwi.api.v1.services",
      "comeisextsvrsquickbooksapiv1dao" : "com.eis.extsvrs.quickbooks.api.v1.dao",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisextsvrssnapfulfilapiv1dao" : "com.eis.extsvrs.snapfulfil.api.v1.dao",
      "comeisextsvrssnapfulfilapiv1model" : "com.eis.extsvrs.snapfulfil.api.v1.model",
      "comeisextsvrssnapfulfilapiv1services" : "com.eis.extsvrs.snapfulfil.api.v1.services",
      "comeisextsvrssnapfulfilapiv1util" : "com.eis.extsvrs.snapfulfil.api.v1.util",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEnginecolonybrandsactions" : "com.eis.oms.inventory.allocationEngine.colonybrands.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventoryallocationEnginepssc" : "com.eis.oms.inventory.allocationEngine.pssc",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1events" : "com.eis.ssit.api.v1.events",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1servicesimplnsoftware" : "com.eis.ssit.api.v1.services.impl.nsoftware",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comhazelcast" : "com.hazelcast",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javamath" : "java.math",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javatimetemporal" : "java.time.temporal",
      "javautil" : "java.util",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapachepoihssf" : "org.apache.poi.hssf",
      "orgapachepoissformat" : "org.apache.poi.ss.format",
      "orgapachepoissusermodel" : "org.apache.poi.ss.usermodel",
      "orgapachepoixssfusermodel" : "org.apache.poi.xssf.usermodel",
      "orgapachevelocity" : "org.apache.velocity",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkvalidationbeanvalidation" : "org.springframework.validation.beanvalidation"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.pssc" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "salesOrderImporter",
    "refId" : "2f8ca332-127c-a1b5-ac97-b43923097831",
    "refKey" : "1da2619ca15e7dedaea04db4b574df1d",
    "displayName" : "salesOrderImporter",
    "dataDomain" : "com.pssc",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "psscPolicy",
    "refId" : "336581c4-4553-4b95-94dc-a484d603c795",
    "refKey" : "22e7f6d68fc06c44c421c03e2befa255",
    "displayName" : "psscPolicy",
    "dataDomain" : "com.pssc",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "scriptrunner@pssc.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.gnc" ]
}