{
  "refName" : "invoiceForShipments",
  "refKey" : "44a6a25377251ac98e65b47bd8df0be5",
  "displayName" : "invoiceForShipments",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1536915897605,
    "createUser" : "Lakshmi Ashok Kumar",
    "updateTs" : 1548240621777,
    "updateUser" : "Lakshmi Ashok Kumar"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "a75ff56c-2754-4885-9b40-337a263366bd",
  "script" : "var log = org.slf4j.LoggerFactory.getLogger(\"invoiceForShipments:\");\n\nfunction getCost(line)\n{\n        var cost = scriptUtils.getReferenceValueFromReferences(line.getReferenceData(),\n            \"cost\");\n        if (cost === null) {\n            throw new java.lang.IllegalStateException(\"Error: No cost was found on line:\" + line.getOmsLineNumber()\n                                                + \" for product \" + line.getSystemItemId());            \n        } \n        return cost;\n}\n\nfunction buildInvoiceFromShipmentUsingPricebook(shipment, shipmentRequest,salesOrder) {\n        var invoiceRefName = \"Invoice for Shipment-\" + shipment.getRefName();\n        var invoiceUsingPB = invoiceDAO.getByRefName(invoiceRefName, shipment.getDataDomain());\n        var salesOrderDate = null;\n        if (invoiceUsingPB === null) {\n            invoiceUsingPB = new com.eis.ssit.api.v1.model.Invoice();\n\n            invoiceUsingPB.setRefName(invoiceRefName);\n            invoiceUsingPB.setHeader(new com.eis.ssit.api.v1.model.InvoiceHeader());\n\n            if (salesOrder != null) {\n                var salesOrderHeader = salesOrder.getHeader();\n                invoiceUsingPB.getHeader().setSalesOrderNumber(salesOrder.getHeader().getOrderNumber());\n                invoiceUsingPB.getHeader().setPurchaseOrderNumber(salesOrder.getHeader().getOriginalOrderNumber());\n                invoiceUsingPB.getHeader().setSalesOrderDate(salesOrderHeader.getPurchaseDate());\n                invoiceUsingPB.getHeader().setPurchaseOrderDate(salesOrderHeader.getPurchaseDate());\n                invoiceUsingPB.getHeader().setSalesOrderId(salesOrder.getId());\n                invoiceUsingPB.setPayments(salesOrder.getPayments());\n                salesOrderDate = salesOrderHeader.getPurchaseDate();\n            }\n            var totalShip = 0;\n            var totalHandling = 0;\n            var totalQty = 0;\n            var totalLineAmount = 0;\n            var hasDiscounts = false;\n            var discountsTakenAtLineLevel = false;\n\n            if (shipmentRequest.getHeader().getAllocatedDiscountAmount() !== 0) {\n                hasDiscounts = true;\n            }\n\n                var vendor = vendorService.getByRefName\n                    (shipment.getFromOrganization().getRefName(), shipment.getDataDomain());\n                    \n                    \n                var tradeAgreements = tradeAgreementService.getList(0, 10, \"buyer.refName:GNC-Organization-&&seller.refName:\"+vendor.getRefName(), null, null);\n                \n                var tradeAgreement= tradeAgreements.get(0);\n                if(tradeAgreement === null) {\n                    throw new com.eis.core.api.v1.exception.B2BTransactionFailed(\"No Trade Aggreement Set up With Vendor:\"+vendor.getRefName());\n                }\n                var priceBookRefName = tradeAgreement.getPriceBook().getRefName();\n                var shippingCostsTakenAtLineLevel = false;\n                var handlingCostsTakenAtLineLevel = false;\n                var taxTakenAtLineLevel = false;\n                var packageIterator = shipment.getPackages().iterator();\n                while(packageIterator.hasNext()) {\n                    var p = packageIterator.next();\n                    for (var y = 0; y < p.getLineItems().size(); y++) {\n                        var pl = p.getLineItems().get(y);\n                        for (var z = 0; z < shipmentRequest.getLineItems().size(); z++) {\n                            var srLine = shipmentRequest.getLineItems().get(z);\n                            //need only line items from this shipment\n                            if (srLine.getShipmentIds().contains(shipment.getId())\n                                    && pl.getLineUID().equals(srLine.getLineUID())) {\n\n                                var lineItem = new com.eis.ssit.api.v1.model.InvoiceLine();\n                                lineItem.setAssignedIdentification(srLine.getSystemItemId());\n                                lineItem.setPOReference(srLine.getPoItemId());\n                                var productIdentifier = srLine.getSystemItemId();\n\n                                var unitPrice = 0;\n                                var item = null;\n                                var itemIdentifier = srLine.getSystemItemId();\n                                \n\n                                if (tradeAgreement != null) {\n                                    var priceBookEntries = priceBookEntryService.getList(0, 10, \"priceBookRef.refName:\"+priceBookRefName+\"&&skuId:\"+srLine.getSystemItemId(), null, null);\n                                    var priceBookEntry = priceBookEntries.get(0);\n\t\t\t \t    var price = priceBookEntry.getBaseAmount();\n\t\t\t\t    unitPrice = getCost(srLine);\n                                    lineItem.setItemAmount(new java.math.BigDecimal(price).setScale(2, java.math.BigDecimal.ROUND_UP));\n                                    // not really sure how unit cost differs from item amount,\n                                    // unless it really means cost not price\n                \t\t\t\t\tlineItem.setUnitCost(new java.math.BigDecimal(unitPrice).setScale(2, java.math.BigDecimal.ROUND_UP));\n                                }else{\n                                    //if tradeAgreement does not exist. Look up the price and price History\n                                    // from the Item\n                                    if (item !== null && item.getCurrentPriceBookEntry() !== null) {\n                                        var priceBookEntry = item.getCurrentPriceBookEntry();\n                                        var priceBookEntryResponse =\n                                                priceBookEntryDAO.getPriceOnEffectiveStartDate\n                                                        (priceBookEntry.getRefName(), salesOrderDate,\n                                                                priceBookEntry.getDataDomain());\n                                        unitPrice = getCost(srLine);\n                                        var price = priceBookEntryResponse.getAmount();\n                                        lineItem.setItemAmount(price.setScale(2, java.math.BigDecimal.ROUND_UP));\n                                        // not really sure how unit cost differs from item amount,\n                                        // unless it really means cost not price\n                                        lineItem.setUnitCost(new java.math.BigDecimal(unitPrice).setScale(2, java.math.BigDecimal.ROUND_UP));\n                                    } else {\n                                        throw new java.lang.IllegalStateException(\"Item \" + item.getRefName()\n                                                + \" doesn't have a reference under key \" + item.getId()\n                                                + \" in product \" + item.getProductIdentifier());\n                                    }\n                                }\n\n                                if (hasDiscounts && srLine.getItemUnitDiscount() != 0) {\n                                    discountsTakenAtLineLevel = true;\n                                }\n                                lineItem.setItemDiscount(new java.math.BigDecimal(srLine.getItemUnitDiscount()));\n                                lineItem.setItemDescription(srLine.getItemDescription());\n                                lineItem.setItemReference(srLine.getSystemItemId());\n                                lineItem.setProductId(srLine.getRetailerItemId());\n                                lineItem.setBuyerItemId(srLine.getRetailerItemId());\n                                lineItem.setBuyersStyleNumber(srLine.getRetailerItemSKU());\n                                lineItem.setVendorItemId(srLine.getSupplierItemSKU());\n                                lineItem.setUpcCode(srLine.getUpc());\n                                lineItem.setQty(pl.getItemQty());\n                                // hard code for now\n                                lineItem.setUnitForMeasurement(\"EA\");\n                                lineItem.setBasisOfUnitPriceCode(\"QT\");\n\n                                invoiceUsingPB.getLineItems().add(lineItem);\n                                if (java.lang.Double.compare(srLine.getItemUnitDiscount(), 0) == 0) {\n                                    totalLineAmount = new java.math.BigDecimal(totalLineAmount).add(new java.math.BigDecimal(pl.getItemQty())\n                                            .multiply(new java.math.BigDecimal(unitPrice)));\n                                } else {\n                                    totalLineAmount = new java.math.BigDecimal(totalLineAmount).add(new java.math.BigDecimal(pl.getItemQty())\n                                            .multiply(new java.math.BigDecimal(unitPrice).subtract(\n                                                    new java.math.BigDecimal(srLine.getItemUnitDiscount()))));\n                                }\n\n                                if (shipment.isChargeActualShippingCost()) {\n                                    //allocate from shipment request\n                                    if (!(java.lang.Double.compare(srLine.getAllocatedLineShippingCosts(), 0) == 0)) {\n                                        totalShip = totalShip\n                                                + ((pl.getItemQty() / srLine.getItemQty())\n                                                * srLine.getAllocatedLineShippingCosts());\n                                        shippingCostsTakenAtLineLevel = true;\n                                    }\n                                } else {\n                                    if (!(java.lang.Double.compare(srLine.getAllocatedLineShippingCharges(), 0) == 0)) {\n                                        totalShip = totalShip\n                                                + ((pl.getItemQty() / srLine.getItemQty())\n                                                * srLine.getAllocatedLineShippingCharges());\n                                        shippingCostsTakenAtLineLevel = true;\n                                    }\n                                }\n\n                                if (!(java.lang.Double.compare(srLine.getAllocatedLineHandlingCharges(), 0) == 0)) {\n                                    totalHandling = totalHandling\n                                            + ((pl.getItemQty() / srLine.getItemQty())\n                                            * srLine.getAllocatedLineHandlingCharges());\n                                    handlingCostsTakenAtLineLevel = true;\n                                }\n                                totalQty = totalQty + pl.getItemQty();\n                            }\n                        }\n                    }\n                }\n\n                //allocate shipping and handling by line qty then add to totals\n                var qtyFactor = totalQty / shipmentRequest.getHeader().getNumItems();\n                if (!shippingCostsTakenAtLineLevel &&\n                        !(java.lang.Double.compare(shipmentRequest.getHeader().getAllocatedShippingCharges(), 0) == 0)) {\n                    totalShip = totalShip + (qtyFactor\n                            * shipmentRequest.getHeader().getAllocatedShippingCharges());\n                }\n\n                if (!handlingCostsTakenAtLineLevel &&\n                        !(java.lang.Double.compare(shipmentRequest.getHeader().getAllocatedHandlingCharges(), 0) == 0)) {\n                    totalHandling = totalHandling + (qtyFactor\n                            * shipmentRequest.getHeader().getAllocatedHandlingCharges());\n                }\n\n                invoiceUsingPB.getHeader().setTotalAmountBeforeDiscount(new java.math.BigDecimal(totalLineAmount).doubleValue());\n                if (!(java.lang.Double.compare(shipmentRequest.getHeader().getAllocatedDiscountAmount(), 0) == 0)) {\n                    invoiceUsingPB.getHeader().setDiscountAmount(qtyFactor\n                            * shipmentRequest.getHeader().getAllocatedDiscountAmount());\n\n                    if (shipmentRequest.getHeader().getAllocatedDiscountAmount() > 0) {\n                        totalLineAmount = totalLineAmount.\n                                subtract(new java.math.BigDecimal(invoiceUsingPB.getHeader().getDiscountAmount()));\n                        invoiceUsingPB.getHeader().setTotalAmountAfterDiscount(totalLineAmount.floatValue());\n                    } else {\n                        totalLineAmount = totalLineAmount.\n                                add(new java.math.BigDecimal(invoiceUsingPB.getHeader().getDiscountAmount()));\n                        invoiceUsingPB.getHeader().setTotalAmountAfterDiscount(totalLineAmount.floatValue());\n                    }\n                }\n                invoiceUsingPB.getHeader().setShippingAmount(totalShip);\n                invoiceUsingPB.getHeader().setHandlingAmount(totalHandling);\n\n                var taxableAmount = new java.math.BigDecimal(totalLineAmount).floatValue();\n                //add in s&h if not excluded from tax to allocate tax...might someday replace w/ call to tax engine?\n                invoiceUsingPB.getHeader().setShippingHandlingTaxExcluded(\n                        shipmentRequest.getHeader().isShippingHandlingTaxExcluded());\n                if (!invoiceUsingPB.getHeader().isShippingHandlingTaxExcluded()) {\n                    taxableAmount = taxableAmount + totalHandling + totalShip;\n                }\n\n                if (shipmentRequest.getHeader().getAllocatedTax() != 0) {\n                    invoiceUsingPB.getHeader().setTaxAmount(shipmentRequest.getHeader().getAllocatedTax());\n                    invoiceUsingPB.getHeader().setTaxRate(shipmentRequest.getHeader().getTaxRate());\n                } else {\n                    if (!(java.lang.Double.compare(shipmentRequest.getHeader().getTaxRate(), 0) == 0)) {\n                        invoiceUsingPB.getHeader()\n                                .setTaxAmount(shipmentRequest.getHeader().getTaxRate() * taxableAmount);\n                        invoiceUsingPB.getHeader()\n                                .setTaxRate(shipmentRequest.getHeader().getTaxRate());\n                    }\n                }\n\n                var fulFillmentServicesTotal = 0;\n                if (shipmentRequest.getHeader().getFulfillmentServices() != null) {\n                    \n                    for (var p = 0; p < shipmentRequest.getHeader().getFulfillmentServices().size(); p++) {\n                        var fulfillmentService = shipmentRequest.getHeader().getFulfillmentServices().get(p);\n                        fulFillmentServicesTotal = fulFillmentServicesTotal + fulfillmentService.getFee();\n                    }\n                }\n\n                invoiceUsingPB.getHeader().setTotalServicesAmount(fulFillmentServicesTotal);\n                invoiceUsingPB.getHeader().setSubtotalBeforeTax(new java.math.BigDecimal(totalLineAmount).doubleValue()\n                        + invoiceUsingPB.getHeader().getHandlingAmount()\n                        + invoiceUsingPB.getHeader().getShippingAmount()\n                        + fulFillmentServicesTotal);\n                invoiceUsingPB.getHeader().setTotalAmountDue(new java.math.BigDecimal(totalLineAmount).doubleValue()\n                        + invoiceUsingPB.getHeader().getHandlingAmount()\n                        + invoiceUsingPB.getHeader().getShippingAmount()\n                        + invoiceUsingPB.getHeader().getTaxAmount() +\n                        +fulFillmentServicesTotal);\n                invoiceUsingPB.getHeader().setSalesChannel(shipment.getSalesChannel());\n                invoiceUsingPB.setDataDomain(shipment.getDataDomain());\n                invoiceUsingPB.setId(java.lang.String.valueOf(java.util.UUID.randomUUID()));\n                invoiceUsingPB.setClient(shipmentRequest.getClient());\n                invoiceUsingPB.getHeader().setReceivedDate(java.util.Calendar.getInstance().getTime());\n\n                var invoiceDue = java.util.Calendar.getInstance();\n                invoiceDue.setTime(new java.util.Date());\n                //get PaymentTerms for vendor\n                var paymentTerm = tradeAgreement.getDefaultPaymentTerms();\n                var paymentTermLength = paymentTerm.length;\n                var paymentTermDays = paymentTerm.substring(paymentTermLength-2 , paymentTermLength);\n\n                invoiceDue.add(java.util.Calendar.DATE, java.lang.String.valueOf(paymentTermDays));\n                invoiceUsingPB.getHeader().setDueDate(invoiceDue.getTime());\n                invoiceUsingPB.getHeader().setBillToContactInfo(shipmentRequest.getHeader().getBillToContactInfo());\n\n                var isPaid = false;\n                if (salesOrder != null && salesOrder.getHeader() != null) {\n                    var total = 0;\n                    for (var i = 0; i < salesOrder.getPayments().size(); i++) {\n                        var p = salesOrder.getPayments().get(i);\n\t\t\t\t\t\ttotal = total + p.getAmount();\n                    }\n                    isPaid = total >= salesOrder.getHeader().getTotalAmountDue();\n                }\n\n                if (isPaid) {\n                    invoiceUsingPB.getHeader().setStatus(com.eis.ssit.api.v1.model.InvoiceStatus.PAID);\n                } else if (salesOrder != null && salesOrder.getPayments().size() > 0) {\n                    invoiceUsingPB.getHeader().setStatus(com.eis.ssit.api.v1.model.InvoiceStatus.PARTIALLY_PAID);\n                } else {\n                    invoiceUsingPB.getHeader().setStatus(com.eis.ssit.api.v1.model.InvoiceStatus.OPEN);\n                }\n\n                invoiceUsingPB.getHeader().setInvoiceDate(java.util.Calendar.getInstance().getTime());\n\n                if (shipmentRequest.getHeader().getFromOrganization() != null) {\n                    invoiceUsingPB.getHeader()\n                            .setFromOrganization(shipmentRequest.getHeader().getFromOrganization());\n                    var invoiceFromOrg = organizationDAO.getByRefName(\n                            shipmentRequest.getHeader().getFromOrganization().getRefName(),\n                            shipmentRequest.getHeader().getFromOrganization().getDataDomain());\n\n                    if (invoiceFromOrg != null) {\n                        invoiceUsingPB.getHeader().setFromInvoiceContactInfo(\n                                com.eis.core.api.v1.model.Organization.getOrganizationContactInfo(invoiceFromOrg));\n                    } else {\n                        invoiceUsingPB.getHeader().setFromInvoiceContactInfo\n                                (shipmentRequest.getHeader().getFromContactInfo());\n                    }\n\n                } else {\n                    invoiceUsingPB.getHeader().setFromInvoiceContactInfo\n                            (shipmentRequest.getHeader().getFromContactInfo());\n                }\n\n                if (shipmentRequest.getHeader().getToOrganization() != null) {\n                    invoiceUsingPB.getHeader().setToOrganization(shipmentRequest.getHeader().getToOrganization());\n                }\n\n                if (shipment.getMarkForContactInfo() != null) {\n                    invoiceUsingPB.getHeader().setMarkForContactInfo(shipment.getMarkForContactInfo());\n                }\n\n                invoiceUsingPB.getHeader().setShipToContactInfo(shipment.getRecipientContactInfo());\n\n                // Ghurka Specific Right Now\n                var termsOfSale = new com.eis.ssit.api.v1.model.TermsOfSale();\n                termsOfSale.setTermsTypeCode(\"01\");\n                termsOfSale.setTermsBasisDateCode(\"3\");\n\n                termsOfSale.setTermsNetDueDate(invoiceUsingPB.getHeader().getDueDate());\n                invoiceUsingPB.getHeader().getTermsOfSales().add(termsOfSale);\n\n                // Ghurka Specific Right Now\n                var dateTimeReference = new com.eis.ssit.api.v1.model.TimeDateReference();\n                dateTimeReference.setTimeDateType(\"011\");\n                dateTimeReference.setStrDateValue(shipment.getShipDate());\n                invoiceUsingPB.getHeader().getTimeDateReferences().add(dateTimeReference);\n\n                if (shipment.getReferenceData() != null) {\n                    for (var m = 0; m < shipment.getReferenceData().size(); m++) {\n                        var reference = shipment.getReferenceData().get(m);\n\t\t\t\t\tif (!invoiceUsingPB.getReferenceData().contains(reference)) {\n                            invoiceUsingPB.getReferenceData().add(reference);\n                        }\n                    }\n                }\n                \n                //changes to add AXVendorNumber\n\t\t\t\tvar vendorNumberAX = scriptUtils.getReferenceValueFromReferences(vendor.getReferenceData(),\n\t\t\t\t\t\t\"AXVendorNumber\");\n                if(vendorNumberAX != null) {\n                        var vendorNumAXRef = new com.eis.core.api.v1.model.Reference();\n                        vendorNumAXRef.setName(\"AXVendorNumber\");\n                        vendorNumAXRef.setType(\"string\");\n                        vendorNumAXRef.setValue(vendorNumberAX);\n                        invoiceUsingPB.getReferenceData().add(vendorNumAXRef);\n                }\n     \n                if (shipment.getDynAttributes() != null) {\n                    invoiceUsingPB.getDynAttributes().putAll(shipment.getDynAttributes());\n                }\n\n                if (shipment.getOriginalOrderNumber() != null) {\n                    invoiceUsingPB.getHeader().setOriginalOrderNumber(shipment.getOriginalOrderNumber());\n                }\n\n                if (salesOrder != null) {\n                    var fullyInvoicedSO = true;\n                    for (var n = 0; n < salesOrder.getLineItems().size(); n++) {\n                        var salesOrderLine = salesOrder.getLineItems().get(n);\n\t\t\t\tif (!com.eis.ssit.api.v1.model.OrderLineStatus.CLOSED.equals(salesOrderLine.getStatus()) &&\n                                !com.eis.ssit.api.v1.model.OrderLineStatus.CANCELLED.equals(salesOrderLine.getStatus())) {\n                            fullyInvoicedSO = false;\n                        }\n                    }\n\n                    if (fullyInvoicedSO) {\n                        salesOrder.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.INVOICED);\n                        try {\n                            salesOrderService.save(salesOrder);\n                        } catch (e) {\n                            throw new com.eis.core.api.v1.exception.B2BTransactionFailed(\"Could not update Sales Order:\" +\n                                    salesOrder.getHeader().getOrderNumber(), e); \n                        //    throw e;\n                        }\n                    }\n                }\n\n            return invoiceUsingPB;\n        } else {\n\n            \n            return invoiceUsingPB;\n        }\n\n    }\n\n \nfunction areAnySOLinesOpen(salesOrder) {\n    var linesOpen = false;                  \n    for (var i = 0; i < salesOrder.getLineItems().size(); i++) {\n        var salesOrderLine = salesOrder.getLineItems().get(i);\n        if (!com.eis.ssit.api.v1.model.OrderLineStatus.CLOSED.equals(\n            salesOrderLine.getStatus()) &&\n                !com.eis.ssit.api.v1.model.OrderLineStatus.CANCELLED.equals(\n                    salesOrderLine.getStatus()) && \n                !com.eis.ssit.api.v1.model.OrderLineStatus.REJECTED.equals(\n                    salesOrderLine.getStatus()) \n                    ) {\n            linesOpen = true;\n            break;\n        }\n    }\n\n    return linesOpen;\n}\n\n\n\nfunction buildNumberOfProductsInvoiced(invoices) {\n\n    var invoiceAlreadyItemToQtyMap = new java.util.HashMap();\n    for(var y = 0; y < invoices.size(); y++) {\n    \tvar existingInvoice = invoices.get(y);\n    \n\t        var lineIterator = existingInvoice.getLineItems().iterator();\n\t        while(lineIterator.hasNext()) {\n\t            var line = lineIterator.next();\n\t            var count = 0;\n\t            if(invoiceAlreadyItemToQtyMap.get(line.getItemReference()) === null) {\n\t                count = line.getQty(); \n\t            } else {\n\t                count = invoiceAlreadyItemToQtyMap.get(line.getItemReference());\n\t                count = count + line.getQty();\n\t            }\n\t            java.lang.System.out.println(\"Already Invoiced:\"+line.getItemReference()+\" Count:\"+ count);\n\t            invoiceAlreadyItemToQtyMap.put(line.getItemReference(), count);\n\t        }\n\t }\n     return invoiceAlreadyItemToQtyMap;\t\t\n}\n\nfunction buildNumberOfProductsToInvoice(salesOrder) {\n    var soProductToInvoiceQtyMap = new java.util.HashMap();\n    for (var i = 0; i < salesOrder.getLineItems().size(); i++) {\n        var salesOrderLine = salesOrder.getLineItems().get(i);\n        if (com.eis.ssit.api.v1.model.OrderLineStatus.CLOSED.equals(\n            salesOrderLine.getStatus()) \n                    ) \n        {\n            var count = 0;\n            if(soProductToInvoiceQtyMap.get(salesOrderLine.getSystemCatalogProductIdentifier()) === null) {\n                count = salesOrderLine.getItemQty(); \n            } else {\n                count = soProductToInvoiceQtyMap.get(salesOrderLine.getSystemCatalogProductIdentifier());\n                count = count + salesOrderLine.getItemQty();\n            }\n            \n            java.lang.System.out.println(\"Needs Invoiced:\"+salesOrderLine.getSystemCatalogProductIdentifier()+\" Count:\"+ count);\n            soProductToInvoiceQtyMap.put(salesOrderLine.getSystemCatalogProductIdentifier(), count);\n        \n        }\n    }\n    \n    return soProductToInvoiceQtyMap;\n    \n}\n\nfunction getInvoicesForOrder(orderNumber, vendorRefName) {\n    var alreadyReceived = false;\n    \n    var invoices = invoiceService.getList(0, 100, \"header.fromOrganization.refName:\"+vendorRefName+\"&&header.salesOrderNumber:\"+orderNumber, null, null);\n   \n    return invoices;\n}\n\n\nfunction isSOFullyInvoiced(salesOrder) {\n    var isfullyInvoiced = false; \n    \n    if(areAnySOLinesOpen(salesOrder)) {\n       isfullyInvoiced = false; \n    } else {\n        var invoices = getInvoicesForOrder(salesOrder.getHeader().getOrderNumber(), salesOrder.getHeader().getToOrganization().getRefName());\n        \n        if(invoices.size() > 0) {\n            var soProductToInvoiceQtyMap = buildNumberOfProductsToInvoice(salesOrder);\n            var invoiceAlreadyItemToQtyMap  = buildNumberOfProductsInvoiced(invoices);\n            var keys = soProductToInvoiceQtyMap.keySet();\n            var iterator = keys.iterator();\n            var productMatch = true;\n            while(iterator.hasNext()) {\n                var key = iterator.next();\n                var count = 0;\n                var soCount = soProductToInvoiceQtyMap.get(key);\n                var invoiceCount = invoiceAlreadyItemToQtyMap.get(key);\n                 java.lang.System.out.println(\"key:\"+key+\",soCount:\"+soCount+\", invoiceCount:\"+ invoiceCount);\n                \n                if(soCount !== null && invoiceCount !== null && soCount === invoiceCount) {\n                    isfullyInvoiced = true;\n                } else {\n                    isfullyInvoiced = false;\n                    break;\n                }\n            }\n        \n        }\n    }\n    \n    return isfullyInvoiced;\n}\n\n\nfunction findSalesOrderForInvoice(vendorRefName, orderNumber, invoice) {\n   var salesOrder = null;\n  \n   var salesOrders = salesOrderService.getList(0, 1, \"header.orderNumber:\"+orderNumber, null, null);\n   \n   if(salesOrders === null || salesOrders.size() === 0){\n        var message = \"Enspire Commerce could not process Invoice \"+invoice.getHeader().getInvoiceNumber()+\", as a sales order has not been loaded for Order \"+orderNumber+\". Please ensure that an Order was submitted to Enspire.\";\n        throw new java.lang.Exception(message);\n      \n   } else {\n      salesOrder = salesOrders.get(0); \n   }\n   \n   return salesOrder;\n}\n\nfunction findSalesOrderForShipment(orderNumber) {\n   var salesOrder = null;\n  \n   var salesOrders = salesOrderService.getList(0, 1, \"header.orderNumber:\"+orderNumber, null, null);\n   \n   if(salesOrders === null || salesOrders.size() === 0){\n        var message = \"Enspire Commerce could not process Invoice , as a sales order has not been loaded for Order \"+orderNumber+\". Please ensure that an Order was submitted to Enspire.\";\n        throw new java.lang.Exception(message);\n      \n   } else {\n      salesOrder = salesOrders.get(0); \n   }\n   \n   return salesOrder;\n}\n\nfunction writeToMailbox(invoice, vendor, mailbox) {\n\tvar vendorName = \"NA\";\n\n\tif (vendor !== null) {\n\t\tvendorName = vendor.getRefName();\n\t}\n\tvar references = invoice.getReferenceData();\n\tvar fromInternalAddress = scriptUtils.getReferenceValueFromReferences(references, \"internalFromAddress\");\n\tif (fromInternalAddress === null) {\n\t\tfromInternalAddress = 'invoices@gnc.com';\n\t}\n\tvar toInternalAddress = scriptUtils.getReferenceValueFromReferences(references, \"internalToAddress\");\n\n\tif (toInternalAddress === null) {\n\t\ttoInternalAddress = 'ax-invoices@gnc.com';\n\t}\n\tvar mapper = new com.eis.json.EnvisionJacksonJaxbXMLMapper();\n    mapper.enable(com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT);\n    mapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT);\n\n\tvar xml = mapper.writeValueAsString(invoice);\n\n\tvar metaData = new java.util.LinkedHashMap();\n\tmetaData.put(\"orderNumber\", invoice.getHeader().getSalesOrderNumber());\n\tmetaData.put(\"invoiceNumber\", invoice.getHeader().getInvoiceNumber());\n\tif (vendor !== null) {\n\t\tmetaData.put(\"vendorNumber\", vendor.getRefName());\n\t}\n\tvar mailboxEntry = scriptUtils.createMailboxEntry(mailbox, xml, \"Invoice_\" + invoice.getHeader().getInvoiceNumber() + \".xml\", \"Invoice\" + invoice.getHeader().getInvoiceNumber() + \"_DO\" + invoice.getHeader().getSalesOrderNumber(), toInternalAddress, fromInternalAddress, metaData, metaData, true);\n\treturn mailboxEntry;\n}\n\nvar mapper = new com.fasterxml.jackson.databind.ObjectMapper();\nvar clazz = new java.lang.Class.forName(\"com.eis.ssit.api.v1.model.Shipment\");\nvar shipment = mapper.readValue(body, clazz);\nvar shipmentFromDB = shipmentService.getById(shipment.getId());\nif(shipmentFromDB !== null) {\n\n    var count = shipmentFromDB.getDynAttributes().get(\"invoiceCreateAttempts\");\n    \n    if(count === null) {\n      count = 0;\n    } \n    \n    if(!shipmentFromDB.getShipmentStatus().equals(com.eis.ssit.api.v1.model.ShipmentStatus.INVOICED) && count < 5)\n    {\n            var shipmentRequest = null;\n            //var salesOrder = findSalesOrderForInvoice(invoice.getHeader().getFromOrganization().getRefName(), invoice.getHeader().getSalesOrderNumber(), invoice);\n            \n            var salesOrder = findSalesOrderForShipment(shipmentFromDB.getOrderNumber());\n            if(shipmentFromDB.getShipmentRequestId() !== null) {\n            \tshipmentRequest = shipmentRequestService.getById(shipmentFromDB.getShipmentRequestId());\n        \t}\n        \t//var invoice = invoiceService.createInvoiceFromShipmentUsingPriceBook(shipment.getId());\n        \tvar invoice = buildInvoiceFromShipmentUsingPricebook(shipmentFromDB,shipmentRequest,salesOrder);\n        \tlog.info(\"Created the invoice:\"+invoice.getHeader().getInvoiceNumber());\n            invoice.getHeader().setStatus(com.eis.ssit.api.v1.model.InvoiceStatus.DRAFT);\n\n            if(shipment.getFromOrganization() !== null) {\n                var dataDomains = shipment.getDataDomains();\n                invoice.getDataDomains().addAll(dataDomains);\n                invoice = invoiceDAO.save(invoice);\n            } else {\n                invoice = invoiceService.save(invoice);\n            }\n            \n            var vendor = vendorService.getByRefName\n                    (shipment.getFromOrganization().getRefName(), shipment.getDataDomain());                    \n            var mailbox = scriptUtils.getMailbox(\"Invoice-Internal\");\n\t\t\tvar mailboxEntry = writeToMailbox(invoice, vendor, mailbox);\n            \n            var salesOrder = findSalesOrderForInvoice(invoice.getHeader().getFromOrganization().getRefName(), invoice.getHeader().getSalesOrderNumber(), invoice);\n            var fullyInvoiced = isSOFullyInvoiced(salesOrder);\n            \n            \n            if(fullyInvoiced) {\n                salesOrder.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.INVOICED);\n            }\n            salesOrder = salesOrderService.save(salesOrder);\n\n\t        if(shipmentRequest !== null) {\n                shipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.INVOICED);\n                shipmentRequestService.save(shipmentRequest);\n\t        } \n\t        shipment.setShipmentStatus(com.eis.ssit.api.v1.model.ShipmentStatus.INVOICED);\n\t        shipmentService.save(shipment);\n    }\n} else {\n    if(log.isInfoEnabled()) {\n        log.info(\"There is no shipmentFromDB\");\n    }\n}\n\n",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "getShipmentsToInvoice",
    "refKey" : "13c956b7f8a6d926b7de40352e90163e",
    "displayName" : "getShipmentsToInvoice",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "getShipmentsToInvoice" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1536915880972,
      "createUser" : "Lakshmi Ashok Kumar",
      "updateTs" : null,
      "updateUser" : null
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "8594bbc4-0507-49dd-9923-d3bf620ec73a",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "body" : {
          "id" : null,
          "refName" : "body",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "body",
          "description" : null
        },
        "header_CamelFileName" : {
          "id" : null,
          "refName" : "header_CamelFileName",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_CamelFileName",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : { }
    },
    "scriptContextObjects" : {
      "body" : {
        "type" : "scriptInputVariable",
        "name" : "body",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "body",
        "parameters" : { }
      },
      "header_CamelFileName" : {
        "type" : "scriptInputVariable",
        "name" : "header_CamelFileName",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_CamelFileName",
        "parameters" : { }
      },
      "invoiceBuilder" : {
        "type" : "javaBean",
        "name" : "invoiceBuilder",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "invoiceDAO" : {
        "type" : "javaBean",
        "name" : "invoiceDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "invoiceService" : {
        "type" : "serviceBean",
        "name" : "invoiceService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "invoiceService",
        "parameterName" : null,
        "parameters" : { }
      },
      "organizationDAO" : {
        "type" : "javaBean",
        "name" : "organizationDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "priceBookEntryService" : {
        "type" : "serviceBean",
        "name" : "priceBookEntryService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "priceBookEntryService",
        "parameterName" : null,
        "parameters" : { }
      },
      "salesOrderService" : {
        "type" : "serviceBean",
        "name" : "salesOrderService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "salesOrderService",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestService" : {
        "type" : "serviceBean",
        "name" : "shipmentRequestService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentRequestService",
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentService" : {
        "type" : "serviceBean",
        "name" : "shipmentService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentService",
        "parameterName" : null,
        "parameters" : { }
      },
      "tradeAgreementService" : {
        "type" : "serviceBean",
        "name" : "tradeAgreementService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "tradeAgreementService",
        "parameterName" : null,
        "parameters" : { }
      },
      "vendorService" : {
        "type" : "serviceBean",
        "name" : "vendorService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "vendorService",
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.gnc" ]
  },
  "functionType" : "utility",
  "inputs" : { },
  "result" : null,
  "active" : true,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "gncPolicy",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "gncPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1531337454496,
      "createUser" : "Paul Ramnarain",
      "updateTs" : 1591201352156,
      "updateUser" : "GNC VDP"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "allowedPackages" : {
      "adapter1" : "adapter1",
      "adapter2" : "adapter2",
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1common" : "com.eis.b2bmb.api.v1.common",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbcamelcustomutil" : "com.eis.b2bmb.camel.custom.util",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscloudcanonicalmodel" : "com.eis.cloud.canonical.model",
      "comeiscloudcanonicalmodelimports" : "com.eis.cloud.canonical.model.imports",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscorecommonJSRunner" : "com.eis.core.common.JSRunner",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrskwiapiv1model" : "com.eis.extsvrs.kwi.api.v1.model",
      "comeisextsvrskwiapiv1services" : "com.eis.extsvrs.kwi.api.v1.services",
      "comeisextsvrsquickbooksapiv1dao" : "com.eis.extsvrs.quickbooks.api.v1.dao",
      "comeisextsvrsshipstationapiv1exception" : "com.eis.extsvrs.shipstation.api.v1.exception",
      "comeisextsvrsshipstationapiv1model" : "com.eis.extsvrs.shipstation.api.v1.model",
      "comeisextsvrsshipstationapiv1services" : "com.eis.extsvrs.shipstation.api.v1.services",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisextsvrssnapfulfilapiv1dao" : "com.eis.extsvrs.snapfulfil.api.v1.dao",
      "comeisextsvrssnapfulfilapiv1model" : "com.eis.extsvrs.snapfulfil.api.v1.model",
      "comeisextsvrssnapfulfilapiv1services" : "com.eis.extsvrs.snapfulfil.api.v1.services",
      "comeisextsvrssnapfulfilapiv1util" : "com.eis.extsvrs.snapfulfil.api.v1.util",
      "comeisgitimpl" : "com.eis.git.impl",
      "comeisgitmodel" : "com.eis.git.model",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngine" : "com.eis.oms.inventory.allocationEngine",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysync" : "com.eis.oms.inventory.sync",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparserscustomer" : "com.eis.ssit.parsers.customer",
      "comeisssitparserspricing" : "com.eis.ssit.parsers.pricing",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersvendor" : "com.eis.ssit.parsers.vendor",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comfasterxmljacksondataformatxml" : "com.fasterxml.jackson.dataformat.xml",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaldom" : "com.sun.org.apache.xerces.internal.dom",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunorgapachexmlinternalserialize" : "com.sun.org.apache.xml.internal.serialize",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilregex" : "java.util.regex",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlnamespace" : "javax.xml.namespace",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransform" : "javax.xml.transform",
      "javaxxmltransformdom" : "javax.xml.transform.dom",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "javaxxmlws" : "javax.xml.ws",
      "javaxxmlwsBindingProvider" : "javax.xml.ws.BindingProvider",
      "javaxxmlwshandlerMessageContext" : "javax.xml.ws.handler.MessageContext",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecatalinaloader" : "org.apache.catalina.loader",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscodecbinary" : "org.apache.commons.codec.binary",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecommonslangtime" : "org.apache.commons.lang.time",
      "orgapachecxfhelpers" : "org.apache.cxf.helpers",
      "orgapachecxfhelpersDOMUtils" : "org.apache.cxf.helpers.DOMUtils",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfjaxws" : "org.apache.cxf.jaxws",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgapachexalanprocessor" : "org.apache.xalan.processor",
      "orgapachexalantransformer" : "org.apache.xalan.transformer",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "orgw3cdom" : "org.w3c.dom",
      "orgxmlsax" : "org.xml.sax",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.gnc" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "getShipmentsToInvoice",
    "refId" : "8594bbc4-0507-49dd-9923-d3bf620ec73a",
    "refKey" : "13c956b7f8a6d926b7de40352e90163e",
    "displayName" : "getShipmentsToInvoice",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "gncPolicy",
    "refId" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "admin@gnc.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.gnc" ]
}