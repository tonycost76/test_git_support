{
  "refName" : "siteCreation",
  "refKey" : "d90db2f49b2e34eae54235258c5ae649",
  "displayName" : "siteCreation",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1569762307509,
    "createUser" : "GNC VDP",
    "updateTs" : 1569762870478,
    "updateUser" : "GNC VDP"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "6ce66a73-f18d-40e3-89d3-fb9c67ca8833",
  "script" : "var mapper = new com.eis.json.EnvisionJacksonJaxbXMLMapper();\nmapper.enable(com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT);\nmapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT);\n\nvar cup = Packages.org.apache.commons.collections4.CollectionUtils;\n\nvar logger = org.slf4j.LoggerFactory.getLogger(\"siteCreation:\");\nvar invalidItems = new java.util.ArrayList();\nvar processedItems = new java.util.ArrayList();\nvar convertedItems = new java.util.LinkedHashMap();\nvar errorDetails = new java.util.ArrayList();\n\n\nvar t, site2, t1, r, ref, lon, lot, phone, email, dc, closedate, ac, site1, d, key, val, datadomain1, organization, timezone, status\nvar dww = new java.util.LinkedHashMap();\n\n\nfunction createInventoryPool(site, dataDomain) {\n\n    // var channelC = channelService.getByRefName(\"Callcenter\", dataDomain)\n    logger.info(\">>Sitecreationpart:: Inside CreateInvPool\")\n    var channelW = channelService.getByRefName(\"WebSite\", dataDomain)\n\n    var invPool = new com.eis.ssit.api.v1.model.InventoryPool()\n    invPool.setSiteId(site.getId());\n    invPool.setRefName(site.getRefName())\n    invPool.setType(com.eis.ssit.api.v1.model.InventoryPoolType.NEW)\n    // invPool.getChannels().add(channelC)\n    invPool.getChannels().add(channelW)\n    invPool.setDataDomain(dataDomain)\n\n    invPool.setAllowTransfersFrom(true)\n    invPool.setAllowTransfersTo(true)\n    inventoryPoolService.save(invPool)\n    logger.info(\">>Sitecreationpart:: Finished CreateInvPool\")\n}\n\nvar countries = new java.util.Locale.getISOCountries();\nfunction getCountryISO2(country) {\n    for (var i = 0; i < countries.length; i++) {\n        var locale = new java.util.Locale(\"en\", countries[i]);\n        if (country.length > 2) {\n            if (country === locale.getISO3Country())\n                return locale.getCountry()\n        }\n\n        else\n            return country\n    }\n}\n\nfunction writeToMailbox(site, mailbox) {\n    var xml = mapper.writeValueAsString(site);\n    var mailboxEntry = scriptUtils.createMailboxEntry(mailbox, xml, \"site_\" + site.getRefName() + \".xml\", \"site_\" + site.getRefName() + \".xml\", \"asn@gnc.com\", \"vendor@gnc.com\", null, null, true);\n    return mailboxEntry;\n}\n\n\nfunction getStoreDataDomains(site1, datadomain1) {\n    var dataDomains = new java.util.ArrayList();\n    datadomain1 = \"com.gnc\"\n    dataDomains.add(datadomain1);\n    dataDomains.add(datadomain1 + \".stores.\" + site1.getRefName());\n\n    // if (organization === \"Spencer's\") {\n    //     datadomain1 = \"com.spencers\"\n    //     dataDomains.add(datadomain1);\n    //     dataDomains.add(datadomain1 + \".stores.\" + site1.getRefName());\n    // } else {\n    //     datadomain1 = \"com.spirits\"\n    //     dataDomains.add(datadomain1);\n    //     dataDomains.add(datadomain1 + \".stores.\" + site1.getRefName());\n\n    // }\n    return dataDomains;\n\n}\n\n\nfunction createStoreUserProfile(org, datadomain1) {\n    datadomain1=\"com.gnc\"\n\n    var vendorEmailName = createVendorEmailName(org);\n\n    logger.info(\">>Sitecreationpart:: storeuserprofile\" + vendorEmailName)\n    var refName = \"store-\" + vendorEmailName + \"@gnc.com\";\n    var displayName = \"store-\" + vendorEmailName + \"@gnc.com\";\n    var testProfile = userProfileService.getByRefName(refName);\n    if (testProfile === null) {\n        testProfile = new com.eis.core.api.v1.model.UserProfile();\n        var cred = new com.eis.core.api.v1.model.UserIdPasswordCredential();\n        cred.setUserId(refName);\n        cred.setPassword(\"mypassword\");\n\n        testProfile.setRefName(refName);\n        testProfile.setDisplayName(displayName);\n        testProfile.setDataDomain(datadomain1);\n        testProfile.setFirstName(\"Store\");\n        testProfile.setLastName(\"Portal\");\n\n        testProfile.setEmailAddress(\"store-\" + vendorEmailName + \"@gnc.com\");\n        testProfile.setUserIdPasswordToken(cred);\n\n        testProfile.setHomePageURL(\"/fulfillment/requests/\");\n        var dataDomainPolicy = createStoreUserDataDomainPolicy(org, datadomain1);\n        testProfile.setDataDomainPolicy(dataDomainPolicy);\n        // testProfile.setRootDirectory(\"/vendors/\" + vendorEmailName);\n\n        // if (organization === \"Spencer's\")\n        var account = accountService.getByRefName(\"GNC-Account\", datadomain1);\n        // else\n        //     var account = accountService.getByRefName(\"Spirits-Account\", datadomain1);\n        testProfile.setOwningAccountId(account.getId());\n        testProfile.getUserGroups().add(createVendorUserGroup(org));\n        testProfile = userProfileService.save(testProfile);\n\n    }\n    return testProfile;\n\n}\n\n\nfunction createStoreUserDataDomainPolicy(site1, datadomain1) {\n\n    datadomain1=\"com.gnc\"\n    var storeDataDomain = datadomain1 + \".stores.\" + site1.getRefName();\n    logger.info(\">>Sitecreationpart:: storedatadomainpolicy\" + storeDataDomain)\n    var dataDomains = new java.util.ArrayList();\n\n    var dataDomainPolicy = dataDomainPolicyService.getByRefName(site1.getRefName() + \"-policy\");\n\n    if (dataDomainPolicy !== null) {\n        dataDomainPolicyService['delete'](dataDomainPolicy.getId());\n    }\n\n    dataDomains.add(datadomain1);\n    dataDomains.add(storeDataDomain);\n    logger.info(\">>Sitecreationpart:: storedatadomainpolicy11\" + datadomain1)\n    var createFunctionalDomains = [\"FileSystemEntry:Create\", \"Invoice:Create\", \"ShipmentLabel:Create\", \"ShipmentRequest:Create\", \"ShipmentRequest:Ack\", \"ShipmentRequest:Reject\", \"PackingSlip:Create\", \"Item:Create\", \"Variant:Create\", \"Script:Execute\", \"MailboxEntry:Create\", \"MailboxEntry:List\", \"SiteCalendar:Create\"];\n\n    var listFunctionalDomains = [\"Shipment:List\", \"Invoice:List\", \"ShipmentRequest:List\", \"Shipment:View\", \"Invoice:View\", \"ShipmentRequest:View\", \"FileSystemEntry:List\", \"FileSystemEntry:View\", \"RemittanceAdvice:List\", \"RemittanceAdvice:View\", \"Organization:View\"];\n\n    var domainOnlyFunctionalDomains = [\"Correlation:Create\",\n        \"Correlation:Update\"\n    ];\n\n    dataDomainPolicy = com.eis.core.api.v1.model.DataDomainPolicy();\n    for (var xDDPolicy = 0; xDDPolicy < createFunctionalDomains.length; xDDPolicy++) {\n        var fd = createFunctionalDomains[xDDPolicy];\n        var domain = fd.split(\":\")[0];\n        var action = fd.split(\":\")[1];\n        var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\n        dataDomainPolicyEntry.getDataDomains().addAll(dataDomains);\n        dataDomainPolicyEntry.setFunctionalActionString(action);\n        dataDomainPolicyEntry.setFunctionalDomainString(domain);\n        dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\n    }\n\n    for (var xDDFunc = 0; xDDFunc < domainOnlyFunctionalDomains.length; xDDFunc++) {\n        var fd = domainOnlyFunctionalDomains[xDDFunc];\n        var domain = fd.split(\":\")[0];\n        var action = fd.split(\":\")[1];\n        var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\n        dataDomainPolicyEntry.getDataDomains().add(storeDataDomain);\n        dataDomainPolicyEntry.setFunctionalActionString(action);\n        dataDomainPolicyEntry.setFunctionalDomainString(domain);\n        dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\n    }\n\n\n    for (var xListFunc = 0; xListFunc < listFunctionalDomains.length; xListFunc++) {\n        var fd = listFunctionalDomains[xListFunc];\n        var domain = fd.split(\":\")[0];\n        var action = fd.split(\":\")[1];\n        var dataDomainPolicyEntry = com.eis.core.api.v1.model.DataDomainPolicyEntry();\n        dataDomainPolicyEntry.getDataDomains().add(storeDataDomain);\n        dataDomainPolicyEntry.setFunctionalActionString(action);\n        dataDomainPolicyEntry.setFunctionalDomainString(domain);\n        dataDomainPolicy.getEntries().put(fd, dataDomainPolicyEntry);\n    }\n\n\n    dataDomainPolicy.setRefName(site1.getRefName() + \"-policy\")\n    dataDomainPolicy.setDataDomain(datadomain1)\n    dataDomainPolicy = dataDomainPolicyService.save(dataDomainPolicy);\n    return dataDomainPolicy;\n\n}\n\n\nfunction createVendorEmailName(companyName) {\n    var inputString = companyName;\n    if (inputString == null) {\n        return null;\n    } else if (inputString === '') {\n        return inputString;\n    }\n\n    inputString = java.lang.String(inputString).replaceAll(\"[^a-zA-Z0-9]+\", \"\");\n    if (inputString.length > 25) {\n        inputString = inputString.substring(0, 25);\n    }\n\n    inputString = inputString.toLowerCase();\n    return inputString;\n\n}\n\nfunction createVendorUserGroup(org) {\n\n    var Name = createVendorEmailName(org);\n    var refName = \"store-\" + Name + \"UserGroup\";\n    var displayName = \"store-\" + Name + \"UserGroup\";\n\n\n    var userGroup = userGroupService.getByRefName(refName);\n    if (userGroup === null) {\n        userGroup = com.eis.core.api.v1.model.UserGroup();\n        userGroup.setRefName(refName);\n        userGroup.setDisplayName(displayName);\n        userGroup.getRoles().add(createStoreRole(org));\n        userGroup.setDataDomain(datadomain1);\n        userGroup = userGroupService.save(userGroup);\n    } else {\n        userGroup.getRoles().clear();\n        userGroup.getRoles().add(createVendorRole(org));\n        userGroup = userGroupService.save(userGroup);\n    }\n    return userGroup;\n}\n\n\nfunction createStoreRole(org) {\n\n    var capabilityPermissions = new java.util.ArrayList();\n\n    var refName = \"store-\" + org + \"Role\";\n    var role = roleService.getByRefName(refName);\n    if (role === null) {\n        var role = com.eis.core.api.v1.model.Role();\n        role.setRefName(\"store-\" + org + \"Role\");\n        role.setDisplayName(\"store-\" + org + \"Role\");\n        role.setDataDomain(datadomain1);\n        role.setRoleType(com.eis.core.api.v1.model.RoleType.USER_ROLE);\n    }\n\n\n    var viewSystemObjectsCapability = capabilityService.getList(0, 1, \"refName:ViewSystemObjs\", null, null).get(0);\n    var reportViewerCapability = capabilityService.getList(0, 1, \"refName:ReportViewer\", null, null).get(0);\n    role.getCapabilityPermissions().clear();\n\n\n    var storeAccessCapablity = capabilityService.getList(0, 1, \"refName:StoreSpecificPermissions\", null, null).get(0);\n\n    var Dashboardstore = capabilityService.getList(0, 1, \"refName:StorePortalUI\", null, null).get(0);\n    var CommonStorePermissions = capabilityService.getList(0, 1, \"refName:StorePortal\", null, null).get(0);\n    role.getCapabilityPermissions().add(createCapablityPermission(Dashboardstore, datadomain1));\n    role.getCapabilityPermissions().add(createCapablityPermission(storeAccessCapablity, datadomain1 + \".stores.\" + org));\n    role.getCapabilityPermissions().add(createCapablityPermission(CommonStorePermissions, datadomain1));\n\n\n    role.getCapabilityPermissions().add(createCapablityPermission(reportViewerCapability, datadomain1));\n    role.getCapabilityPermissions().add(createCapablityPermission(viewSystemObjectsCapability, \"app.cantata\"));\n\n    role = roleService.save(role);\n    return role;\n\n\n}\n\n\nfunction createCapablityPermission(capability, domain) {\n    var capabilityPermission = new com.eis.core.api.v1.model.CapabilityPermission();\n    capabilityPermission.setCapability(capability);\n    capabilityPermission.setPermittedDataDomain(domain);\n    capabilityPermission.setRefName(capability.getRefName() + \"-\" + domain);\n    return capabilityPermission;\n}\n\n\nfunction handleError(errorList) {\n\n    // var script = scriptDAO.getByRefName(\"testrestApi_cc\", \"com.gnc\");\n    // script.getInputs().put(\"body\", errorList);\n    // script.getInputs().put(\"header_CamelFileName\", \"INT_Site\");\n    // var executedScript = scriptDAO.executeScript(script);\n    // result = executedScript.getResult();\n}\n\n\nvar clazz = new java.lang.Class.forName(\"com.eis.core.api.v1.model.SiteCollection\");\nvar sitedata = mapper.readValue(body, clazz).getItems();\nvar errorList = new java.util.ArrayList();\ndatadomain1 = \"com.gnc\"\n\nlogger.info(\">>Sitecreationpart:: Sitecreation Count\" + sitedata.size())\nfor (var xSiteCnt = 0; xSiteCnt < sitedata.size(); xSiteCnt++) {\n    var site1 = sitedata.get(xSiteCnt);\n    logger.info(\">>Sitecreationpart:: Sitecreationpart\" + xSiteCnt)\n    try {\n        var t = new java.text.SimpleDateFormat(\"hh:mm aa\")\n        logger.info(\">>Sitecreationpart:: Sitecreation Started\")\n\n        //organization differentiation\n        var org = \"GNC-Organization-\";\n        var site3;\n        site3 = siteService.getByRefName(site1.getRefName(), \"com.gnc\")\n\n        // var data;\n        // if (org !== null) {\n        //     if (org === \"Spencer's\") {\n        //         data = \"com.spencers\"\n        //         site3 = siteService.getByRefName(site1.getRefName(), data)\n        //         logger.info(\"sitespencer\" + site3)\n        //     } else if (org === \"Spirit\") {\n        //         data = \"com.spirits\"\n        //         site3 = siteService.getByRefName(site1.getRefName(), data)\n        //         logger.info(\"sitespirit\" + site3)\n        //     }\n        // } else {\n        //     handleError(\"ParentOrganization Cannot be Null\" + site1.getRefName());\n        // }\n\n\n        if (site3 !== null) {\n\n            logger.info(\">>Sitecreationpart:: duplicate\")\n            var sitecal = null\n            if (site1.getReferenceData() !== null) {\n                if (site3.getCalendar() !== null) {\n                    sitecal = siteCalendarService.getByRefName(site3.getCalendar().getRefName(), data)\n                }\n                logger.info(\">>Sitecreationpart:: sitecal data1\" + sitecal)\n                for (var xRefData = 0; xRefData < site1.getReferenceData().size(); xRefData++) {\n                    var reference = site1.getReferenceData().get(xRefData);\n\n                    if (reference.getName() === \"Day\") {\n                        var dw = new com.eis.core.api.v1.model.SiteDay()\n                        if(reference.getValue() !== null){\n                            var y = reference.getValue().split(\"_\");\n                            if(y.length > 1){\n                                dw.setStartTime(t.parse(y[1]))\n                                dw.setEndTime(t.parse(y[2]))\n                                dw.setAllocate(java.lang.Boolean.valueOf(y[3]));\n                                dw.setReplenishmentDay(java.lang.Boolean.valueOf(y[4]));\n                                dw.setShipDay(java.lang.Boolean.valueOf(y[5]));\n\n                                if (sitecal !== null) {\n                                    //get Daymap Existing\n                                    var map1 = sitecal.getDayMap();\n                                    var value = map1.entrySet();\n                                    var v = value.iterator()\n                                    while (v.hasNext()) {\n                                        d = v.next()\n                                        if (d.getKey() === com.eis.core.api.v1.model.DayOfTheWeek.valueOf(y[0])) {\n                                            dww.put(com.eis.core.api.v1.model.DayOfTheWeek.valueOf(y[0]), dw)\n                                        } else if (d.getKey() !== com.eis.core.api.v1.model.DayOfTheWeek.valueOf(y[0])) {\n                                            dww.put(com.eis.core.api.v1.model.DayOfTheWeek.valueOf(y[0]), dw)\n\n                                        } else\n                                            dww.put(d.getKey(), d.getValue())\n                                    }\n                                } \n                                else\n                                dww.put(com.eis.core.api.v1.model.DayOfTheWeek.valueOf(y[0]), dw)\n    \n                            }\n                        }\n                    }\n\n\n                    //Add other reference\n                    if (reference.getName() === \"canShip\") {\n                        if (reference.getValue() === \"true\")\n                            site3.getAllowedFulfillmentTypes().put(\"shipFromSite\", true)\n                    }\n\n                    if (reference.getName() === \"longitude\")\n                        lon = reference.getValue()\n\n                    if (reference.getName() === \"latitude\")\n                        lot = reference.getValue()\n\n                    // if (reference.getName() === \"primaryPhone\")\n                    //     phone = reference.getValue()\n\n                    if (reference.getName() === \"primaryEmail\") {\n                        email = reference.getValue()\n                    }\n                    email=site1.getRefName()+\"@gnc.com\"\n                    logger.info(\">>Sitecreationpart:: email is\" + email)\n\n\n                    if (reference.getName() === \"defaultCalendar\")\n                        dc = reference.getValue()\n\n                    if (reference.getName() === \"timezone\")\n                        timezone = reference.getValue()\n                    timezone = \"US/Eastern\"\n\n                    if (reference.getName() === \"closeDate\")\n                        closedate = reference.getValue()\n\n                    if (reference.getName() === \"siteStatus\")\n                        status = reference.getValue()\n\n\n                }\n\n\n                // if (dww.size() > 0) {\n                //     if (sitecal !== null) {\n                //         sitecal.setDayMap(dww);\n                //         siteCalendarService.save(sitecal)\n                //     }\n\n                //     else {\n                //         var sc = new com.eis.core.api.v1.model.SiteCalendar()\n                //         sc.setName(site3.getRefName() + \"cal\");\n                //         sc.setRefName(site3.getRefName());\n                //         if (dc === \"true\") {\n                //             sc.setDefaultCalendar(true)\n                //         }\n                //         sc.setDayMap(dww);\n                //         sc.setDataDomain(data)\n                //         siteCalendarService.save(sc)\n                //         site3.setCalendar(sc);\n                //     }\n\n                // }\n\n            }\n\n            site3.setOpenDate(site1.getOpenDate())\n            if (site3.getReferenceData() !== null) {\n                var referenceitr = site3.getReferenceData().iterator();\n                while (referenceitr.hasNext()) {\n                    var reference = referenceitr.next();\n                    if (reference.getName() === \"openDate\")\n                        reference.setValue(site1.getOpenDate())\n                    if (reference.getName() === \"closeDate\")\n                        reference.setValue(closedate)\n                    if (reference.getName() === \"siteStatus\")\n                        reference.setValue(status)\n                }\n            }\n\n            var country = getCountryISO2(site1.getAddress().getCountry())\n            //Address update part\n            if (site1.getAddress() !== null) {\n                if (site3.getAddress() !== null) {\n                    var address = site3.getAddress();\n\n                    address.setAddress1(site1.getAddress().getAddress1())\n                    address.setAddress2(site1.getAddress().getAddress2())\n                    address.setAddress3(site1.getAddress().getAddress3())\n                    address.setRefName(site1.getAddress().getRefName())\n                    address.setAddressNameField(site1.getAddress().getAddressNameField())\n                    address.setDisplayName(site1.getAddress().getDisplayName())\n                    address.setCity(site1.getAddress().getCity())\n                    address.setState(site1.getAddress().getState())\n                    address.setZip4(site1.getAddress().getZip4())\n                    address.setZip5(site1.getAddress().getZip5())\n\n\n                    address.setCountry(country)\n\n                    address.setPostalCode(site1.getAddress().getPostalCode())\n                    /**\n                    var coord = site3.getAddress().getCoordinates();\n                    coord.setLatitude(lot)\n                    coord.setLongitude(lon)\n                    address.setCoordinates(coord)\n                    **/\n                    // if(site1.getAddress().getCoordinates() !== null){\n                    //     address.setCoordinates(site1.getAddress().getCoordinates())\n                    // }\n\n                    site3.setAddress(address)\n                }\n            }\n\n            if (site1.getPhone() !== null) {\n                site3.setPhone(site1.getPhone())\n            }\n\n            //getContacts\n            if (site3.getContacts().size() > 0) {\n                for (var xContact = 0; xContact < site3.getContacts().size(); xContact++) {\n                    logger.info(\">>Sitecreationpart:: contacts entry\" + xContact);\n                    var contacts = site3.getContacts().get(xContact);\n                    contacts.setPrimaryEmail(email)\n                    if (site1.getPhone() !== null) {\n                        contacts.setPrimaryPhone(site1.getPhone())\n                    }\n                    contacts.setTimezone(timezone);\n\n\n\n                }\n                logger.info(\">>Sitecreationpart:: contactsdata\" + site3.getContacts());\n\n            } else {\n                var clist = new java.util.ArrayList();\n                var t = new com.eis.core.api.v1.model.Contact()\n                t.setFirstName(site1.getRefName())\n                t.setLastName(\"store\")\n                t.setRefName(site1.getRefName())\n                t.setPrimaryEmail(email)\n                if (site1.getPhone() !== null) {\n                    t.setPrimaryPhone(phone)\n                }\n                t.setRole(\"GeneralContact\")\n                t.setTimezone(timezone);\n                clist.add(t)\n                site3.setContacts(clist)\n\n            }\n            site3.setTmz(timezone)\n\n            var site2 = siteService.save(site3);\n            // var mailbox = scriptUtils.getMailbox(\"Site-Internal-update\");\n            // writeToMailbox(site2, mailbox);\n\n        } else {\n\n            logger.info(\">>Sitecreationpart:: newsite\");\n            var site = new com.eis.core.api.v1.model.Site()\n            site.setRefName(site1.getRefName())\n            //site.setRefName(site1.getId())\n            site.setDisplayName(site1.getDisplayName());\n            site.setDynAttributes(site1.getDynAttributes())\n\n            var org = \"GNC-Organization-\";\n            organization = org\n\n\n            var tag = new java.util.HashSet()\n            var d = new java.util.ArrayList();\n            d.add(\"com.gnc\");\n            site.setTags(tag);\n\n            site.getDataDomains().addAll(d);\n\n            var dw = new com.eis.core.api.v1.model.SiteDay()\n            if (site1.getReferenceData() !== null) {\n                for (var xRefData2 = 0; xRefData2 < site1.getReferenceData().size(); xRefData2++) {\n                    var reference = site1.getReferenceData().get(xRefData2);\n\n\n                    //add reference data\n                    if (reference.getName() === \"closeDate\") {\n                        reference.setType(\"String\");\n                        site.getReferenceData().add(reference);\n                    }\n\n                    if (reference.getName() === \"siteStatus\") {\n                        reference.setType(\"String\");\n                        site.getReferenceData().add(reference);\n                    }\n\n\n                    var t = new java.text.SimpleDateFormat(\"hh:mm aa\")\n\n                    if (reference.getName() === \"Day\") {\n                        if(reference.getValue() !== null){\n                            var y = reference.getValue().split(\"_\");\n                            if(y.length > 1){\n                                dw.setStartTime(t.parse(y[1]))\n                                dw.setEndTime(t.parse(y[2]))\n                                dw.setAllocate(java.lang.Boolean.valueOf(y[3]));\n                                dw.setReplenishmentDay(java.lang.Boolean.valueOf(y[4]));\n                                dw.setShipDay(java.lang.Boolean.valueOf(y[5]));\n                                dww.put(com.eis.core.api.v1.model.DayOfTheWeek.valueOf(y[0]), dw)\n                            }\n                        }\n                    }\n\n\n                    if (reference.getName() === \"canShip\") {\n                        if (reference.getValue() === \"true\")\n                            site.getAllowedFulfillmentTypes().put(\"shipFromSite\", true)\n                    }\n\n                    if (reference.getName() === \"longitude\")\n                        lon = reference.getValue()\n\n                    if (reference.getName() === \"latitude\")\n                        lot = reference.getValue()\n\n                    if (reference.getName() === \"primaryPhone\")\n                        phone = reference.getValue()\n\n                    // if (reference.getName() === \"primaryEmail\")\n\n                    //     email = reference.getValue()\n\n                    email=site1.getRefName()+\"@gnc.com\";\n\n                    if (reference.getName() === \"defaultCalendar\")\n                        dc = reference.getValue()\n\n                    if (reference.getName() === \"timezone\")\n                        timezone = reference.getValue()\n                    timezone=\"US/Eastern\"\n                }\n\n                var ref = new com.eis.core.api.v1.model.Reference();\n                ref.setName(\"openDate\");\n                ref.setType(\"string\");\n                ref.setValue(site1.getOpenDate());\n                site.getReferenceData().add(ref);\n            }\n\n            // if (dww.size() > 0) {\n            //     var sc = new com.eis.core.api.v1.model.SiteCalendar()\n            //     sc.setName(site1.getRefName() + \"cal\");\n            //     sc.setRefName(site1.getRefName());\n            //     if (dc === \"true\") {\n            //         sc.setDefaultCalendar(true)\n            //     }\n            //     sc.setDayMap(dww);\n            //     sc.setDataDomain(datadomain1)\n            //     siteCalendarService.save(sc)\n            //     site.setCalendar(sc);\n            // }\n\n            var address = new com.eis.core.api.v1.model.MailingAddress()\n\n            var country = getCountryISO2(site1.getAddress().getCountry())\n\n\n            if ((site1.getAddress().getAddress1() !== null) && (site1.getAddress().getAddress1() !== null)) {\n                address.setAddress1(site1.getAddress().getAddress1())\n                address.setAddress2(site1.getAddress().getAddress2())\n            } else {\n                handleError(\"Address1 Cannot be Null\" + site1.getRefName());\n\n            }\n            address.setAddress3(site1.getAddress().getAddress3())\n            address.setRefName(site1.getAddress().getRefName())\n            address.setAddressNameField(site1.getAddress().getAddressNameField())\n            address.setDisplayName(site1.getAddress().getDisplayName())\n            if ((site1.getAddress().getCity() !== null) && (site1.getAddress().getState() !== null)) {\n                address.setCity(site1.getAddress().getCity())\n                address.setState(site1.getAddress().getState())\n            } else {\n\n                handleError(\"city or state cannot be null\" + site1.getRefName());\n\n            }\n            address.setZip4(site1.getAddress().getZip4())\n            address.setZip5(site1.getAddress().getZip5())\n            //address.setCountry(site1.getAddress().getCountry())\n            address.setCountry(country)\n            address.setPostalCode(site1.getAddress().getPostalCode())\n\n            /**\n            var coord = new com.eis.core.api.v1.model.Coordinate()\n            if (lot !== null) {\n                coord.setLatitude(lot)\n                coord.setLongitude(lon)\n            }\n            address.setCoordinates(coord)\n            **/\n            // if(site1.getAddress().getCoordinates() !== null){\n            //     address.setCoordinates(site1.getAddress().getCoordinates())\n            // }\n\n            site.setAddress(address)\n            if (site1.getPhone() !== null) {\n                site.setPhone(site1.getPhone());\n            }\n            \n\n            site.setActive(site1.isActive())\n            site.setTmz(timezone)\n\n            site.setSiteType(site1.getSiteType())\n            site.setStoreNumber(new java.math.BigInteger(site1.getRefName()))\n            site.setOpenDate(site1.getOpenDate())\n\n            site.setShipToCustomer(true);\n            site.setShipToStore(true);\n\n\n            //getContacts\n            var clist = new java.util.ArrayList();\n            var t = new com.eis.core.api.v1.model.Contact()\n            t.setFirstName(site1.getRefName())\n            t.setLastName(\"store\")\n            t.setRefName(site1.getRefName())\n            t.setPrimaryEmail(email)\n            if (site1.getPhone() !== null) {\n                t.setPrimaryPhone(site1.getPhone())\n            }\n            t.setRole(\"GeneralContact\")\n            t.setDataDomain(datadomain1)\n            t.setTimezone(timezone);\n            clist.add(t)\n            site.setContacts(clist)\n            logger.info(\">>Sitecreationpart:: timezone\" + clist);\n\n\n\n            var site2 = siteService.save(site);\n            logger.info(\">>Sitecreationpart:: sitecreation ended\");\n\n            //Adding Newly created site to SiteGroup\n            // logger.info(\">>Sitecreationpart:: siteGroup adding\");\n            // if (datadomain1 === \"com.spencers\")\n            // var sitegroup = siteGroupService.getByRefName(\"storegroup\", datadomain1);\n            // // else\n            // //     var sitegroup = siteGroupService.getByRefName(\"storegroup\", datadomain1);\n\n            // if(sitegroup.getSites() === null){\n            //     var sites = new java.util.ArrayList();\n            //     sites.add(site2);\n            //     sitegroup.setSites(sites);\n            // } else {\n            //     sitegroup.getSites().add(site2);\n            // }           \n            // siteGroupService.save(sitegroup);\n\n            //create InventoryPool\n            createInventoryPool(site2, datadomain1)\n\n\n            // var mailbox = scriptUtils.getMailbox(\"Site-Internal-create\");\n            // writeToMailbox(site2, mailbox);\n\n            var dataDomains = getStoreDataDomains(site, datadomain1)\n            createStoreUserProfile(site, datadomain1);\n        }\n\n\n    } catch (exception) {\n        logger.error(\"EXCEPTION:\" + exception);\n    }\n\n    logger.info(\">>Sitecreationpart:: Sitecreation Ended\")\n}\n\nsitedata.size()",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "sitecreationTypeGNC",
    "refKey" : "094e170cfccc616dc038cba7aff9da85",
    "displayName" : "sitecreationTypeGNC",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "sitecreationTypeGNC" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1536171568361,
      "createUser" : "Arundhati D",
      "updateTs" : 1561240588453,
      "updateUser" : "Arundhati D"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "9bf6b8d2-1ee4-4fe9-8733-9cc1b1c3d598",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "body" : {
          "id" : null,
          "refName" : "body",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "body",
          "description" : null
        },
        "header_CamelFileName" : {
          "id" : null,
          "refName" : "header_CamelFileName",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_CamelFileName",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : { }
    },
    "scriptContextObjects" : {
      "accountService" : {
        "type" : "serviceBean",
        "name" : "accountService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "accountService",
        "parameterName" : null,
        "parameters" : { }
      },
      "body" : {
        "type" : "scriptInputVariable",
        "name" : "body",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "body",
        "parameters" : { }
      },
      "capabilityService" : {
        "type" : "serviceBean",
        "name" : "capabilityService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "capabilityService",
        "parameterName" : null,
        "parameters" : { }
      },
      "channelService" : {
        "type" : "serviceBean",
        "name" : "channelService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "channelService",
        "parameterName" : null,
        "parameters" : { }
      },
      "dataDomainPolicyService" : {
        "type" : "serviceBean",
        "name" : "dataDomainPolicyService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "dataDomainPolicyService",
        "parameterName" : null,
        "parameters" : { }
      },
      "header_CamelFileName" : {
        "type" : "scriptInputVariable",
        "name" : "header_CamelFileName",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_CamelFileName",
        "parameters" : { }
      },
      "inventoryPoolService" : {
        "type" : "serviceBean",
        "name" : "inventoryPoolService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "inventoryPoolService",
        "parameterName" : null,
        "parameters" : { }
      },
      "objectJSONMapper" : {
        "type" : "javaBean",
        "name" : "objectJSONMapper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "objectXMLMapper" : {
        "type" : "javaBean",
        "name" : "objectXMLMapper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "roleService" : {
        "type" : "serviceBean",
        "name" : "roleService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "roleService",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptDAO" : {
        "type" : "javaBean",
        "name" : "scriptDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestService" : {
        "type" : "serviceBean",
        "name" : "shipmentRequestService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentRequestService",
        "parameterName" : null,
        "parameters" : { }
      },
      "siteCalendarDAO" : {
        "type" : "javaBean",
        "name" : "siteCalendarDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "siteCalendarService" : {
        "type" : "serviceBean",
        "name" : "siteCalendarService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "siteCalendarService",
        "parameterName" : null,
        "parameters" : { }
      },
      "siteGroupService" : {
        "type" : "serviceBean",
        "name" : "siteGroupService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "siteGroupService",
        "parameterName" : null,
        "parameters" : { }
      },
      "siteService" : {
        "type" : "serviceBean",
        "name" : "siteService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "siteService",
        "parameterName" : null,
        "parameters" : { }
      },
      "userGroupService" : {
        "type" : "serviceBean",
        "name" : "userGroupService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "userGroupService",
        "parameterName" : null,
        "parameters" : { }
      },
      "userProfileService" : {
        "type" : "serviceBean",
        "name" : "userProfileService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "userProfileService",
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.gnc" ]
  },
  "functionType" : "runRoute",
  "inputs" : { },
  "result" : null,
  "active" : false,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "gncPolicy",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "gncPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1531337454496,
      "createUser" : "Paul Ramnarain",
      "updateTs" : 1591201352156,
      "updateUser" : "GNC VDP"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "allowedPackages" : {
      "adapter1" : "adapter1",
      "adapter2" : "adapter2",
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1common" : "com.eis.b2bmb.api.v1.common",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbcamelcustomutil" : "com.eis.b2bmb.camel.custom.util",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscloudcanonicalmodel" : "com.eis.cloud.canonical.model",
      "comeiscloudcanonicalmodelimports" : "com.eis.cloud.canonical.model.imports",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscorecommonJSRunner" : "com.eis.core.common.JSRunner",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrskwiapiv1model" : "com.eis.extsvrs.kwi.api.v1.model",
      "comeisextsvrskwiapiv1services" : "com.eis.extsvrs.kwi.api.v1.services",
      "comeisextsvrsquickbooksapiv1dao" : "com.eis.extsvrs.quickbooks.api.v1.dao",
      "comeisextsvrsshipstationapiv1exception" : "com.eis.extsvrs.shipstation.api.v1.exception",
      "comeisextsvrsshipstationapiv1model" : "com.eis.extsvrs.shipstation.api.v1.model",
      "comeisextsvrsshipstationapiv1services" : "com.eis.extsvrs.shipstation.api.v1.services",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisextsvrssnapfulfilapiv1dao" : "com.eis.extsvrs.snapfulfil.api.v1.dao",
      "comeisextsvrssnapfulfilapiv1model" : "com.eis.extsvrs.snapfulfil.api.v1.model",
      "comeisextsvrssnapfulfilapiv1services" : "com.eis.extsvrs.snapfulfil.api.v1.services",
      "comeisextsvrssnapfulfilapiv1util" : "com.eis.extsvrs.snapfulfil.api.v1.util",
      "comeisgitimpl" : "com.eis.git.impl",
      "comeisgitmodel" : "com.eis.git.model",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngine" : "com.eis.oms.inventory.allocationEngine",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysync" : "com.eis.oms.inventory.sync",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparserscustomer" : "com.eis.ssit.parsers.customer",
      "comeisssitparserspricing" : "com.eis.ssit.parsers.pricing",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersvendor" : "com.eis.ssit.parsers.vendor",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comfasterxmljacksondataformatxml" : "com.fasterxml.jackson.dataformat.xml",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaldom" : "com.sun.org.apache.xerces.internal.dom",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunorgapachexmlinternalserialize" : "com.sun.org.apache.xml.internal.serialize",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilregex" : "java.util.regex",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlnamespace" : "javax.xml.namespace",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransform" : "javax.xml.transform",
      "javaxxmltransformdom" : "javax.xml.transform.dom",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "javaxxmlws" : "javax.xml.ws",
      "javaxxmlwsBindingProvider" : "javax.xml.ws.BindingProvider",
      "javaxxmlwshandlerMessageContext" : "javax.xml.ws.handler.MessageContext",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecatalinaloader" : "org.apache.catalina.loader",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscodecbinary" : "org.apache.commons.codec.binary",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecommonslangtime" : "org.apache.commons.lang.time",
      "orgapachecxfhelpers" : "org.apache.cxf.helpers",
      "orgapachecxfhelpersDOMUtils" : "org.apache.cxf.helpers.DOMUtils",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfjaxws" : "org.apache.cxf.jaxws",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgapachexalanprocessor" : "org.apache.xalan.processor",
      "orgapachexalantransformer" : "org.apache.xalan.transformer",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "orgw3cdom" : "org.w3c.dom",
      "orgxmlsax" : "org.xml.sax",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.gnc" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "sitecreationTypeGNC",
    "refId" : "9bf6b8d2-1ee4-4fe9-8733-9cc1b1c3d598",
    "refKey" : "094e170cfccc616dc038cba7aff9da85",
    "displayName" : "sitecreationTypeGNC",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "gncPolicy",
    "refId" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "admin@gnc.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.gnc" ]
}