{
  "refName" : "processInvoice",
  "refKey" : "88cc8a10f03842efa463e9bae27a8039",
  "displayName" : "processInvoice",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1535518460415,
    "createUser" : "Lakshmi Ashok Kumar",
    "updateTs" : 1555917036221,
    "updateUser" : "Lakshmi Ashok Kumar"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "c4918a55-2faa-47aa-90e4-1fda2aaa4b28",
  "script" : "var mapper = new com.eis.json.EnvisionJacksonJaxbXMLMapper();\nmapper.enable(com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT);\nmapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT);\n\nvar log = org.slf4j.LoggerFactory.getLogger(\"processInvoice:\");\n\n\nfunction buildNumberOfProductsInvoiced(invoices) {\n\n\tvar invoiceAlreadyItemToQtyMap = new java.util.HashMap();\n\tfor (var y = 0; y < invoices.size(); y++) {\n\t\tvar existingInvoice = invoices.get(y);\n\n\t\tvar lineIterator = existingInvoice.getLineItems().iterator();\n\t\twhile (lineIterator.hasNext()) {\n\t\t\tvar line = lineIterator.next();\n\t\t\tvar count = 0;\n\t\t\tif (invoiceAlreadyItemToQtyMap.get(line.getItemReference()) === null) {\n\t\t\t\tcount = line.getQty();\n\t\t\t} else {\n\t\t\t\tcount = invoiceAlreadyItemToQtyMap.get(line.getItemReference());\n\t\t\t\tcount = count + line.getQty();\n\t\t\t}\n\t\t\tjava.lang.System.out.println(\"Already Invoiced:\" + line.getItemReference() + \" Count:\" + count);\n\t\t\tinvoiceAlreadyItemToQtyMap.put(line.getItemReference(), count);\n\t\t}\n\t}\n\treturn invoiceAlreadyItemToQtyMap;\n}\n\nfunction buildNumberOfProductsToInvoice(shipmentRequest) {\n\tvar soProductToInvoiceQtyMap = new java.util.HashMap();\n\tfor (var i = 0; i < shipmentRequest.getLineItems().size(); i++) {\n\t\tvar line = shipmentRequest.getLineItems().get(i);\n\t\tif (com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.CLOSED.equals(\n\t\t\t\tline.getStatus())) {\n\t\t\tvar count = 0;\n\t\t\tif (soProductToInvoiceQtyMap.get(line.getSystemItemId()) === null) {\n\t\t\t\tcount = line.getItemQty();\n\t\t\t} else {\n\t\t\t\tcount = soProductToInvoiceQtyMap.get(line.getSystemItemId());\n\t\t\t\tcount = count + line.getItemQty();\n\t\t\t}\n\t\t\tjava.lang.System.out.println(\"Needs Invoiced:\" + line.getSystemItemId() + \" Count:\" + count);\n\t\t\tsoProductToInvoiceQtyMap.put(line.getSystemItemId(), count);\n\t\t}\n\t}\n\treturn soProductToInvoiceQtyMap;\n}\n\nfunction getInvoicesForOrder(orderNumber, vendorRefName) {\n\tvar alreadyReceived = false;\n\n\tvar invoices = invoiceService.getList(0, 100, \"header.fromOrganization.refName:\" + vendorRefName + \"&&header.salesOrderNumber:\" + orderNumber, null, null);\n\n\treturn invoices;\n}\n\n\nfunction isSOFullyInvoiced(orderNumber, vendorRefName, shipmentRequest) {\n\tvar fullyInvoiced = false;\n\tvar invoices = getInvoicesForOrder(orderNumber, vendorRefName);\n\n\tif (log.isInfoEnabled)\n\t\tlog.info(\"invoices.size() :\" + invoices.size());\n\n\tif (invoices.size() > 0) {\n\t\tvar soProductToInvoiceQtyMap = buildNumberOfProductsToInvoice(shipmentRequest);\n\t\tvar invoiceAlreadyItemToQtyMap = buildNumberOfProductsInvoiced(invoices);\n\t\tvar keys = soProductToInvoiceQtyMap.keySet();\n\t\tvar iterator = keys.iterator();\n\t\tvar productMatch = true;\n\t\twhile (iterator.hasNext()) {\n\t\t\tvar key = iterator.next();\n\t\t\tvar count = 0;\n\t\t\tvar soCount = soProductToInvoiceQtyMap.get(key);\n\t\t\tvar invoiceCount = invoiceAlreadyItemToQtyMap.get(key);\n\t\t\tjava.lang.System.out.println(\"key:\" + key + \",soCount:\" + soCount + \", invoiceCount:\" + invoiceCount);\n\n\t\t\tif (soCount !== null && invoiceCount !== null && soCount === invoiceCount) {\n\t\t\t\tfullyInvoiced = true;\n\t\t\t} else {\n\t\t\t\tfullyInvoiced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\treturn fullyInvoiced;\n}\n\nfunction isBlank(value) {\n\tif (value === null || value === undefined || value === '') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nfunction removeWhiteSpace(value) {\n\n\tif (value !== null) {\n\t\treturn new java.lang.String(value).trim();\n\t} else {\n\t\treturn value;\n\t}\n}\n\nfunction getVendorDataDomains(vendor) {\n\tvar dataDomains = new java.util.ArrayList();\n\tdataDomains.add(dataDomain);\n\tif (vendor !== null) {\n\t\tvar vendorNumber = vendor.getRefName();\n\t\tvar vendorDataDomain = dataDomain + \".\" + vendorNumber;\n\t\tdataDomains.add(vendorDataDomain);\n\t}\n\treturn dataDomains;\n}\n\nfunction buildErrorList(message) {\n\tvar errorList = new java.util.ArrayList();\n\terrorList.add(message);\n\treturn errorList;\n\n}\n\nfunction getVendor(vendorNumber, invoice) {\n\tvar vendors = vendorService.getList(0, 1, \"dynAttributes.vendorNumber:\" + vendorNumber, null, null);\n\tvar vendor = null;\n\tif (vendors === null || vendors.size() === 0) {\n\t\tvar message = \"invoice-vendor-not-found|Enspire Commerce could not process Invoice, \" + invoice.getHeader().getInvoiceNumber() + \", from vendor: \" + vendorNumber + \". No vendor was found with this vendor number.\";\n\t\t//handleError(buildErrorList(message), invoice, vendorNumber, vendor, true);\n\t\tthrow new com.eis.core.api.v1.exception.B2BNotFoundException(message);\n\t} else {\n\t\tvendor = vendors.get(0);\n\t}\n\n\treturn vendor;\n}\n\nfunction getMerchant(refName, invoice) {\n\tvar merchant = organizationService.getByRefName(refName);\n\tif (merchant === null) {\n\t\tvar message = \"invoice-merchant-not-found|Enspire Commerce could not process Invoice, \" + invoice.getHeader().getInvoiceNumber() + \", for merchant: \" + refName + \". No Merchant was found with this refName.\";\n\t\tthrow new java.lang.IllegalStateException(message);\n\t} else {\n\t\treturn merchant;\n\t}\n}\n\n\nfunction buildMismatchedInvoiceQtyMessage(errorList, shippedQty, invoicedQty, itemNumber, vendorNumber, invoiceNumber, orderNumber, vendorName) {\n\tvar message = \"invoice-item-qty-mismatch|Enspire Commerce could not process Invoice,\" + invoiceNumber + \", from vendor: \" + vendorName + \"-\" + vendorNumber + \", for Order \" + orderNumber + \". The invoice lists item(s) that do not match the quantity shipped or rejected. For example, GNC Item Number \" + itemNumber + \" has an invoiced qty of \" + invoicedQty + \" and an order qty of \" + shippedQty + \". The quantity invoiced will need to match the quantity shipped, please ensure both quantities match and retransmit the invoice.\"\n\tthrow new java.lang.IllegalStateException(message);\n}\n\nfunction buildZeroInvoiceQtyMessage(errorList, shippedQty, invoicedQty, itemNumber, vendorNumber, invoiceNumber, orderNumber, vendorName) {\n\tvar message = \"invoice-item-qty-mismatch|Enspire Commerce could not process Invoice,\" + invoiceNumber + \", from vendor: \" + vendorName + \"-\" + vendorNumber + \", for Order \" + orderNumber + \". The invoice has a total of 0 items that can be invoiced. The quantity invoiced will need to match the quantity shipped, please ensure both quantities match and retransmit the invoice.\"\n\tthrow new java.lang.IllegalStateException(message);\n}\n\nfunction buildMismatchedCostMessage(errorList, soCost, invoicedCost, itemNumber, vendorNumber, invoiceNumber, orderNumber, vendorName) {\n\tvar message = \"invoice-item-cost-mismatch|Enspire Commerce could not process Invoice,\" + invoiceNumber + \", from vendor: \" + vendorName + \"-\" + vendorNumber + \", for Order \" + orderNumber + \". The invoice lists item(s) that do not match the cost provided on the original order. For example, GNC Item Number \" + itemNumber + \" has an invoiced cost of \" + invoicedCost + \" and an order cost of \" + soCost + \". The cost of each item on the invoice will need to match the cost of each item on the original order.\"\n\tthrow new java.lang.IllegalStateException(message);\n\n}\n\nfunction buildMismatchedInvoiceTotalMessage(errorList, invoiceCost, invoiceLineCost, vendorNumber, invoiceNumber, orderNumber, vendorName) {\n\tvar message = \"invoice-total-cost-mismatch|Enspire Commerce could not process Invoice,\" + invoiceNumber + \", from vendor: \" + vendorName + \"-\" + vendorNumber + \", for Order \" + orderNumber + \". The total amount of the invoice:\" + invoiceCost + \" does not match the total amount of the line items:\" + invoiceLineCost + \". Please correct the invoice and resubmit.\"\n\tthrow new java.lang.IllegalStateException(message);\n\n}\n\nfunction buildZeroInvoiceTotalMessage(errorList, invoiceCost, invoiceLineCost, vendorNumber, invoiceNumber, orderNumber, vendorName) {\n\tvar message = \"invoice-total-cost-mismatch|Enspire Commerce could not process Invoice,\" + invoiceNumber + \", from vendor: \" + vendorName + \"-\" + vendorNumber + \", for Order \" + orderNumber + \". The total amount of the invoice is $0.00 . Please correct the invoice and resubmit.\"\n\tthrow new java.lang.IllegalStateException(message);\n}\n\nfunction getVendorPrimaryContactEmail(vendor) {\n\tif (vendor.getPrimaryContact() === null || isBlank(vendor.getPrimaryContact().getPrimaryEmail())) {\n\t\ttaskHelper.notifyAndCreateTask(\n\t\t\t\"Vendor:\" + vendor.getCompanyName() + \" Primary Contact Not Found:\" + java.lang.System.nanoTime(),\n\t\t\t\"No primary contact or primary contact email was found for vendor:\" + vendor.getCompanyName(),\n\t\t\t\"No primary contact or primary contact email was found for vendor:\" + vendor.getCompanyName() + \".  Intial set up of this vendor could have failed. Please set up the vendor correctly with a primary contact.\",\n\t\t\t\"Vendor Failure\", \"com.gnc\",\n\t\t\t\"Vendor Item Failure\", \"vendorItem-failure\", \"Tony Costanzo\");\n\t\treturn null;\n\t} else {\n\t\treturn vendor.getPrimaryContact().getPrimaryEmail();\n\t}\n}\n\nfunction createTaskAndNotification(errorName, description, taskQueue) {\n\n    var dataDomains = new java.util.ArrayList();\n    dataDomains.add(dataDomain);\n\n    var task = new com.eis.core.api.v1.model.Task();\n    task.setDisplayName(errorName);\n    task.setStatus(\"Assigned\");\n    task.setRefName(errorName + \"-\" + java.lang.System.nanoTime());\n    description = description + \"\\n\\n\\n\";\n    for (var x = 0; x < tags.size(); x++) {\n        description = description + tags.get(x) + \"\\n\";\n    }\n    task.setDescription(description);\n    task.getDataDomains().addAll(dataDomains);\n\n    task.setAssignmentDate(new Date());\n    var dueDate = java.util.Calendar.getInstance();\n    dueDate.add(java.util.Calendar.DATE, 3);\n    task.setDueDate(dueDate.getTime());\n    task.setDateCreated(new Date());\n    task.setLabel(errorName);\n    task.setOwnerName(\"Admin GNC\");\n    task.setTaskQueueRefName(taskQueue);\n    task.getTags().addAll(tags);\n    taskDAO.save(task);\n}\n\nfunction alertAndNotifyOfError(errorList, vendor, invoiceNumber, vendorNumber, orderNumber, taskQueue) {\n\n\tif (log.isInfoEnabled()) {\n\t\tlog.info(\"alertAndNotifyOfError :\" + errorList);\n\t}\n\n\tvar primaryContactEmail = null;\n\tvar vendorName = \"NA\";\n\n\n\tif (vendor !== null) {\n\t\tvendorName = vendor.getDisplayName();\n\t}\n\n\tif (vendor !== null) {\n\t\tprimaryContactEmail = getVendorPrimaryContactEmail(vendor);\n\t}\n\n\tif (primaryContactEmail === null) {\n\t\t primaryContactEmail = \"dropshipvendor@gnc.com\";\n\t}\n\n\tvar message = errorList.get(0);\n\tvar taskQueueAndMessage = message.split('|');\n\n\tif (isBlank(taskQueue)) {\n\t\tif (taskQueueAndMessage.length > 1) {\n\t\t\ttaskQueue = taskQueueAndMessage[0];\n\t\t} else {\n\t\t\ttaskQueue = 'invoice-processing-error';\n\t\t}\n\t}\n\tvar errorMessage = '';\n\tif (taskQueueAndMessage.length > 1) {\n\t\terrorMessage = taskQueueAndMessage[1];\n\t} else {\n\t\terrorMessage = taskQueueAndMessage[0];\n\t}\n\n\tvar subject = \"GNC Dropship - Invoice Error - Vendor: \" + vendorName + \" - Invoice Number: \" + invoiceNumber + \" - Order Number: \" + orderNumber;\n\n\tvar newErrorList = new java.util.ArrayList();\n\tnewErrorList.add(errorMessage);\n\n\tif (taskQueue === 'invoice-item-qty-mismatch' || taskQueue === 'invoice-item-cost-mismatch' || taskQueue === 'invoice-no-shipment' || taskQueue === 'invoice-no-sales-order' || taskQueue === 'invoice-already-received' || taskQueue === 'invoice-vendor-not-found' || taskQueue === 'invoice-already-received-for-order' || taskQueue === 'invoice-total-cost-mismatch' || taskQueue === 'invoice-buyerItemId-mismatch' || taskQueue === 'shipment-lineitem-mismatch' || taskQueue === 'invoice-due-date-earlier' ) {\n\t\tvar velocityContext = new org.apache.velocity.VelocityContext();\n\n\t\tvelocityContext.put(\"errorList\", newErrorList);\n\t\tvelocityContext.put(\"vendorName\", vendorName);\n\t\tvelocityContext.put(\"invoiceNumber\", invoiceNumber);\n\t\tvelocityContext.put(\"description\", subject);\n\n\t\tvar body = scriptUtils.buildMessageFromVelocityTemplate(\"inbound/templates/invoiceValidationErrors.vm\", velocityContext);\n\n\t\tvar mailbox = scriptUtils.getMailbox(\"VendorAlerts-Invoice-Errors\");\n\n\t\tscriptUtils.createMailboxEntry(mailbox, body, \"InvalidInvoice-\" + invoiceNumber + \".html\", subject, primaryContactEmail, \"alerts@enspirecommerce.com\", null, null, true);  \n\t}\n\t\n\tcreateTaskAndNotification(subject, errorMessage, taskQueue);\n}\n\n\nfunction correlatePackageLinesToInvoiceLines(invoice, shipment, vendor, vendorNumber, invoiceNumber, orderNumber) {\n\tvar omsLineToLineItemMap = new java.util.HashMap();\n\tvar shippedItemToQtyMap = new java.util.HashMap();\n\tvar packageIterator = shipment.getPackages().iterator();\n\twhile (packageIterator.hasNext()) {\n\t\tvar p = packageIterator.next();\n\t\tvar lineIterator = p.getLineItems().iterator();\n\t\twhile (lineIterator.hasNext()) {\n\t\t\tvar line = lineIterator.next();\n\t\t\tomsLineToLineItemMap.put(line.getSystemItemId(), line);\n\n\t\t\tvar count = 0;\n\t\t\tif (shippedItemToQtyMap.get(line.getSystemItemId()) === null) {\n\t\t\t\tcount = line.getItemQty();\n\t\t\t} else {\n\t\t\t\tcount = shippedItemToQtyMap.get(line.getSystemItemId());\n\t\t\t\tcount = count + line.getItemQty();\n\t\t\t}\n\t\t\tshippedItemToQtyMap.put(line.getSystemItemId(), count);\n\t\t}\n\t}\n\tlog.info(\"omsLineToLineItemMap :\" + omsLineToLineItemMap);\n\tlog.info(\"shippedItemToQtyMap:\" + shippedItemToQtyMap);\n\n\tvar errorList = new java.util.ArrayList();\n\tvar totalInvoiceLineAmount = 0;\n\tvar invoiceLineIterator = invoice.getLineItems().iterator();\n\tvar totalTermAllowance = 0;\n\t\n\tvar totalDamageAllowance = 0\n\n\twhile (invoiceLineIterator.hasNext()) {\n\t\tvar line = invoiceLineIterator.next();\n\t\tvar shipLine = omsLineToLineItemMap.get(line.getBuyerItemId());\n\t\tjava.lang.System.out.println(\"getBuyerItemId() :\" + line.getBuyerItemId());\n\t\tjava.lang.System.out.println(\"ShipLine:\" + shipLine);\n\t\tif (shipLine !== null) {\n\t\t\tif (line.getItemReference() !== line.getBuyerItemId()) {\n\t\t\t\tvar message = \"shipment-lineitem-mismatch|Envista could not process Invoice,\" + invoiceNumber + \",\" +\n\t\t\t\t\t\" from vendor: \" + vendorNumber + \". On the Invoice, the line item's item referenece does \" +\n\t\t\t\t\t\" not match the value on the Order, \" + orderNumber + \".\";\n\t\t\t\t//   errorList.add(message);\n\t\t\t\tthrow new com.eis.core.api.v1.exception.B2BNotFoundException(message);\n\n\t\t\t}\n\n\t\t\t//validate qty\n\t\t\tvar invoicedCount = line.getQty();\n\t\t\tvar shippedCount = shippedItemToQtyMap.get(line.getBuyerItemId());\n\n\t\t\tif (invoicedCount === 0) {\n\t\t\t\tjava.lang.System.out.println(\"Invoiced Count is Zero\");\n\t\t\t\tbuildZeroInvoiceQtyMessage(errorList, shippedCount, invoicedCount, line.getItemReference(), vendorNumber,\n\t\t\t\t\tinvoice.getHeader().getInvoiceNumber(), invoice.getHeader().getSalesOrderNumber(), vendor.getDisplayName());\n\t\t\t}\n\t\t\t//changed\n\t\t\tif (invoicedCount > shippedCount || invoicedCount < shippedCount) {\n\t\t\t\tbuildMismatchedInvoiceQtyMessage(errorList, shippedCount, invoicedCount, line.getItemReference(), vendorNumber,\n\t\t\t\t\tinvoice.getHeader().getInvoiceNumber(), invoice.getHeader().getSalesOrderNumber(), vendor.getDisplayName());\n\t\t\t}\n\t\t\t//validate cost\n\n\t\t\tvar invoicedCost = new java.math.BigDecimal(line.getUnitCost());\n\t\t\tvar salesOrderCost = scriptUtils.getReferenceValueFromReferences(shipLine.getReferenceData(),\n\t\t\t\t\"cost\");\n\t\t\tif (salesOrderCost === null) {\n\t\t\t\tthrow new com.eis.core.api.v1.exception.B2BNotFoundException(\"Invoice Error: could not process Invoice,\" + invoiceNumber + \" No cost was found on order:\" + orderNumber + \" for item:\" + line.getBuyerItemId());\n\t\t\t}\n\t\t\ttotalInvoiceLineAmount = totalInvoiceLineAmount + (invoicedCost * line.getQty());\n\t\t\tif (invoicedCost !== null) {\n\t\t\t\tinvoicedCost = new java.math.BigDecimal(invoicedCost);\n\t\t\t\tinvoicedCost = invoicedCost.setScale(2, java.math.BigDecimal.ROUND_HALF_EVEN);\n\t\t\t}\t\n\n\t\t\tvar lineReferenceData = shipLine.getReferenceData();\n            if (lineReferenceData != null) {\n                for (var m = 0; m < lineReferenceData.size(); m++) {\n            \t    var reference = lineReferenceData.get(m);\n            \t    if (!line.getReferenceData().contains(reference)) {\n            \t\t    line.getReferenceData().add(reference);\n            \t    }\n                }\n            }\n\n\t\t\tvar termAllowance = scriptUtils.getReferenceValueFromReferences(line.getReferenceData(),\n\t\t\t\t\"termAllowance\");\t\t\n\t\t\tif(termAllowance !== null) {\n\t\t\t\tvar termAllowanceAmount = new java.math.BigDecimal(termAllowance);\n\t\t\t\ttotalTermAllowance = totalTermAllowance + (termAllowanceAmount.doubleValue() * line.getQty());\t\n\t\t\t}\n\t\t\tvar damageAllowance = scriptUtils.getReferenceValueFromReferences(line.getReferenceData(),\n\t\t\t\t\"damageAllowance\");\n\t\t\tif(damageAllowance !== null) {\n\t\t\t\tvar damageAllowanceAmount = new java.math.BigDecimal(damageAllowance);\n\t\t\t\ttotalDamageAllowance = totalDamageAllowance + (damageAllowanceAmount.doubleValue() * line.getQty());\t\n\t\t\t}\n\n\t\t\tif (salesOrderCost !== null) {\n\t\t\t\tsalesOrderCost = new java.math.BigDecimal(salesOrderCost);\n\t\t\t\tsalesOrderCost = salesOrderCost.setScale(2, java.math.BigDecimal.ROUND_HALF_EVEN);\n\t\t\t}\n\n\t\t\tif (invoicedCost !== null && salesOrderCost !== null) {\n\t\t\t\tif (invoicedCost > salesOrderCost || invoicedCost < salesOrderCost) {\n\t\t\t\t\tbuildMismatchedCostMessage(errorList, salesOrderCost, invoicedCost, line.getBuyerItemId(), vendorNumber,\n\t\t\t\t\t\tinvoice.getHeader().getInvoiceNumber(), invoice.getHeader().getSalesOrderNumber(), vendor.getDisplayName());\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t} else {\n\t\t\tvar message = \"invoice-buyerItemId-mismatch|Enspire Commerce could not process Invoice,\" + invoiceNumber + \", from vendor: \" + vendorNumber + \", for Order \" + orderNumber + \". The invoice lists item(s) that do not match the GNC Item Number.  Please ensure that BuyerItemId is correct and retransmit the invoice.\"\n\t\t\t//  errorList.add(message);\n\t\t\tthrow new com.eis.core.api.v1.exception.B2BNotFoundException(message);\n\t\t}\n\t}\n\n\tvar invoiceAmount = invoice.getHeader().getTotalAmountDue();\n\n\tvar termRef = new com.eis.core.api.v1.model.Reference();\n        termRef.setName(\"totalTermAllowance\");\n        termRef.setType(\"double\");\n        termRef.setValue(new java.math.BigDecimal(totalTermAllowance).doubleValue());\n        invoice.getReferenceData().add(termRef);\n\n\tvar damageRef = new com.eis.core.api.v1.model.Reference();\n        damageRef.setName(\"totalDamageAllowance\");\n        damageRef.setType(\"double\");\n        damageRef.setValue(new java.math.BigDecimal(totalDamageAllowance).doubleValue());\n        invoice.getReferenceData().add(damageRef);\n\n\tif (invoiceAmount === 0) {\n\t\tbuildZeroInvoiceTotalMessage(errorList, invoiceAmount, totalInvoiceLineAmount, vendorNumber, invoice.getHeader().getInvoiceNumber(), invoice.getHeader().getSalesOrderNumber(), vendor.getDisplayName());\n\t} else {\n\t\tif (invoiceAmount !== null) {\n\t\t\tinvoiceAmount = new java.math.BigDecimal(invoiceAmount);\n\t\t\tinvoiceAmount = invoiceAmount.setScale(2, java.math.BigDecimal.ROUND_HALF_EVEN);\n\t\t}\n\n\t\tif (totalInvoiceLineAmount !== null) {\n\t\t\ttotalInvoiceLineAmount = new java.math.BigDecimal(totalInvoiceLineAmount);\n\t\t\ttotalInvoiceLineAmount = totalInvoiceLineAmount.setScale(2, java.math.BigDecimal.ROUND_HALF_EVEN);\n\t\t}\n\n\t\tvar totalDifference = Math.abs(invoiceAmount - totalInvoiceLineAmount);\n\t\tif (invoiceAmount > totalInvoiceLineAmount || invoiceAmount < totalInvoiceLineAmount) {\n\t\t\tbuildMismatchedInvoiceTotalMessage(errorList, invoiceAmount, totalInvoiceLineAmount, vendorNumber, invoice.getHeader().getInvoiceNumber(), invoice.getHeader().getSalesOrderNumber(), vendor.getDisplayName());\n\t\t}\n\t}\n\tif (errorList.size() > 0) {\n\t\thandleError(errorList, invoice, vendorNumber, vendor, true);\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction findShipmentsForInvoice(vendor, orderNumber, invoice, vendorNumber) {\n\tvar shipment = null;\n\tjava.lang.System.out.println(\"Vendor is:\" + vendor.getRefName());\n\tvar shipments = shipmentService.getList(0, 100, \"fromOrganization.refName:\" + vendor.getRefName() + \"&&shipmentStatus:SHIPPED&&orderNumber:\" + orderNumber, null, null);\n\n\tif (shipments === null || shipments.size() === 0) {\n\n\t\tvar message = \"invoice-no-shipment|Enspire Commerce could not process Invoice \" + invoice.getHeader().getInvoiceNumber() + \", from vendor: \" + vendor.getDisplayName() + \"-\" + vendorNumber + \", as a shipment in Shipped status is not found for Order \" + orderNumber + \".  Please ensure that a valid shipment exists in 'Shipped' status for \" + orderNumber;\n\t\tthrow new java.lang.IllegalStateException(message);\n\t\t//handleError(buildErrorList(message), invoice, vendorNumber, vendor, true);\n\t}\n\treturn shipments;\n}\n\n\nfunction findSalesOrderForInvoice(vendor, orderNumber, invoice, vendorNumber) {\n\tvar salesOrder = null;\n\tjava.lang.System.out.println(\"Vendor is:\" + vendor.getRefName());\n\tvar salesOrders = salesOrderService.getList(0, 1, \"header.orderNumber:\" + orderNumber, null, null);\n\tif (salesOrders === null || salesOrders.size() === 0) {\n\t\tvar message = \"invoice-no-sales-order|Enspire Commerce could not process Invoice \" + invoice.getHeader().getInvoiceNumber() + \", from vendor: \" + vendor.getDisplayName() + \"-\" + vendorNumber + \", as a sales order has not been loaded for Order \" + orderNumber + \". Please ensure that an Order was submitted to Enspire.\";\n\t\tthrow new java.lang.IllegalStateException(message);\n\t} else {\n\t\tsalesOrder = salesOrders.get(0);\n\t}\n\treturn salesOrder;\n}\n\nfunction hasInvoiceBeenReceived(invoice, vendor, vendorNumber) {\n\tvar alreadyReceived = false;\n\n\tvar invoices = invoiceService.getList(0, 10, \"header.fromOrganization.refName:\" + vendor.getRefName() + \"&&header.invoiceNumber:\" + invoice.getHeader().getInvoiceNumber(), null, null);\n\n\tif (invoices.size() > 0) {\n\t\talreadyReceived = true;\n\t\tvar message = \"invoice-already-received|Enspire Commerce could not process Invoice \" + invoice.getHeader().getInvoiceNumber() + \", from vendor: \" + vendor.getDisplayName() + \"-\" + vendorNumber + \". An invoice with this invoice number has already been received from this vendor.\";\n\t\t//handleError(buildErrorList(message), invoice, vendorNumber, vendor, true);\n\t\tthrow new java.lang.IllegalStateException(message);\n\t}\n\treturn alreadyReceived;\n}\n\nfunction validateInvoiceDueDate(invoice, vendor, vendorNumber) {\n\tvar tradeAgreements = tradeAgreementService.getList(0, 10, \"buyer.refName:GNC-Organization-&&seller.refName:\"+vendorNumber, null, null);                \n    var tradeAgreement= tradeAgreements.get(0);\n    if(tradeAgreement === null) {\n        throw new com.eis.core.api.v1.exception.B2BTransactionFailed(\"No Trade Aggreement Set up With Vendor:\"+vendor.getRefName());\n    }\n        \n    //get PaymentTerms for vendor\n    var paymentTerm = tradeAgreement.getDefaultPaymentTerms();\n    var paymentTermLength = paymentTerm.length;\n    var paymentTermDays = paymentTerm.substring(paymentTermLength -2 , paymentTermLength);\n\n    var expectedInvoiceDue = java.util.Calendar.getInstance();\n    expectedInvoiceDue.setTime(new java.util.Date());\n    expectedInvoiceDue.add(java.util.Calendar.DATE, java.lang.String.valueOf(paymentTermDays));\n\n    var inputDueDate = invoice.getHeader().getDueDate();        \n    var expectedInvoiceDueDate = expectedInvoiceDue.getTime();    \n    if(null == inputDueDate)\n    {\n    \tinvoice.getHeader().setDueDate(expectedInvoiceDueDate);\n    \treturn;\n    }\n\n    if (org.apache.commons.lang.time.DateUtils.isSameDay(inputDueDate, expectedInvoiceDue.getTime())) {\n        return;\n    } \n\n    if(inputDueDate.compareTo(expectedInvoiceDueDate) < 0)\n\t{\n\t    var sdf = new java.text.SimpleDateFormat(\"MMM dd, yyyy\");\n\t\tvar message = \"invoice-due-date-earlier|Enspire Commerce could not process Invoice \" + invoice.getHeader().getInvoiceNumber() + \", from vendor: \" + vendor.getDisplayName() + \"-\" + vendorNumber + \". The invoice has due date earlier than expected due date \" + sdf.format(expectedInvoiceDueDate);\n\t\tthrow new java.lang.IllegalStateException(message);\n\t}\n\telse if(inputDueDate.compareTo(expectedInvoiceDueDate) > 0)\n\t{\n\t    var sdf = new java.text.SimpleDateFormat(\"MMM dd, yyyy\");\n\t\tvar message = \"invoice-due-date-later|The Invoice \" + invoice.getHeader().getInvoiceNumber() + \", from vendor: \" + vendor.getDisplayName() + \"-\" + vendorNumber +  \" has due date later than expected due date \" + sdf.format(expectedInvoiceDueDate);\n\t\tvar errList = new java.util.ArrayList();\n\t\terrList.add(message);\n\t\talertAndMailWarning(errList, vendor, invoice.getHeader().getInvoiceNumber(), vendorNumber, invoice.getHeader().getSalesOrderNumber());\n\t}\n}\n\nfunction alertAndMailWarning(errorList, vendor, invoiceNumber, vendorNumber, orderNumber, taskQueue) {\n\n\tvar primaryContactEmail = null;\n\tvar vendorName = \"NA\";\n\n\n\tif (vendor !== null) {\n\t\tvendorName = vendor.getDisplayName();\n\t}\n\n\tif (vendor !== null) {\n\t\tprimaryContactEmail = getVendorPrimaryContactEmail(vendor);\n\t}\n\n\tif (primaryContactEmail === null) {\n\t\t primaryContactEmail = \"dropshipvendor@gnc.com\";\n\t}\n\n\tvar message = errorList.get(0);\n\tvar taskQueueAndMessage = message.split('|');\n\n\tif (isBlank(taskQueue)) {\n\t\tif (taskQueueAndMessage.length > 1) {\n\t\t\ttaskQueue = taskQueueAndMessage[0];\n\t\t} else {\n\t\t\ttaskQueue = 'invoice-processing-error';\n\t\t}\n\t}\n\tvar errorMessage = '';\n\tif (taskQueueAndMessage.length > 1) {\n\t\terrorMessage = taskQueueAndMessage[1];\n\t} else {\n\t\terrorMessage = taskQueueAndMessage[0];\n\t}\n\n\tvar subject = \"GNC Dropship - Invoice Due Date Warning - Vendor: \" + vendorName + \" - Invoice Number: \" + invoiceNumber + \" - Order Number: \" + orderNumber;\n\n\tvar newErrorList = new java.util.ArrayList();\n\tnewErrorList.add(errorMessage);\n\n\tif (taskQueue === 'invoice-due-date-later') {\n\t\tvar velocityContext = new org.apache.velocity.VelocityContext();\n\n\t\tvelocityContext.put(\"errorList\", newErrorList);\n\t\tvelocityContext.put(\"vendorName\", vendorName);\n\t\tvelocityContext.put(\"invoiceNumber\", invoiceNumber);\n\t\tvelocityContext.put(\"description\", subject);\n\n\t\tvar body = scriptUtils.buildMessageFromVelocityTemplate(\"inbound/templates/invoiceValidationWarn.vm\", velocityContext);\n\n\t\tvar mailbox = scriptUtils.getMailbox(\"VendorAlerts-Invoice-Errors\");\n\n\t\tscriptUtils.createMailboxEntry(mailbox, body, \"InvalidInvoice-\" + invoiceNumber + \".html\", subject, primaryContactEmail, \"alerts@enspirecommerce.com\", null, null, true);    \n\t}\n\n    createTaskAndNotification(subject, errorMessage, taskQueue);\n}\n\nfunction validateInvoiceInformation(invoice) {\n\tvar valid = true;\n\tvar errorList = new java.util.ArrayList();\n\n\tif (invoice.getHeader().getFromInvoiceContactInfo() === undefined || invoice.getHeader().getFromInvoiceContactInfo() === null) {\n\t\tthrow new java.lang.IllegalStateException(\"invoice-vendor-not-provided|Enspire Commerce could not process Invoice, \" + invoice.getHeader().getInvoiceNumber() + \", vendor information was not provided in the Invoice.\");\n\t\tvalid = false;\n\t} else {\n\t\tif (isBlank(invoice.getHeader().getFromInvoiceContactInfo().getNameId())) {\n\t\t\tthrow new java.lang.IllegalStateException(\"invoice-vendor-not-provided|Enspire Commerce could not process Invoice, \" + invoice.getHeader().getInvoiceNumber() + \", vendor information was not provided in the Invoice.\");\n\t\t\tvalid = false;\n\t\t}\n\t}\n\treturn valid;\n}\n\nfunction writeToMailbox(invoice, vendorNumber, vendor, mailbox) {\n\tvar vendorName = \"NA\";\n\n\tif (vendor !== null) {\n\t\tvendorName = vendor.getRefName();\n\t}\n\tvar references = invoice.getReferenceData();\n\tvar fromInternalAddress = scriptUtils.getReferenceValueFromReferences(references, \"internalFromAddress\");\n\tif (fromInternalAddress === null) {\n\t\tfromInternalAddress = 'invoices@gnc.com';\n\t}\n\tvar toInternalAddress = scriptUtils.getReferenceValueFromReferences(references, \"internalToAddress\");\n\n\tif (toInternalAddress === null) {\n\t\ttoInternalAddress = 'ax-invoices@gnc.com';\n\t}\n\tvar xml = mapper.writeValueAsString(invoice);\n\n\tvar metaData = new java.util.LinkedHashMap();\n\tmetaData.put(\"orderNumber\", invoice.getHeader().getSalesOrderNumber());\n\tmetaData.put(\"invoiceNumber\", invoice.getHeader().getInvoiceNumber());\n\tmetaData.put(\"vendorNumber\", vendorNumber);\n\tif (vendor !== null) {\n\t\tmetaData.put(\"vendorNumber\", vendor.getRefName());\n\t}\n\tvar mailboxEntry = scriptUtils.createMailboxEntry(mailbox, xml, \"Invoice_\" + invoice.getHeader().getInvoiceNumber() + \".xml\", \"Invoice\" + invoice.getHeader().getInvoiceNumber() + \"_DO\" + invoice.getHeader().getSalesOrderNumber(), toInternalAddress, fromInternalAddress, metaData, metaData, true);\n\treturn mailboxEntry;\n}\n\n\nfunction handleError(errorList, invoice, vendorNumber, vendor, alertError) {\n\tvar mailbox = scriptUtils.getMailbox(\"Invoice-Failure\");\n\tvar mailboxEntry = writeToMailbox(invoice, vendorNumber, vendor, mailbox);\n\ttags.add(\"reprocessMailboxEntryId-\" + mailboxEntry.getId());\n\tif (alertError) {\n\t\talertAndNotifyOfError(errorList, vendor, invoice.getHeader().getInvoiceNumber(), vendorNumber, invoice.getHeader().getSalesOrderNumber());\n\t}\n}\n\nfunction processInvoice() {\n\tvar invoiceValid = true;\n\tvar clazz = new java.lang.Class.forName(\"com.eis.ssit.api.v1.model.Invoice\");\n\tvar invoice = mapper.readValue(body, clazz);\n\tinvoice.getHeader().setSalesOrderNumber(invoice.getHeader().getPurchaseOrderNumber());\n\tvar invNumber = removeWhiteSpace(invoice.getHeader().getInvoiceNumber());\n\tinvoice.getHeader().setInvoiceNumber(invNumber);\n\ttags.add(\"invoiceNumber-\" + invoice.getHeader().getInvoiceNumber());\n\ttags.add(\"orderNumber-\" + invoice.getHeader().getSalesOrderNumber());\n\n\ttry {\n\t\tif (validateInvoiceInformation(invoice)) {\n\t\t\tvar fromContactInfo = invoice.getHeader().getFromInvoiceContactInfo();\n\t\t\tvendorNumber = fromContactInfo.getNameId();\n\t\t\tinvoice.setRefName(fromContactInfo.getNameId() + \"-\" + invoice.getHeader().getInvoiceNumber() + \"-\" + java.lang.System.nanoTime());\n\n\t\t\tvendor = getVendor(vendorNumber, invoice);\n\t\t\tif (vendor === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar merchant = getMerchant(\"GNC-Organization-\", invoice);\n\n\t\t\tif (hasInvoiceBeenReceived(invoice, vendor, vendorNumber)) {\n\t\t\t\tinvoiceValid = false;\n\t\t\t}\n\t\t\tvalidateInvoiceDueDate(invoice, vendor, vendorNumber);\n\t\t\tif (invoiceValid) {\n\t\t\t\tvar shipments = null;\n\t\t\t\tvar salesOrder = null;\n\t\t\t\t//var invoices = getInvoicesForOrder(invoice.getHeader().getPurchaseOrderNumber(), vendor.getRefName());\n\t\t\t\tshipments = findShipmentsForInvoice(vendor, invoice.getHeader().getPurchaseOrderNumber(), invoice, vendorNumber);\n\n\t\t\t\tif (shipments !== null && shipments.size() > 0) {\n\t\t\t\t\tsalesOrder = findSalesOrderForInvoice(vendor, invoice.getHeader().getPurchaseOrderNumber(), invoice, vendorNumber);\n\t\t\t\t\tif (salesOrder !== null) {\n\t\t\t\t\t\tinvoice.getHeader().setOriginalOrderNumber(salesOrder.getHeader().getOriginalOrderNumber());\n\t\t\t\t\t\ttags.add(\"originalOrderNumber-\" + invoice.getHeader().getOriginalOrderNumber());\n\t\t\t\t\t\tif (correlatePackageLinesToInvoiceLines(invoice, shipments.get(0), vendor, vendorNumber, invNumber, invoice.getHeader().getSalesOrderNumber())) {\n\t\t\t\t\t\t\tinvoiceValid = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinvoiceValid = false;\n\t\t\t\t\t\t} \n\t\t\t\t\t} else {\n\t\t\t\t\t\tinvoiceValid = false;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tinvoiceValid = false;\n\t\t\t\t}\n\n\t\t\t\tif (invoiceValid) {\n\t\t\t\t\tinvoice.getHeader().setToOrganization(merchant.constructObjectReference());\n\t\t\t\t\tinvoice.getHeader().setFromOrganization(vendor.constructObjectReference());\n\t\t\t\t\tinvoice.getHeader().setStatus(com.eis.ssit.api.v1.model.InvoiceStatus.RELEASED);\n\t\t\t\t\tinvoice.getHeader().setInvoiceReleaseDate(new java.util.Date());\n\t\t\t\t\t\n\t\t\t\t\tinvoice.setForced(true);\n\t\t\t\t\tvar dataDomains = getVendorDataDomains(vendor);\n\t\t\t\t\tinvoice.getDataDomains().addAll(dataDomains);\n\t\t\t\t\tinvoice.getHeader().setSubtotalBeforeTax(invoice.getHeader().getTotalAmountDue());\n\t\t\t\t\tinvoice.getHeader().setTotalAmountBeforeDiscount(invoice.getHeader().getTotalAmountDue());\n\t\t\t\t\tinvoice.getHeader().setTotalAmountAfterDiscount(invoice.getHeader().getTotalAmountDue());\n\n\t\t\t\t\tinvoice.getHeader().setSubtotalTaxable(invoice.getHeader().getTotalAmountDue());\n\t\t\t\t\t\n\t\t\t\t\t//changes to add AXVendorNumber\n\t\t\t\t\tvar vendorNumberAX = scriptUtils.getReferenceValueFromReferences(vendor.getReferenceData(),\n\t\t\t\t\t\t\"AXVendorNumber\");\n\t\t\t\t    if(log.isInfoEnabled())\n\t\t\t\t    {\n\t\t\t\t        log.info(\"vendorNumberAX:\"+vendorNumberAX);;\n\t\t\t\t    }\n                    if(!isBlank(vendorNumberAX)) {\n                        var vendorNumAXRef = new com.eis.core.api.v1.model.Reference();\n                        vendorNumAXRef.setName(\"AXVendorNumber\");\n                        vendorNumAXRef.setType(\"string\");\n                        vendorNumAXRef.setValue(vendorNumberAX);\n                        invoice.getReferenceData().add(vendorNumAXRef);\n                    }\n\t\t\t\t\tinvoice = invoiceDAO.save(invoice);\n\n\t\t\t\t\tvar mailbox = scriptUtils.getMailbox(\"Invoice-Internal\");\n\t\t\t\t\tvar mailboxEntry = writeToMailbox(invoice, vendorNumber, vendor, mailbox);\n\n\t\t\t\t\tvar shipment = shipments.get(0);\n\t\t\t\t\tvar shipmentRequest = shipmentRequestService.getById(shipment.getShipmentRequestId());\n\t\t\t\t\tvar fullyInvoiced = isSOFullyInvoiced(salesOrder.getHeader().getOrderNumber(), vendorNumber, shipmentRequest);\n\t\t\t\t\tif (fullyInvoiced) {\n\t\t\t\t\t\tsalesOrder.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.INVOICED);\n\t\t\t\t\t}\n\t\t\t\t\tsalesOrder = salesOrderService.save(salesOrder);\n\t\t\t\t\tfor (var z = 0; z < shipments.size(); z++) {\n\t\t\t\t\t\tshipment = shipments.get(z);\n\t\t\t\t\t\tif (fullyInvoiced) {\n\t\t\t\t\t\t\tshipment.setShipmentStatus(com.eis.ssit.api.v1.model.ShipmentStatus.INVOICED);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (shipment.getShipmentRequestId() !== null) {\n\t\t\t\t\t\t\tshipmentRequest = shipmentRequestService.getById(shipment.getShipmentRequestId());\n\t\t\t\t\t\t\tif (shipmentRequest !== null) {\n\t\t\t\t\t\t\t\tif (fullyInvoiced) {\n\t\t\t\t\t\t\t\t\tshipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.INVOICED);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tshipmentRequestService.save(shipmentRequest);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tshipment = shipmentService.save(shipment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t} catch (e) {\n\t\tif (log.isErrorEnabled()) {\n\t\t\tlog.error(\"stacktrace --\", e);\n\t\t}\n\t\tvar message = null;\n\t\tif (e.javaException) {\n\t\t\tjava.lang.System.out.println(\"Caught Exception:\" + e.javaException.message);\n\t\t\tmessage = e.javaException.message;\n\t\t} else {\n\t\t\tmessage = e.message;\n\t\t}\n\t\thandleError(buildErrorList(message), invoice, vendorNumber, vendor, true);\n\t} \n}\n\nvar dataDomain = com.eis.security.multitenancy.model.SecureSession.getDefaultDataDomain();\nvar vendorNumber = \"NA\";\nvar vendor = null;\nvar tags = new java.util.ArrayList();\ntags.add(\"transmissionId-\" + header_transmissionId);\ntags.add(\"file-\" + header_CamelFileName);\ntags.add(\"mailboxEntryId-\" + header_MailboxEntryId);\nprocessInvoice();",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "processInvoices",
    "refKey" : "e0e30aacfcc1da995d78d5a8f9631459",
    "displayName" : "processInvoices",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "processInvoices" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1535529216799,
      "createUser" : "Lakshmi Ashok Kumar",
      "updateTs" : 1542603699242,
      "updateUser" : "Lakshmi Ashok Kumar"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "30828e2e-7394-4c60-9b36-3c5bc2ff0805",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "body" : {
          "id" : null,
          "refName" : "body",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "body",
          "description" : null
        },
        "header_CamelFileName" : {
          "id" : null,
          "refName" : "header_CamelFileName",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_CamelFileName",
          "description" : null
        },
        "header_MailboxEntryId" : {
          "id" : null,
          "refName" : "header_MailboxEntryId",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_MailboxEntryId",
          "description" : null
        },
        "header_transmissionId" : {
          "id" : null,
          "refName" : "header_transmissionId",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "header_transmissionId",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : { }
    },
    "scriptContextObjects" : {
      "blobDAO" : {
        "type" : "javaBean",
        "name" : "blobDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "body" : {
        "type" : "scriptInputVariable",
        "name" : "body",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "body",
        "parameters" : { }
      },
      "correlationService" : {
        "type" : "serviceBean",
        "name" : "correlationService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "correlationService",
        "parameterName" : null,
        "parameters" : { }
      },
      "header_CamelFileName" : {
        "type" : "scriptInputVariable",
        "name" : "header_CamelFileName",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_CamelFileName",
        "parameters" : { }
      },
      "header_MailboxEntryId" : {
        "type" : "scriptInputVariable",
        "name" : "header_MailboxEntryId",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_MailboxEntryId",
        "parameters" : { }
      },
      "header_transmissionId" : {
        "type" : "scriptInputVariable",
        "name" : "header_transmissionId",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : "header_transmissionId",
        "parameters" : { }
      },
      "invoiceDAO" : {
        "type" : "daoBean",
        "name" : "invoiceDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "invoiceDAO",
        "parameterName" : null,
        "parameters" : { }
      },
      "invoiceService" : {
        "type" : "serviceBean",
        "name" : "invoiceService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "invoiceService",
        "parameterName" : null,
        "parameters" : { }
      },
      "mailboxEntryService" : {
        "type" : "serviceBean",
        "name" : "mailboxEntryService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "mailboxEntryService",
        "parameterName" : null,
        "parameters" : { }
      },
      "notificationDAO" : {
        "type" : "javaBean",
        "name" : "notificationDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "organizationService" : {
        "type" : "serviceBean",
        "name" : "organizationService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "organizationService",
        "parameterName" : null,
        "parameters" : { }
      },
      "priceBookEntryService" : {
        "type" : "serviceBean",
        "name" : "priceBookEntryService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "priceBookEntryService",
        "parameterName" : null,
        "parameters" : { }
      },
      "salesOrderService" : {
        "type" : "serviceBean",
        "name" : "salesOrderService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "salesOrderService",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestService" : {
        "type" : "serviceBean",
        "name" : "shipmentRequestService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentRequestService",
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentService" : {
        "type" : "serviceBean",
        "name" : "shipmentService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentService",
        "parameterName" : null,
        "parameters" : { }
      },
      "taskDAO" : {
        "type" : "javaBean",
        "name" : "taskDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "taskHelper" : {
        "type" : "javaBean",
        "name" : "taskHelper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "tradeAgreementService" : {
        "type" : "serviceBean",
        "name" : "tradeAgreementService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "tradeAgreementService",
        "parameterName" : null,
        "parameters" : { }
      },
      "vendorService" : {
        "type" : "serviceBean",
        "name" : "vendorService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "vendorService",
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.gnc" ]
  },
  "functionType" : "routing",
  "inputs" : { },
  "result" : null,
  "active" : true,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "gncPolicy",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "gncPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1531337454496,
      "createUser" : "Paul Ramnarain",
      "updateTs" : 1591201352156,
      "updateUser" : "GNC VDP"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "allowedPackages" : {
      "adapter1" : "adapter1",
      "adapter2" : "adapter2",
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1common" : "com.eis.b2bmb.api.v1.common",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbcamelcustomutil" : "com.eis.b2bmb.camel.custom.util",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscloudcanonicalmodel" : "com.eis.cloud.canonical.model",
      "comeiscloudcanonicalmodelimports" : "com.eis.cloud.canonical.model.imports",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscorecommonJSRunner" : "com.eis.core.common.JSRunner",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrskwiapiv1model" : "com.eis.extsvrs.kwi.api.v1.model",
      "comeisextsvrskwiapiv1services" : "com.eis.extsvrs.kwi.api.v1.services",
      "comeisextsvrsquickbooksapiv1dao" : "com.eis.extsvrs.quickbooks.api.v1.dao",
      "comeisextsvrsshipstationapiv1exception" : "com.eis.extsvrs.shipstation.api.v1.exception",
      "comeisextsvrsshipstationapiv1model" : "com.eis.extsvrs.shipstation.api.v1.model",
      "comeisextsvrsshipstationapiv1services" : "com.eis.extsvrs.shipstation.api.v1.services",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisextsvrssnapfulfilapiv1dao" : "com.eis.extsvrs.snapfulfil.api.v1.dao",
      "comeisextsvrssnapfulfilapiv1model" : "com.eis.extsvrs.snapfulfil.api.v1.model",
      "comeisextsvrssnapfulfilapiv1services" : "com.eis.extsvrs.snapfulfil.api.v1.services",
      "comeisextsvrssnapfulfilapiv1util" : "com.eis.extsvrs.snapfulfil.api.v1.util",
      "comeisgitimpl" : "com.eis.git.impl",
      "comeisgitmodel" : "com.eis.git.model",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngine" : "com.eis.oms.inventory.allocationEngine",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysync" : "com.eis.oms.inventory.sync",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparserscustomer" : "com.eis.ssit.parsers.customer",
      "comeisssitparserspricing" : "com.eis.ssit.parsers.pricing",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersvendor" : "com.eis.ssit.parsers.vendor",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comfasterxmljacksondataformatxml" : "com.fasterxml.jackson.dataformat.xml",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaldom" : "com.sun.org.apache.xerces.internal.dom",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunorgapachexmlinternalserialize" : "com.sun.org.apache.xml.internal.serialize",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilregex" : "java.util.regex",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlnamespace" : "javax.xml.namespace",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransform" : "javax.xml.transform",
      "javaxxmltransformdom" : "javax.xml.transform.dom",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "javaxxmlws" : "javax.xml.ws",
      "javaxxmlwsBindingProvider" : "javax.xml.ws.BindingProvider",
      "javaxxmlwshandlerMessageContext" : "javax.xml.ws.handler.MessageContext",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecatalinaloader" : "org.apache.catalina.loader",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscodecbinary" : "org.apache.commons.codec.binary",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecommonslangtime" : "org.apache.commons.lang.time",
      "orgapachecxfhelpers" : "org.apache.cxf.helpers",
      "orgapachecxfhelpersDOMUtils" : "org.apache.cxf.helpers.DOMUtils",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfjaxws" : "org.apache.cxf.jaxws",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgapachexalanprocessor" : "org.apache.xalan.processor",
      "orgapachexalantransformer" : "org.apache.xalan.transformer",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "orgw3cdom" : "org.w3c.dom",
      "orgxmlsax" : "org.xml.sax",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.gnc" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "processInvoices",
    "refId" : "30828e2e-7394-4c60-9b36-3c5bc2ff0805",
    "refKey" : "e0e30aacfcc1da995d78d5a8f9631459",
    "displayName" : "processInvoices",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "gncPolicy",
    "refId" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "scriptrunner@gnc.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.gnc" ]
}