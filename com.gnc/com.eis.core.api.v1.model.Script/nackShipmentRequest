{
  "refName" : "nackShipmentRequest",
  "refKey" : "5e694cbc7393880640a6a3e4884ddb1c",
  "displayName" : "nackShipmentRequest",
  "schemaVersion" : null,
  "version" : null,
  "current" : true,
  "txId" : null,
  "keywords" : [ ],
  "tags" : [ ],
  "hashSum" : null,
  "auditInfo" : {
    "creationTs" : 1535619339735,
    "createUser" : "Lakshmi Ashok Kumar",
    "updateTs" : 1561736227730,
    "updateUser" : "GNC VDP"
  },
  "uiactions" : [ ],
  "forced" : false,
  "objRef" : false,
  "doNotAudit" : false,
  "logicallyDeleted" : false,
  "create" : false,
  "violationsSet" : null,
  "dynAttributes" : { },
  "internal" : false,
  "referenceData" : [ ],
  "id" : "ae05b44e-f84c-49d0-b33e-eae26dd6b0bd",
  "script" : "/**\nCHANGE LOG\n\n06/12/2019 - Tony Costanzo - OMS-94 - Return the saved shipment request from the updateShipmentRequest method.\n\n**/\n\nvar orderLockMap = hzclient.getMap(\"reservationLockMap\");\n\nvar logger = org.slf4j.LoggerFactory.getLogger(\"rejectShipmentRequest:\");\n\n// return a non-null order if found for the given shipment request, otherwise throw exception\nfunction fetchOrder(shipmentRequest) {\n    var order = shipmentRequestDAO.getOrder(shipmentRequest);\n    if (!order) {\n        throw new com.eis.core.api.v1.exception.B2BNotFoundException(\n            \"Could not find an order for ShipmentRequest with Id: \" + shipmentRequest.getId() \n        );\n    }\n    return order;\n}\nfunction formlineUidToShipmentLineMap(shipmentRequest, lineUidToShipmentLineMap) {\n    for (var x = 0; x < shipmentRequest.getLineItems().size(); x++) {\n        var line = shipmentRequest.getLineItems().get(x);\n        lineUidToShipmentLineMap.put(line.getLineUID(),line);\n    }\n}\n// return a non-null shipment request line and index if found for the given lineUID, otherwise throw exception\nfunction fetchShipmentRequestLine(shipmentRequest, lineUID) {\n\n    var shipmentRequestLines = shipmentRequest.getLineItems();\n    var srl;\n    var idx = 0;\n    if(shipmentRequestLines) {\n        for (var i = 0; i < shipmentRequestLines.size(); i++) {\n            var line = shipmentRequestLines.get(i);\n            if (lineUID.equals(line.getLineUID())\n                && com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.OPEN.equals(line.getStatus())) {\n                srl = line;\n                idx = i + 1;\n                break;\n            }\n        }\n    }\n\n    if(!srl) {\n        throw new com.eis.core.api.v1.exception.B2BNotFoundException(\n            \"Could not find a ShipmentRequestLine in the OPEN status for ShipmentRequest with Id: \" +\n            shipmentRequest.getId() + \" and lineUID: \" + lineUID\n        );\n    }\n\n    return {\n        shipmentRequestLines: shipmentRequestLines,\n        srl: srl,\n        idx: idx\n    }\n}\n\n// return a non-null sales order line if found for the given lineUID, otherwise throw exception\nfunction fetchSalesOrderLine(order, srl, shipmentRequest) {\n    var salesOrderLines = order.getLineItems();\n    var sol;\n    for (var i = 0; i < salesOrderLines.size(); i++) {\n        var line = salesOrderLines.get(i);\n        if (srl.getLineUID().equals(line.getUid())\n            && (com.eis.ssit.api.v1.model.OrderLineStatus.OPEN.equals(line.getStatus()) || com.eis.ssit.api.v1.model.OrderLineStatus.ALLOCATED.equals(line.getStatus()))) {\n            sol = line;\n            break;\n        }\n    }\n    if(!sol) {\n        throw new com.eis.core.api.v1.exception.B2BNotFoundException(\n            \"Could not find a SalesOrderLine in the OPEN status for ShipmentRequest with Id: \" +\n            shipmentRequest.getId() \n        );\n    }\n    return {\n        salesOrderLines: salesOrderLines,\n        sol: sol\n    }\n}\n\n\nfunction lockOrder(order)\n{    \n    var lockAcquired = false;\n    var retryCount = 3;\n    while (!lockAcquired && retryCount > 0) {\n        try {\n            lockAcquired = orderLockMap.tryLock(order.getId(), 60, java.util.concurrent.TimeUnit.SECONDS);\n        }\n        catch (e) {\n            var message = \"Error while getting lock for Order , \" + order.getId() +  \".\";\n            handleError(buildErrorList(message), shipment, true);\n        }\n        retryCount--;\n    }\n    \n    if (!lockAcquired)\n    {        \n        message = \"Could not acquire order map lock for order:\" + order.getId()\n                + \" after 3 attempts\";\n        handleError(buildErrorList(message), shipment, true);\n    }\n    return lockAcquired;\n}\n\nfunction unlockOrder(order)\n{\n    try {\n        orderLockMap.unlock(order.getId());\n    }\n    catch (e) {\n        var message = \"Error while unlocking Order , \" + order.getId() +  \".\";\n        handleError(buildErrorList(message), shipment, true);\n    }       \n}\n\n// do the actual rejection, return true if short shipped\nfunction doReject(sol, salesOrderLines, srl, shipmentRequestLines, idx, itemQty, reason, reasonCode) {\n\n    var shortShip = false;\n    if(itemQty < srl.getItemQty()) {\n\t\t sol.setCancelledQty(itemQty);\n        // clone the shipment request line, and have the new lines as -A and -B\n        var srlCopy = new com.eis.ssit.api.v1.model.ShipmentRequestLine(srl);\n        srlCopy.setLineUID(lineUID);\n        srlCopy.setPoItemId(srl.getPoItemId() + \"-A\");\n        srl.setPoItemId(srl.getPoItemId() + \"-B\");\n        srlCopy.setItemQty(srl.getItemQty() - itemQty);\n        srlCopy.setStatus(com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.ACCEPTED);\n        shipmentRequestLines.add(idx, srlCopy);\n\n        shortShip = true;\n    }\n    else if(itemQty == srl.getItemQty()) {\n    \tsol.setCancelledQty(itemQty);\n    \tsol.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.CANCELLED);\n    }\n\n    srl.setItemQty(itemQty);\n    srl.setStatus(com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.REJECTED);\n    srl.setRejectionReason(reason);\n    srl.setRejectionCode(reasonCode);\n\n    logger.info(\"Entered rejectLine : shortShip :\" + shortShip);\n    return shortShip;\n}\n\n// update the header status for both sales order and shipment request\nfunction updateHeaderStatus(order, shipmentRequest, shipmentRequestLines, shortShip) {\n\n    // WARN: Assuming here that for thk there is a single SR for a SO\n    // set shipment request status as REJECTED if all of the shipment request lines lines are rejected\n    var notEligibleForRejection = false;\n    var notEligibleForInvoiced = false;\n    for (var i = 0; i < shipmentRequestLines.size(); i++) {\n        var line = shipmentRequestLines.get(i);\n        if(!com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.REJECTED.equals(line.getStatus())) {\n            notEligibleForRejection = true;\n        }\n        if(!com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.REJECTED.equals(line.getStatus()) &&\n            !com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.CLOSED.equals(line.getStatus())) {\n            notEligibleForInvoiced = true;\n        }\n    }\n    if(!notEligibleForRejection) {\n        shipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.REJECTED);\n       // order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.REJECTED);\n    }\n\n    // set shipment request status as INVOICED if all of the shipments under it are INVOICED\n    // We might need to do this explicitly since we can have a case where for eg. we\n    // have 3 SRLs, 2 of them\n    // are accepted and the shipments INVOICED as well. Now, the last SRL say is now completely\n    // rejected. Then, we will mark the SR as INVOICED.\n    if(!shortShip && !notEligibleForInvoiced) {\n        var fields = new java.util.ArrayList();\n        fields.add(\"shipmentStatus\");\n        var shipments = shipmentService.getList(0, java.lang.Integer.MAX_VALUE, \"shipmentRequestId:\" +\n            shipmentRequest.getId(), fields, null);\n        if(shipments !== null && !shipments.isEmpty()) {\n            if(notEligibleForRejection) {\n                shipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.SHIPMENT_CREATED);\n            }\n            for(var i = 0; i < shipments.size(); i++) {\n                var shipment = shipments.get(i);\n                if(!com.eis.ssit.api.v1.model.ShipmentStatus.INVOICED.equals(shipment.getShipmentStatus())) {\n                    break;\n                }\n                else if(i == shipments.size() - 1) {\n                    shipmentRequest.getHeader().setStatus(com.eis.ssit.api.v1.model.ShipmentRequestStatus.INVOICED);\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.INVOICED);\n                }\n            }\n        }\n    }\n}\n\n// update the shipment request in the database\nfunction updateShipmentRequest(shipmentRequest) {\n    shipmentRequest = shipmentRequestDAO.save(shipmentRequest);\n    return shipmentRequest;\n}\n\n// update the sales order in the database\nfunction updateOrder(order) {\n    order = salesOrderDAO.save(order,false);\n    return order;\n}\n\n// do logging for sales order update\nfunction doSalesOrderUpdateLogging(salesOrderReleaseLog, sol, reason, reasonCode, shipmentRequest) {\n    if (salesOrderReleaseLog !== null) {\n        var log = java.lang.String.format(\"For ShipmentRequest %s , rejected product %s with quantity %s \" +\n                    \"- Reason: \" + \"%s, Reason code: %s\",shipmentRequest.getHeader().shipmentRequestNumber,\n                    sol.getSystemCatalogProductIdentifier(), sol.getItemQty(),\n                    reason, reasonCode);\n\n        inventoryAllocationLoggerDAO.log(log,\n            salesOrderReleaseLog,\n            com.eis.ssit.api.v1.model.OrderReleaseLogCategory.BUSINESS,\n            com.eis.ssit.api.v1.model.OrderLogLevel.INFO);\n    }\n}\n\n// reject a particular shipment request\nfunction rejectShipmentRequest() {\n    \n    try {\n        // fetch the corresponding order\n        \n        order = fetchOrder(shipmentRequest);\n        logger.info(\"Entered rejectShipmentRequest : order :\" + order);\n        var srlIt = shipmentRequest.getLineItems().iterator();\n        var salesOrderReleaseLog = inventoryAllocationLoggerDAO.initSalesOrderReleaseLog(order);\n        \n        while (srlIt.hasNext()) {\n            var srline = srlIt.next();\n            logger.info(\"rejectShipmentRequest SrLine:\"+srline);\n            if (com.eis.ssit.api.v1.model.ShipmentRequestLineStatus.OPEN.equals(srline.getStatus())) {\n\n                // fetch the shipment request line in the right status\n                var shipmentReqLine = fetchShipmentRequestLine(shipmentRequest, srline.getLineUID());\n                var shipmentRequestLines = shipmentReqLine.shipmentRequestLines;\n                var srl = shipmentReqLine.srl;\n                var idx = shipmentReqLine.idx;\n        \n                // fetch the sales order line in the right status\n                var salesOrdLine = fetchSalesOrderLine(order, srl, shipmentRequest);\n                var salesOrderLines = salesOrdLine.salesOrderLines;\n                var sol = salesOrdLine.sol;\n        \n                // do the actual rejection\n                var shortShip = doReject(sol, salesOrderLines, srl, shipmentRequestLines, idx, srline.getItemQty(), reason, reasonCode);\n        \n                // update header status for both shipment request and sales order\n                updateHeaderStatus(order, shipmentRequest, shipmentRequestLines, shortShip);\n                // do an update logging for the sales order updated\n                doSalesOrderUpdateLogging(salesOrderReleaseLog, sol, reason, reasonCode,shipmentRequest);\n            }\n        }\n        if (salesOrderReleaseLog !== null) {\n            inventoryAllocationLoggerDAO.closeLog(salesOrderReleaseLog,\n                order.getHeader().getStatus());\n        }\n        \n        // save the shipment request\n        shipmentRequest = updateShipmentRequest(shipmentRequest);\n        \n        var orderNumber =  shipmentRequest.getHeader().getSalesOrderNumber();\n   \t\tvar shipmentRequests = shipmentRequestService.getList(0, 500, \"header.salesOrderNumber:\" + orderNumber, null, null);\n    \tvar allShipmentRequestsComplete = true;\n    \tvar totalShipped = 0;\n\n    \tvar srIterator = shipmentRequests.iterator();\n   \t\twhile(srIterator.hasNext()) {\n        \tvar sr = srIterator.next();\n            java.lang.System.out.println(\"+++++Shipment Request Status:\"+sr.getHeader().getStatus());\n            if(sr.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.ShipmentRequestStatus.PENDING) || \t\tsr.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.ShipmentRequestStatus.SHIPMENT_IN_PROGRESS)) \n            {\n                allShipmentRequestsComplete = false;\n            }\n                \n           \tvar lineIterator = sr.getLineItems().iterator();\n            while(lineIterator.hasNext()) {\n                var line = lineIterator.next();\n                var shippedQty = line.getShippedQty();\n            \ttotalShipped = totalShipped + shippedQty;\n            \t}\n        \t}\n        \t\n        \tvar cancelOrder = false;\n        \tif(allShipmentRequestsComplete && totalShipped === 0){\n            \tcancelOrder = true;\n        \t}\n            \n        \tvar lineUidToShipmentLineMap = new java.util.HashMap();\n        \tformlineUidToShipmentLineMap(shipmentRequest,lineUidToShipmentLineMap);\n\n        \tjava.lang.System.out.println(\"+++++Order Status:\"+order.getHeader().getStatus());\n        \tif (order.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.OrderStatus.PARTIALLY_SHIPPED) || order.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.OrderStatus.RELEASED)  || order.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.OrderStatus.FAILED_TO_ALLOCATE)) {\n                \n             if(allShipmentRequestsComplete && cancelOrder) {\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.CANCELED);\n                } else if(allShipmentRequestsComplete && totalShipped > 0) {\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.SHIPPED);\n                } else if(!allShipmentRequestsComplete && totalShipped > 0) {\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.PARTIALLY_SHIPPED);\n                } else if(!allShipmentRequestsComplete && totalShipped === 0) {\n                    order.getHeader().setStatus(com.eis.ssit.api.v1.model.OrderStatus.RELEASED);\n                }\n                \n            for (var q = 0; q < order.getLineItems().size(); q++) {\n                var line = order.getLineItems().get(q);\n                var shipmentLine = lineUidToShipmentLineMap.get(line.getUid());\n                if(shipmentLine !== null) {\n                    var shippedQty = shipmentLine.getShippedQty();\n                    if(shippedQty > 0 ) {\n                        if (line.getStatus().equals(com.eis.ssit.api.v1.model.OrderLineStatus.OPEN)) {\n                            line.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.CLOSED);\n                        }\n                    } else {\n                        if (line.getStatus().equals(com.eis.ssit.api.v1.model.OrderLineStatus.OPEN)) {\n                                line.setStatus(com.eis.ssit.api.v1.model.OrderLineStatus.CANCELLED);\n                                line.setCancelledQty(line.getItemQty());\n                        }\n                    }\n                }\n            }\n            order = salesOrderService.save(order);\n       \t\t}        \n        // save the sales order\n        order = updateOrder(order);\n    }\n    catch(e) {\n        taskHelper.notifyAndCreateTask(\n            \"RejectShipmentRequest:ShipmentRequestID:\"+shipmentRequest.getId()+java.lang.System.nanoTime(),\n            \"ShipmentRequest Rejection Failure for ShipmentRequestID:\"+shipmentRequest.getId(),\n            e,\n            \"ShipmentRequest Rejection Failure\", dataDomain,\n            \"ShipmentRequest  Rejection Failure\", \"shipment-request-rejection-failure\", \"Tony Costanzo\");\n        logger.error(\"ShipmentRequest  Rejection Failure for ShipmentRequestID:\"+shipmentRequest.getId(), e);\n        throw e;\n    } \n    \n    return order;\n}\n\n\nfunction handleRejection(order, shipmentRequest) {\n    var lockAcquired = lockOrder(order);\n    try {\n        if(lockAcquired && shipmentRequest.getHeader().getStatus().equals(com.eis.ssit.api.v1.model.ShipmentRequestStatus.PENDING)) {\n            rejectShipmentRequest();\n        }\n    } finally {\n        if(lockAcquired)\n        {\n        \tunlockOrder(order); \n        }\n        return order;\n    } \n}\nvar order = null;\nvar dataDomain = com.eis.security.multitenancy.model.SecureSession.getDefaultDataDomain();\nlogger.info(\"Entered nackShipmentRequest : ShipmentRequest :\" + shipmentRequest);\nvar reasonCode = shipmentRequest.getHeader().getRejectionCode();\nvar reason = shipmentRequest.getHeader().getRejectionReason();\nvar lockAcquired = false;\nvar order = fetchOrder(shipmentRequest);\nhandleRejection(order, shipmentRequest);\n",
  "compensateScript" : null,
  "language" : null,
  "type" : {
    "refName" : "rejectShipmentRequestType",
    "refKey" : "633fdfb261698e2103085c3a666e3c48",
    "displayName" : "rejectShipmentRequestType",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "rejectShipmentRequestType" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1535016054504,
      "createUser" : "Lakshmi Ashok Kumar",
      "updateTs" : 1561734786152,
      "updateUser" : "GNC VDP"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "5cf62225-0138-4684-867b-d92ff1e1d350",
    "inputs" : {
      "name" : null,
      "attributes" : {
        "reason" : {
          "id" : null,
          "refName" : "reason",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "reason",
          "description" : null
        },
        "reasonCode" : {
          "id" : null,
          "refName" : "reasonCode",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "reasonCode",
          "description" : null
        },
        "shipmentRequest" : {
          "id" : null,
          "refName" : "shipmentRequest",
          "type" : "Object",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "shipmentRequest",
          "description" : null
        },
        "userId" : {
          "id" : null,
          "refName" : "userId",
          "type" : "String",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : true,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "userId",
          "description" : null
        }
      }
    },
    "outputs" : {
      "name" : null,
      "attributes" : {
        "order" : {
          "id" : null,
          "refName" : "order",
          "type" : "Object",
          "value" : null,
          "className" : null,
          "selectValues" : [ ],
          "selectValuesType" : null,
          "selectValuesKey" : null,
          "defaultValue" : null,
          "required" : false,
          "inheritable" : false,
          "hidden" : false,
          "displayOnFrontend" : true,
          "label" : "order",
          "description" : null
        }
      }
    },
    "scriptContextObjects" : {
      "hzclient" : {
        "type" : "javaBean",
        "name" : "hzclient",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "inventoryAllocationLoggerDAO" : {
        "type" : "javaBean",
        "name" : "inventoryAllocationLoggerDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "inventoryPoolEntryDAO" : {
        "type" : "javaBean",
        "name" : "inventoryPoolEntryDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "reservationEntryService" : {
        "type" : "serviceBean",
        "name" : "reservationEntryService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "reservationEntryService",
        "parameterName" : null,
        "parameters" : { }
      },
      "salesOrderDAO" : {
        "type" : "daoBean",
        "name" : "salesOrderDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "salesOrderDAO",
        "parameterName" : null,
        "parameters" : { }
      },
      "salesOrderService" : {
        "type" : "serviceBean",
        "name" : "salesOrderService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "salesOrderService",
        "parameterName" : null,
        "parameters" : { }
      },
      "scriptUtils" : {
        "type" : "javaBean",
        "name" : "scriptUtils",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestDAO" : {
        "type" : "daoBean",
        "name" : "shipmentRequestDAO",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentRequestDAO",
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentRequestService" : {
        "type" : "serviceBean",
        "name" : "shipmentRequestService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentRequestService",
        "parameterName" : null,
        "parameters" : { }
      },
      "shipmentService" : {
        "type" : "serviceBean",
        "name" : "shipmentService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "shipmentService",
        "parameterName" : null,
        "parameters" : { }
      },
      "taskHelper" : {
        "type" : "javaBean",
        "name" : "taskHelper",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : null,
        "parameterName" : null,
        "parameters" : { }
      },
      "vendorService" : {
        "type" : "serviceBean",
        "name" : "vendorService",
        "methodName" : null,
        "modelName" : null,
        "serviceName" : "vendorService",
        "parameterName" : null,
        "parameters" : { }
      }
    },
    "type" : "GENERIC",
    "eventType" : null,
    "scheduledActionTriggerRef" : null,
    "dataDomains" : [ "com.gnc" ]
  },
  "functionType" : "rejectShipmentRequest",
  "inputs" : { },
  "result" : null,
  "active" : true,
  "blacklisted" : false,
  "blacklistReason" : null,
  "scriptTracer" : null,
  "scriptSecurityPolicy" : {
    "refName" : "gncPolicy",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "schemaVersion" : null,
    "version" : null,
    "current" : true,
    "txId" : null,
    "keywords" : [ "gncPolicy" ],
    "tags" : [ ],
    "hashSum" : null,
    "auditInfo" : {
      "creationTs" : 1531337454496,
      "createUser" : "Paul Ramnarain",
      "updateTs" : 1591201352156,
      "updateUser" : "GNC VDP"
    },
    "uiactions" : [ ],
    "forced" : false,
    "objRef" : false,
    "doNotAudit" : false,
    "logicallyDeleted" : false,
    "create" : false,
    "violationsSet" : null,
    "dynAttributes" : { },
    "internal" : false,
    "referenceData" : [ ],
    "id" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "allowedPackages" : {
      "adapter1" : "adapter1",
      "adapter2" : "adapter2",
      "aucombytecodeopencsv" : "au.com.bytecode.opencsv",
      "comcsvreader" : "com.csvreader",
      "comctcwstxsr" : "com.ctc.wstx.sr",
      "comctcwstxstax" : "com.ctc.wstx.stax",
      "comeisb2bmbapiv1common" : "com.eis.b2bmb.api.v1.common",
      "comeisb2bmbapiv1model" : "com.eis.b2bmb.api.v1.model",
      "comeisb2bmbapiv1servicesimpl" : "com.eis.b2bmb.api.v1.services.impl",
      "comeisb2bmbcamelcustomutil" : "com.eis.b2bmb.camel.custom.util",
      "comeisb2bmbutil" : "com.eis.b2bmb.util",
      "comeisbasegrammarlistenerquery" : "com.eis.base.grammar.listener.query",
      "comeisbasetransaction" : "com.eis.base.transaction",
      "comeisblobstoregridfs" : "com.eis.blobstore.gridfs",
      "comeiscloudcanonicalmodel" : "com.eis.cloud.canonical.model",
      "comeiscloudcanonicalmodelimports" : "com.eis.cloud.canonical.model.imports",
      "comeiscoreapiv1daoimplsprngmongo" : "com.eis.core.api.v1.dao.impl.sprngmongo",
      "comeiscoreapiv1exception" : "com.eis.core.api.v1.exception",
      "comeiscoreapiv1model" : "com.eis.core.api.v1.model",
      "comeiscoreapiv1serviceimpl" : "com.eis.core.api.v1.service.impl",
      "comeiscorecommon" : "com.eis.core.common",
      "comeiscorecommonJSRunner" : "com.eis.core.common.JSRunner",
      "comeiscrypto" : "com.eis.crypto",
      "comeisextsvrskwiapiv1model" : "com.eis.extsvrs.kwi.api.v1.model",
      "comeisextsvrskwiapiv1services" : "com.eis.extsvrs.kwi.api.v1.services",
      "comeisextsvrsquickbooksapiv1dao" : "com.eis.extsvrs.quickbooks.api.v1.dao",
      "comeisextsvrsshipstationapiv1exception" : "com.eis.extsvrs.shipstation.api.v1.exception",
      "comeisextsvrsshipstationapiv1model" : "com.eis.extsvrs.shipstation.api.v1.model",
      "comeisextsvrsshipstationapiv1services" : "com.eis.extsvrs.shipstation.api.v1.services",
      "comeisextsvrsshipstationapiv1util" : "com.eis.extsvrs.shipstation.api.v1.util",
      "comeisextsvrssnapfulfilapiv1dao" : "com.eis.extsvrs.snapfulfil.api.v1.dao",
      "comeisextsvrssnapfulfilapiv1model" : "com.eis.extsvrs.snapfulfil.api.v1.model",
      "comeisextsvrssnapfulfilapiv1services" : "com.eis.extsvrs.snapfulfil.api.v1.services",
      "comeisextsvrssnapfulfilapiv1util" : "com.eis.extsvrs.snapfulfil.api.v1.util",
      "comeisgitimpl" : "com.eis.git.impl",
      "comeisgitmodel" : "com.eis.git.model",
      "comeisjson" : "com.eis.json",
      "comeisomsinventoryallocationEngine" : "com.eis.oms.inventory.allocationEngine",
      "comeisomsinventoryallocationEngineactions" : "com.eis.oms.inventory.allocationEngine.actions",
      "comeisomsinventoryallocationEngineengine" : "com.eis.oms.inventory.allocationEngine.engine",
      "comeisomsinventorysync" : "com.eis.oms.inventory.sync",
      "comeisomspricingpricingEnginemodel" : "com.eis.oms.pricing.pricingEngine.model",
      "comeisomspricingpricingEngineservices" : "com.eis.oms.pricing.pricingEngine.services",
      "comeissecurityjacksonFilters" : "com.eis.security.jacksonFilters",
      "comeissecuritymultitenancymodel" : "com.eis.security.multitenancy.model",
      "comeissecuritymultitenancyshiro" : "com.eis.security.multitenancy.shiro",
      "comeisssitapiv1allocengine" : "com.eis.ssit.api.v1.allocengine",
      "comeisssitapiv1daosprngmongo" : "com.eis.ssit.api.v1.dao.sprngmongo",
      "comeisssitapiv1model" : "com.eis.ssit.api.v1.model",
      "comeisssitapiv1services" : "com.eis.ssit.api.v1.services",
      "comeisssitapiv1util" : "com.eis.ssit.api.v1.util",
      "comeisssitparserscustomer" : "com.eis.ssit.parsers.customer",
      "comeisssitparserspricing" : "com.eis.ssit.parsers.pricing",
      "comeisssitparsersproductsku" : "com.eis.ssit.parsers.productsku",
      "comeisssitparsersvendor" : "com.eis.ssit.parsers.vendor",
      "comeisutil" : "com.eis.util",
      "comfasterxmljacksonannotation" : "com.fasterxml.jackson.annotation",
      "comfasterxmljacksonannotationJsonInclude" : "com.fasterxml.jackson.annotation.JsonInclude",
      "comfasterxmljacksonannotationJsonIncludeInclude" : "com.fasterxml.jackson.annotation.JsonInclude.Include",
      "comfasterxmljacksondatabind" : "com.fasterxml.jackson.databind",
      "comfasterxmljacksondatabindserimpl" : "com.fasterxml.jackson.databind.ser.impl",
      "comfasterxmljacksondataformatxml" : "com.fasterxml.jackson.dataformat.xml",
      "comgooglecommonbase" : "com.google.common.base",
      "comgooglecommoncollect" : "com.google.common.collect",
      "comgooglegson" : "com.google.gson",
      "comgooglegsonstream" : "com.google.gson.stream",
      "comhazelcast" : "com.hazelcast",
      "commongodb" : "com.mongodb",
      "commongodbgridfs" : "com.mongodb.gridfs",
      "comopencsv" : "com.opencsv",
      "comsunorgapachexercesinternaldom" : "com.sun.org.apache.xerces.internal.dom",
      "comsunorgapachexercesinternaljaxp" : "com.sun.org.apache.xerces.internal.jaxp",
      "comsunorgapachexmlinternalserialize" : "com.sun.org.apache.xml.internal.serialize",
      "comsunproxy" : "com.sun.proxy",
      "javaio" : "java.io",
      "javalang" : "java.lang",
      "javalangreflect" : "java.lang.reflect",
      "javamath" : "java.math",
      "javanet" : "java.net",
      "javatext" : "java.text",
      "javatime" : "java.time",
      "javatimeformat" : "java.time.format",
      "javautil" : "java.util",
      "javautilregex" : "java.util.regex",
      "javautilzip" : "java.util.zip",
      "javaxwsrsclient" : "javax.ws.rs.client",
      "javaxwsrscore" : "javax.ws.rs.core",
      "javaxxmlbind" : "javax.xml.bind",
      "javaxxmlnamespace" : "javax.xml.namespace",
      "javaxxmlparsers" : "javax.xml.parsers",
      "javaxxmlstream" : "javax.xml.stream",
      "javaxxmltransform" : "javax.xml.transform",
      "javaxxmltransformdom" : "javax.xml.transform.dom",
      "javaxxmltransformstream" : "javax.xml.transform.stream",
      "javaxxmlws" : "javax.xml.ws",
      "javaxxmlwsBindingProvider" : "javax.xml.ws.BindingProvider",
      "javaxxmlwshandlerMessageContext" : "javax.xml.ws.handler.MessageContext",
      "orgapachecamelconverterstream" : "org.apache.camel.converter.stream",
      "orgapachecatalinaloader" : "org.apache.catalina.loader",
      "orgapachecommonsbeanutils" : "org.apache.commons.beanutils",
      "orgapachecommonsbeanutilsconverters" : "org.apache.commons.beanutils.converters",
      "orgapachecommonscodecbinary" : "org.apache.commons.codec.binary",
      "orgapachecommonscollections4" : "org.apache.commons.collections4",
      "orgapachecommonsio" : "org.apache.commons.io",
      "orgapachecommonslang" : "org.apache.commons.lang",
      "orgapachecommonslang3" : "org.apache.commons.lang3",
      "orgapachecommonslangtime" : "org.apache.commons.lang.time",
      "orgapachecxfhelpers" : "org.apache.cxf.helpers",
      "orgapachecxfhelpersDOMUtils" : "org.apache.cxf.helpers.DOMUtils",
      "orgapachecxfjaxrsclient" : "org.apache.cxf.jaxrs.client",
      "orgapachecxfjaxrsimpl" : "org.apache.cxf.jaxrs.impl",
      "orgapachecxfjaxws" : "org.apache.cxf.jaxws",
      "orgapachecxfmessage" : "org.apache.cxf.message",
      "orgapacheloggingslf4j" : "org.apache.logging.slf4j",
      "orgapacheshiro" : "org.apache.shiro",
      "orgapachevelocity" : "org.apache.velocity",
      "orgapachexalanprocessor" : "org.apache.xalan.processor",
      "orgapachexalantransformer" : "org.apache.xalan.transformer",
      "orgcodehausjacksonmapserimpl" : "org.codehaus.jackson.map.ser.impl",
      "orgjodatime" : "org.joda.time",
      "orgjodatimeformat" : "org.joda.time.format",
      "orgmozillajavascript" : "org.mozilla.javascript",
      "orgslf4j" : "org.slf4j",
      "orgslf4jLoggerFactory" : "org.slf4j.LoggerFactory",
      "orgslf4jimpl" : "org.slf4j.impl",
      "orgspringframeworkbeans" : "org.springframework.beans",
      "orgw3cdom" : "org.w3c.dom",
      "orgxmlsax" : "org.xml.sax",
      "sunnetwwwprotocolhttp" : "sun.net.www.protocol.http",
      "sunutilcalendar" : "sun.util.calendar"
    },
    "allowedClasses" : { },
    "allowedMethods" : { },
    "permissionsNeeded" : { },
    "dataDomains" : [ "com.gnc" ]
  },
  "scriptTypeObjRef" : {
    "refName" : "rejectShipmentRequestType",
    "refId" : "5cf62225-0138-4684-867b-d92ff1e1d350",
    "refKey" : "633fdfb261698e2103085c3a666e3c48",
    "displayName" : "rejectShipmentRequestType",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptType",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "scriptSecurityPolicyObjRef" : {
    "refName" : "gncPolicy",
    "refId" : "13cf9dc2-9904-495a-9e81-c7ea8394743c",
    "refKey" : "fb3e43ceeb8ac38e1dcf56f0747b1e55",
    "displayName" : "gncPolicy",
    "dataDomain" : "com.gnc",
    "type" : "com.eis.core.api.v1.model.ScriptSecurityPolicy",
    "nullable" : false,
    "internal" : false,
    "parentId" : null,
    "parentType" : null
  },
  "runAsId" : "admin@gnc.com",
  "runAsDefaultDataDomain" : null,
  "dataDomains" : [ "com.gnc" ]
}